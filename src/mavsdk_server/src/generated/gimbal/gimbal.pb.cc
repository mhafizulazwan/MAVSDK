// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gimbal/gimbal.proto

#include "gimbal/gimbal.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mavsdk {
namespace rpc {
namespace gimbal {

inline constexpr TakeControlRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : control_mode_{static_cast< ::mavsdk::rpc::gimbal::ControlMode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TakeControlRequest::TakeControlRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TakeControlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TakeControlRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TakeControlRequestDefaultTypeInternal() {}
  union {
    TakeControlRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TakeControlRequestDefaultTypeInternal _TakeControlRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeControlRequest::SubscribeControlRequest(::_pbi::ConstantInitialized) {}
struct SubscribeControlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeControlRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeControlRequestDefaultTypeInternal() {}
  union {
    SubscribeControlRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeControlRequestDefaultTypeInternal _SubscribeControlRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeAttitudeRequest::SubscribeAttitudeRequest(::_pbi::ConstantInitialized) {}
struct SubscribeAttitudeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeAttitudeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeAttitudeRequestDefaultTypeInternal() {}
  union {
    SubscribeAttitudeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeAttitudeRequestDefaultTypeInternal _SubscribeAttitudeRequest_default_instance_;

inline constexpr SetRoiLocationRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : latitude_deg_{0},
        longitude_deg_{0},
        altitude_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRoiLocationRequest::SetRoiLocationRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRoiLocationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRoiLocationRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRoiLocationRequestDefaultTypeInternal() {}
  union {
    SetRoiLocationRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRoiLocationRequestDefaultTypeInternal _SetRoiLocationRequest_default_instance_;

inline constexpr SetPitchRateAndYawRateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : pitch_rate_deg_s_{0},
        yaw_rate_deg_s_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetPitchRateAndYawRateRequest::SetPitchRateAndYawRateRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetPitchRateAndYawRateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPitchRateAndYawRateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPitchRateAndYawRateRequestDefaultTypeInternal() {}
  union {
    SetPitchRateAndYawRateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPitchRateAndYawRateRequestDefaultTypeInternal _SetPitchRateAndYawRateRequest_default_instance_;

inline constexpr SetPitchAndYawRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : pitch_deg_{0},
        yaw_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetPitchAndYawRequest::SetPitchAndYawRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetPitchAndYawRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPitchAndYawRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPitchAndYawRequestDefaultTypeInternal() {}
  union {
    SetPitchAndYawRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPitchAndYawRequestDefaultTypeInternal _SetPitchAndYawRequest_default_instance_;

inline constexpr SetModeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : gimbal_mode_{static_cast< ::mavsdk::rpc::gimbal::GimbalMode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetModeRequest::SetModeRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetModeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetModeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetModeRequestDefaultTypeInternal() {}
  union {
    SetModeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetModeRequestDefaultTypeInternal _SetModeRequest_default_instance_;

inline constexpr SetAnglesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : roll_deg_{0},
        pitch_deg_{0},
        yaw_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetAnglesRequest::SetAnglesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetAnglesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAnglesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAnglesRequestDefaultTypeInternal() {}
  union {
    SetAnglesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAnglesRequestDefaultTypeInternal _SetAnglesRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR ReleaseControlRequest::ReleaseControlRequest(::_pbi::ConstantInitialized) {}
struct ReleaseControlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReleaseControlRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReleaseControlRequestDefaultTypeInternal() {}
  union {
    ReleaseControlRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReleaseControlRequestDefaultTypeInternal _ReleaseControlRequest_default_instance_;

inline constexpr Quaternion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : w_{0},
        x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Quaternion::Quaternion(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;

inline constexpr GimbalResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : result_str_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{static_cast< ::mavsdk::rpc::gimbal::GimbalResult_Result >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GimbalResult::GimbalResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GimbalResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GimbalResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GimbalResultDefaultTypeInternal() {}
  union {
    GimbalResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GimbalResultDefaultTypeInternal _GimbalResult_default_instance_;

inline constexpr EulerAngle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : roll_deg_{0},
        pitch_deg_{0},
        yaw_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EulerAngle::EulerAngle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EulerAngleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EulerAngleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EulerAngleDefaultTypeInternal() {}
  union {
    EulerAngle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;

inline constexpr ControlStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : control_mode_{static_cast< ::mavsdk::rpc::gimbal::ControlMode >(0)},
        sysid_primary_control_{0},
        compid_primary_control_{0},
        sysid_secondary_control_{0},
        compid_secondary_control_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ControlStatus::ControlStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ControlStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlStatusDefaultTypeInternal() {}
  union {
    ControlStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlStatusDefaultTypeInternal _ControlStatus_default_instance_;

inline constexpr AngularVelocityBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : roll_rad_s_{0},
        pitch_rad_s_{0},
        yaw_rad_s_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AngularVelocityBody::AngularVelocityBody(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AngularVelocityBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AngularVelocityBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AngularVelocityBodyDefaultTypeInternal() {}
  union {
    AngularVelocityBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;

inline constexpr TakeControlResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gimbal_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TakeControlResponse::TakeControlResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TakeControlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TakeControlResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TakeControlResponseDefaultTypeInternal() {}
  union {
    TakeControlResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TakeControlResponseDefaultTypeInternal _TakeControlResponse_default_instance_;

inline constexpr SetRoiLocationResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gimbal_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRoiLocationResponse::SetRoiLocationResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRoiLocationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRoiLocationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRoiLocationResponseDefaultTypeInternal() {}
  union {
    SetRoiLocationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRoiLocationResponseDefaultTypeInternal _SetRoiLocationResponse_default_instance_;

inline constexpr SetPitchRateAndYawRateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gimbal_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetPitchRateAndYawRateResponse::SetPitchRateAndYawRateResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetPitchRateAndYawRateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPitchRateAndYawRateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPitchRateAndYawRateResponseDefaultTypeInternal() {}
  union {
    SetPitchRateAndYawRateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPitchRateAndYawRateResponseDefaultTypeInternal _SetPitchRateAndYawRateResponse_default_instance_;

inline constexpr SetPitchAndYawResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gimbal_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetPitchAndYawResponse::SetPitchAndYawResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetPitchAndYawResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPitchAndYawResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPitchAndYawResponseDefaultTypeInternal() {}
  union {
    SetPitchAndYawResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPitchAndYawResponseDefaultTypeInternal _SetPitchAndYawResponse_default_instance_;

inline constexpr SetModeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gimbal_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetModeResponse::SetModeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetModeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetModeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetModeResponseDefaultTypeInternal() {}
  union {
    SetModeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetModeResponseDefaultTypeInternal _SetModeResponse_default_instance_;

inline constexpr SetAnglesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gimbal_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetAnglesResponse::SetAnglesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetAnglesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAnglesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAnglesResponseDefaultTypeInternal() {}
  union {
    SetAnglesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAnglesResponseDefaultTypeInternal _SetAnglesResponse_default_instance_;

inline constexpr ReleaseControlResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gimbal_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ReleaseControlResponse::ReleaseControlResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ReleaseControlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReleaseControlResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReleaseControlResponseDefaultTypeInternal() {}
  union {
    ReleaseControlResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReleaseControlResponseDefaultTypeInternal _ReleaseControlResponse_default_instance_;

inline constexpr ControlResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        control_status_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ControlResponse::ControlResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ControlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlResponseDefaultTypeInternal() {}
  union {
    ControlResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlResponseDefaultTypeInternal _ControlResponse_default_instance_;

inline constexpr Attitude::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        euler_angle_forward_{nullptr},
        quaternion_forward_{nullptr},
        euler_angle_north_{nullptr},
        quaternion_north_{nullptr},
        angular_velocity_{nullptr},
        timestamp_us_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR Attitude::Attitude(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AttitudeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttitudeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttitudeDefaultTypeInternal() {}
  union {
    Attitude _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttitudeDefaultTypeInternal _Attitude_default_instance_;

inline constexpr AttitudeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attitude_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AttitudeResponse::AttitudeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AttitudeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttitudeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttitudeResponseDefaultTypeInternal() {}
  union {
    AttitudeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttitudeResponseDefaultTypeInternal _AttitudeResponse_default_instance_;
}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_gimbal_2fgimbal_2eproto[24];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_gimbal_2fgimbal_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_gimbal_2fgimbal_2eproto = nullptr;
const ::uint32_t TableStruct_gimbal_2fgimbal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesRequest, _impl_.roll_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesRequest, _impl_.pitch_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesRequest, _impl_.yaw_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetAnglesResponse, _impl_.gimbal_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawRequest, _impl_.pitch_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawRequest, _impl_.yaw_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawResponse, _impl_.gimbal_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest, _impl_.pitch_rate_deg_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest, _impl_.yaw_rate_deg_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse, _impl_.gimbal_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeRequest, _impl_.gimbal_mode_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeResponse, _impl_.gimbal_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, _impl_.latitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, _impl_.longitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, _impl_.altitude_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationResponse, _impl_.gimbal_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlRequest, _impl_.control_mode_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlResponse, _impl_.gimbal_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ReleaseControlRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ReleaseControlResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ReleaseControlResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ReleaseControlResponse, _impl_.gimbal_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SubscribeControlRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlResponse, _impl_.control_status_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Quaternion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Quaternion, _impl_.w_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Quaternion, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Quaternion, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Quaternion, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::EulerAngle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::EulerAngle, _impl_.roll_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::EulerAngle, _impl_.pitch_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::EulerAngle, _impl_.yaw_deg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AngularVelocityBody, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AngularVelocityBody, _impl_.roll_rad_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AngularVelocityBody, _impl_.pitch_rad_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AngularVelocityBody, _impl_.yaw_rad_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.euler_angle_forward_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.quaternion_forward_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.euler_angle_north_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.quaternion_north_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.angular_velocity_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::Attitude, _impl_.timestamp_us_),
    0,
    1,
    2,
    3,
    4,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SubscribeAttitudeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AttitudeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AttitudeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::AttitudeResponse, _impl_.attitude_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _impl_.control_mode_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _impl_.sysid_primary_control_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _impl_.compid_primary_control_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _impl_.sysid_secondary_control_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _impl_.compid_secondary_control_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, _impl_.result_str_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::mavsdk::rpc::gimbal::SetAnglesRequest)},
        {11, 20, -1, sizeof(::mavsdk::rpc::gimbal::SetAnglesResponse)},
        {21, -1, -1, sizeof(::mavsdk::rpc::gimbal::SetPitchAndYawRequest)},
        {31, 40, -1, sizeof(::mavsdk::rpc::gimbal::SetPitchAndYawResponse)},
        {41, -1, -1, sizeof(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest)},
        {51, 60, -1, sizeof(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse)},
        {61, -1, -1, sizeof(::mavsdk::rpc::gimbal::SetModeRequest)},
        {70, 79, -1, sizeof(::mavsdk::rpc::gimbal::SetModeResponse)},
        {80, -1, -1, sizeof(::mavsdk::rpc::gimbal::SetRoiLocationRequest)},
        {91, 100, -1, sizeof(::mavsdk::rpc::gimbal::SetRoiLocationResponse)},
        {101, -1, -1, sizeof(::mavsdk::rpc::gimbal::TakeControlRequest)},
        {110, 119, -1, sizeof(::mavsdk::rpc::gimbal::TakeControlResponse)},
        {120, -1, -1, sizeof(::mavsdk::rpc::gimbal::ReleaseControlRequest)},
        {128, 137, -1, sizeof(::mavsdk::rpc::gimbal::ReleaseControlResponse)},
        {138, -1, -1, sizeof(::mavsdk::rpc::gimbal::SubscribeControlRequest)},
        {146, 155, -1, sizeof(::mavsdk::rpc::gimbal::ControlResponse)},
        {156, -1, -1, sizeof(::mavsdk::rpc::gimbal::Quaternion)},
        {168, -1, -1, sizeof(::mavsdk::rpc::gimbal::EulerAngle)},
        {179, -1, -1, sizeof(::mavsdk::rpc::gimbal::AngularVelocityBody)},
        {190, 204, -1, sizeof(::mavsdk::rpc::gimbal::Attitude)},
        {210, -1, -1, sizeof(::mavsdk::rpc::gimbal::SubscribeAttitudeRequest)},
        {218, 227, -1, sizeof(::mavsdk::rpc::gimbal::AttitudeResponse)},
        {228, -1, -1, sizeof(::mavsdk::rpc::gimbal::ControlStatus)},
        {241, -1, -1, sizeof(::mavsdk::rpc::gimbal::GimbalResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mavsdk::rpc::gimbal::_SetAnglesRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_SetAnglesResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_SetPitchAndYawRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_SetPitchAndYawResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_SetPitchRateAndYawRateRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_SetPitchRateAndYawRateResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_SetModeRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_SetModeResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_SetRoiLocationRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_SetRoiLocationResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_TakeControlRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_TakeControlResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_ReleaseControlRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_ReleaseControlResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_SubscribeControlRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_ControlResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_Quaternion_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_EulerAngle_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_AngularVelocityBody_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_Attitude_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_SubscribeAttitudeRequest_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_AttitudeResponse_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_ControlStatus_default_instance_._instance,
    &::mavsdk::rpc::gimbal::_GimbalResult_default_instance_._instance,
};
const char descriptor_table_protodef_gimbal_2fgimbal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023gimbal/gimbal.proto\022\021mavsdk.rpc.gimbal"
    "\032\024mavsdk_options.proto\"H\n\020SetAnglesReque"
    "st\022\020\n\010roll_deg\030\001 \001(\002\022\021\n\tpitch_deg\030\002 \001(\002\022"
    "\017\n\007yaw_deg\030\003 \001(\002\"K\n\021SetAnglesResponse\0226\n"
    "\rgimbal_result\030\001 \001(\0132\037.mavsdk.rpc.gimbal"
    ".GimbalResult\";\n\025SetPitchAndYawRequest\022\021"
    "\n\tpitch_deg\030\001 \001(\002\022\017\n\007yaw_deg\030\002 \001(\002\"P\n\026Se"
    "tPitchAndYawResponse\0226\n\rgimbal_result\030\001 "
    "\001(\0132\037.mavsdk.rpc.gimbal.GimbalResult\"Q\n\035"
    "SetPitchRateAndYawRateRequest\022\030\n\020pitch_r"
    "ate_deg_s\030\001 \001(\002\022\026\n\016yaw_rate_deg_s\030\002 \001(\002\""
    "X\n\036SetPitchRateAndYawRateResponse\0226\n\rgim"
    "bal_result\030\001 \001(\0132\037.mavsdk.rpc.gimbal.Gim"
    "balResult\"D\n\016SetModeRequest\0222\n\013gimbal_mo"
    "de\030\001 \001(\0162\035.mavsdk.rpc.gimbal.GimbalMode\""
    "I\n\017SetModeResponse\0226\n\rgimbal_result\030\001 \001("
    "\0132\037.mavsdk.rpc.gimbal.GimbalResult\"X\n\025Se"
    "tRoiLocationRequest\022\024\n\014latitude_deg\030\001 \001("
    "\001\022\025\n\rlongitude_deg\030\002 \001(\001\022\022\n\naltitude_m\030\003"
    " \001(\002\"P\n\026SetRoiLocationResponse\0226\n\rgimbal"
    "_result\030\001 \001(\0132\037.mavsdk.rpc.gimbal.Gimbal"
    "Result\"J\n\022TakeControlRequest\0224\n\014control_"
    "mode\030\001 \001(\0162\036.mavsdk.rpc.gimbal.ControlMo"
    "de\"M\n\023TakeControlResponse\0226\n\rgimbal_resu"
    "lt\030\001 \001(\0132\037.mavsdk.rpc.gimbal.GimbalResul"
    "t\"\027\n\025ReleaseControlRequest\"P\n\026ReleaseCon"
    "trolResponse\0226\n\rgimbal_result\030\001 \001(\0132\037.ma"
    "vsdk.rpc.gimbal.GimbalResult\"\031\n\027Subscrib"
    "eControlRequest\"K\n\017ControlResponse\0228\n\016co"
    "ntrol_status\030\001 \001(\0132 .mavsdk.rpc.gimbal.C"
    "ontrolStatus\"\\\n\nQuaternion\022\022\n\001w\030\001 \001(\002B\007\202"
    "\265\030\003NaN\022\022\n\001x\030\002 \001(\002B\007\202\265\030\003NaN\022\022\n\001y\030\003 \001(\002B\007\202"
    "\265\030\003NaN\022\022\n\001z\030\004 \001(\002B\007\202\265\030\003NaN\"]\n\nEulerAngle"
    "\022\031\n\010roll_deg\030\001 \001(\002B\007\202\265\030\003NaN\022\032\n\tpitch_deg"
    "\030\002 \001(\002B\007\202\265\030\003NaN\022\030\n\007yaw_deg\030\003 \001(\002B\007\202\265\030\003Na"
    "N\"l\n\023AngularVelocityBody\022\033\n\nroll_rad_s\030\001"
    " \001(\002B\007\202\265\030\003NaN\022\034\n\013pitch_rad_s\030\002 \001(\002B\007\202\265\030\003"
    "NaN\022\032\n\tyaw_rad_s\030\003 \001(\002B\007\202\265\030\003NaN\"\314\002\n\010Atti"
    "tude\022:\n\023euler_angle_forward\030\001 \001(\0132\035.mavs"
    "dk.rpc.gimbal.EulerAngle\0229\n\022quaternion_f"
    "orward\030\002 \001(\0132\035.mavsdk.rpc.gimbal.Quatern"
    "ion\0228\n\021euler_angle_north\030\003 \001(\0132\035.mavsdk."
    "rpc.gimbal.EulerAngle\0227\n\020quaternion_nort"
    "h\030\004 \001(\0132\035.mavsdk.rpc.gimbal.Quaternion\022@"
    "\n\020angular_velocity\030\005 \001(\0132&.mavsdk.rpc.gi"
    "mbal.AngularVelocityBody\022\024\n\014timestamp_us"
    "\030\006 \001(\004\"\032\n\030SubscribeAttitudeRequest\"A\n\020At"
    "titudeResponse\022-\n\010attitude\030\001 \001(\0132\033.mavsd"
    "k.rpc.gimbal.Attitude\"\307\001\n\rControlStatus\022"
    "4\n\014control_mode\030\001 \001(\0162\036.mavsdk.rpc.gimba"
    "l.ControlMode\022\035\n\025sysid_primary_control\030\002"
    " \001(\005\022\036\n\026compid_primary_control\030\003 \001(\005\022\037\n\027"
    "sysid_secondary_control\030\004 \001(\005\022 \n\030compid_"
    "secondary_control\030\005 \001(\005\"\341\001\n\014GimbalResult"
    "\0226\n\006result\030\001 \001(\0162&.mavsdk.rpc.gimbal.Gim"
    "balResult.Result\022\022\n\nresult_str\030\002 \001(\t\"\204\001\n"
    "\006Result\022\022\n\016RESULT_UNKNOWN\020\000\022\022\n\016RESULT_SU"
    "CCESS\020\001\022\020\n\014RESULT_ERROR\020\002\022\022\n\016RESULT_TIME"
    "OUT\020\003\022\026\n\022RESULT_UNSUPPORTED\020\004\022\024\n\020RESULT_"
    "NO_SYSTEM\020\005*B\n\nGimbalMode\022\032\n\026GIMBAL_MODE"
    "_YAW_FOLLOW\020\000\022\030\n\024GIMBAL_MODE_YAW_LOCK\020\001*"
    "Z\n\013ControlMode\022\025\n\021CONTROL_MODE_NONE\020\000\022\030\n"
    "\024CONTROL_MODE_PRIMARY\020\001\022\032\n\026CONTROL_MODE_"
    "SECONDARY\020\0022\254\007\n\rGimbalService\022X\n\tSetAngl"
    "es\022#.mavsdk.rpc.gimbal.SetAnglesRequest\032"
    "$.mavsdk.rpc.gimbal.SetAnglesResponse\"\000\022"
    "g\n\016SetPitchAndYaw\022(.mavsdk.rpc.gimbal.Se"
    "tPitchAndYawRequest\032).mavsdk.rpc.gimbal."
    "SetPitchAndYawResponse\"\000\022\177\n\026SetPitchRate"
    "AndYawRate\0220.mavsdk.rpc.gimbal.SetPitchR"
    "ateAndYawRateRequest\0321.mavsdk.rpc.gimbal"
    ".SetPitchRateAndYawRateResponse\"\000\022R\n\007Set"
    "Mode\022!.mavsdk.rpc.gimbal.SetModeRequest\032"
    "\".mavsdk.rpc.gimbal.SetModeResponse\"\000\022g\n"
    "\016SetRoiLocation\022(.mavsdk.rpc.gimbal.SetR"
    "oiLocationRequest\032).mavsdk.rpc.gimbal.Se"
    "tRoiLocationResponse\"\000\022^\n\013TakeControl\022%."
    "mavsdk.rpc.gimbal.TakeControlRequest\032&.m"
    "avsdk.rpc.gimbal.TakeControlResponse\"\000\022g"
    "\n\016ReleaseControl\022(.mavsdk.rpc.gimbal.Rel"
    "easeControlRequest\032).mavsdk.rpc.gimbal.R"
    "eleaseControlResponse\"\000\022f\n\020SubscribeCont"
    "rol\022*.mavsdk.rpc.gimbal.SubscribeControl"
    "Request\032\".mavsdk.rpc.gimbal.ControlRespo"
    "nse\"\0000\001\022i\n\021SubscribeAttitude\022+.mavsdk.rp"
    "c.gimbal.SubscribeAttitudeRequest\032#.mavs"
    "dk.rpc.gimbal.AttitudeResponse\"\0000\001B\037\n\020io"
    ".mavsdk.gimbalB\013GimbalProtob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_gimbal_2fgimbal_2eproto_deps[1] =
    {
        &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::absl::once_flag descriptor_table_gimbal_2fgimbal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gimbal_2fgimbal_2eproto = {
    false,
    false,
    3515,
    descriptor_table_protodef_gimbal_2fgimbal_2eproto,
    "gimbal/gimbal.proto",
    &descriptor_table_gimbal_2fgimbal_2eproto_once,
    descriptor_table_gimbal_2fgimbal_2eproto_deps,
    1,
    24,
    schemas,
    file_default_instances,
    TableStruct_gimbal_2fgimbal_2eproto::offsets,
    file_level_metadata_gimbal_2fgimbal_2eproto,
    file_level_enum_descriptors_gimbal_2fgimbal_2eproto,
    file_level_service_descriptors_gimbal_2fgimbal_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gimbal_2fgimbal_2eproto_getter() {
  return &descriptor_table_gimbal_2fgimbal_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gimbal_2fgimbal_2eproto(&descriptor_table_gimbal_2fgimbal_2eproto);
namespace mavsdk {
namespace rpc {
namespace gimbal {
const ::google::protobuf::EnumDescriptor* GimbalResult_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t GimbalResult_Result_internal_data_[] = {
    393216u, 0u, };
bool GimbalResult_Result_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GimbalResult_Result GimbalResult::RESULT_UNKNOWN;
constexpr GimbalResult_Result GimbalResult::RESULT_SUCCESS;
constexpr GimbalResult_Result GimbalResult::RESULT_ERROR;
constexpr GimbalResult_Result GimbalResult::RESULT_TIMEOUT;
constexpr GimbalResult_Result GimbalResult::RESULT_UNSUPPORTED;
constexpr GimbalResult_Result GimbalResult::RESULT_NO_SYSTEM;
constexpr GimbalResult_Result GimbalResult::Result_MIN;
constexpr GimbalResult_Result GimbalResult::Result_MAX;
constexpr int GimbalResult::Result_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* GimbalMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t GimbalMode_internal_data_[] = {
    131072u, 0u, };
bool GimbalMode_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* ControlMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t ControlMode_internal_data_[] = {
    196608u, 0u, };
bool ControlMode_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class SetAnglesRequest::_Internal {
 public:
};

SetAnglesRequest::SetAnglesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetAnglesRequest)
}
SetAnglesRequest::SetAnglesRequest(
    ::google::protobuf::Arena* arena, const SetAnglesRequest& from)
    : SetAnglesRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetAnglesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetAnglesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roll_deg_),
           0,
           offsetof(Impl_, yaw_deg_) -
               offsetof(Impl_, roll_deg_) +
               sizeof(Impl_::yaw_deg_));
}
SetAnglesRequest::~SetAnglesRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetAnglesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetAnglesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetAnglesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetAnglesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_deg_) -
      reinterpret_cast<char*>(&_impl_.roll_deg_)) + sizeof(_impl_.yaw_deg_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetAnglesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> SetAnglesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetAnglesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float roll_deg = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(SetAnglesRequest, _impl_.roll_deg_)}},
    // float pitch_deg = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(SetAnglesRequest, _impl_.pitch_deg_)}},
    // float yaw_deg = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(SetAnglesRequest, _impl_.yaw_deg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float roll_deg = 1;
    {PROTOBUF_FIELD_OFFSET(SetAnglesRequest, _impl_.roll_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_deg = 2;
    {PROTOBUF_FIELD_OFFSET(SetAnglesRequest, _impl_.pitch_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_deg = 3;
    {PROTOBUF_FIELD_OFFSET(SetAnglesRequest, _impl_.yaw_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetAnglesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetAnglesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float roll_deg = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_deg = this->_internal_roll_deg();
  ::uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_roll_deg(), target);
  }

  // float pitch_deg = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_yaw_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetAnglesRequest)
  return target;
}

::size_t SetAnglesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetAnglesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_deg = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_deg = this->_internal_roll_deg();
  ::uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    total_size += 5;
  }

  // float pitch_deg = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    total_size += 5;
  }

  // float yaw_deg = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetAnglesRequest::_class_data_ = {
    SetAnglesRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetAnglesRequest::GetClassData() const {
  return &_class_data_;
}

void SetAnglesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetAnglesRequest*>(&to_msg);
  auto& from = static_cast<const SetAnglesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetAnglesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_deg = from._internal_roll_deg();
  ::uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    _this->_internal_set_roll_deg(from._internal_roll_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = from._internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    _this->_internal_set_pitch_deg(from._internal_pitch_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = from._internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    _this->_internal_set_yaw_deg(from._internal_yaw_deg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetAnglesRequest::CopyFrom(const SetAnglesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetAnglesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetAnglesRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetAnglesRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetAnglesRequest::InternalSwap(SetAnglesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetAnglesRequest, _impl_.yaw_deg_)
      + sizeof(SetAnglesRequest::_impl_.yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(SetAnglesRequest, _impl_.roll_deg_)>(
          reinterpret_cast<char*>(&_impl_.roll_deg_),
          reinterpret_cast<char*>(&other->_impl_.roll_deg_));
}

::google::protobuf::Metadata SetAnglesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[0]);
}
// ===================================================================

class SetAnglesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetAnglesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetAnglesResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetAnglesResponse* msg);
  static void set_has_gimbal_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal::GimbalResult& SetAnglesResponse::_Internal::gimbal_result(const SetAnglesResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
SetAnglesResponse::SetAnglesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetAnglesResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetAnglesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetAnglesResponse::SetAnglesResponse(
    ::google::protobuf::Arena* arena,
    const SetAnglesResponse& from)
    : ::google::protobuf::Message(arena) {
  SetAnglesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.gimbal_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(arena, *from._impl_.gimbal_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetAnglesResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetAnglesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetAnglesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gimbal_result_ = {};
}
SetAnglesResponse::~SetAnglesResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetAnglesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetAnglesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.gimbal_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetAnglesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetAnglesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gimbal_result_ != nullptr);
    _impl_.gimbal_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetAnglesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetAnglesResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetAnglesResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetAnglesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetAnglesResponse, _impl_.gimbal_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetAnglesResponse, _impl_.gimbal_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::GimbalResult>()},
  }}, {{
  }},
};

::uint8_t* SetAnglesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetAnglesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetAnglesResponse)
  return target;
}

::size_t SetAnglesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetAnglesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetAnglesResponse::_class_data_ = {
    SetAnglesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetAnglesResponse::GetClassData() const {
  return &_class_data_;
}

void SetAnglesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetAnglesResponse*>(&to_msg);
  auto& from = static_cast<const SetAnglesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetAnglesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetAnglesResponse::CopyFrom(const SetAnglesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetAnglesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetAnglesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetAnglesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetAnglesResponse::InternalSwap(SetAnglesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::google::protobuf::Metadata SetAnglesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[1]);
}
// ===================================================================

class SetPitchAndYawRequest::_Internal {
 public:
};

SetPitchAndYawRequest::SetPitchAndYawRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
}
SetPitchAndYawRequest::SetPitchAndYawRequest(
    ::google::protobuf::Arena* arena, const SetPitchAndYawRequest& from)
    : SetPitchAndYawRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetPitchAndYawRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetPitchAndYawRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pitch_deg_),
           0,
           offsetof(Impl_, yaw_deg_) -
               offsetof(Impl_, pitch_deg_) +
               sizeof(Impl_::yaw_deg_));
}
SetPitchAndYawRequest::~SetPitchAndYawRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetPitchAndYawRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetPitchAndYawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pitch_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_deg_) -
      reinterpret_cast<char*>(&_impl_.pitch_deg_)) + sizeof(_impl_.yaw_deg_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetPitchAndYawRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SetPitchAndYawRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetPitchAndYawRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float yaw_deg = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(SetPitchAndYawRequest, _impl_.yaw_deg_)}},
    // float pitch_deg = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(SetPitchAndYawRequest, _impl_.pitch_deg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float pitch_deg = 1;
    {PROTOBUF_FIELD_OFFSET(SetPitchAndYawRequest, _impl_.pitch_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_deg = 2;
    {PROTOBUF_FIELD_OFFSET(SetPitchAndYawRequest, _impl_.yaw_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetPitchAndYawRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float pitch_deg = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_yaw_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  return target;
}

::size_t SetPitchAndYawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pitch_deg = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    total_size += 5;
  }

  // float yaw_deg = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetPitchAndYawRequest::_class_data_ = {
    SetPitchAndYawRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetPitchAndYawRequest::GetClassData() const {
  return &_class_data_;
}

void SetPitchAndYawRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetPitchAndYawRequest*>(&to_msg);
  auto& from = static_cast<const SetPitchAndYawRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = from._internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    _this->_internal_set_pitch_deg(from._internal_pitch_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = from._internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    _this->_internal_set_yaw_deg(from._internal_yaw_deg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetPitchAndYawRequest::CopyFrom(const SetPitchAndYawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetPitchAndYawRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetPitchAndYawRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetPitchAndYawRequest::InternalSwap(SetPitchAndYawRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPitchAndYawRequest, _impl_.yaw_deg_)
      + sizeof(SetPitchAndYawRequest::_impl_.yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(SetPitchAndYawRequest, _impl_.pitch_deg_)>(
          reinterpret_cast<char*>(&_impl_.pitch_deg_),
          reinterpret_cast<char*>(&other->_impl_.pitch_deg_));
}

::google::protobuf::Metadata SetPitchAndYawRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[2]);
}
// ===================================================================

class SetPitchAndYawResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetPitchAndYawResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetPitchAndYawResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetPitchAndYawResponse* msg);
  static void set_has_gimbal_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal::GimbalResult& SetPitchAndYawResponse::_Internal::gimbal_result(const SetPitchAndYawResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
SetPitchAndYawResponse::SetPitchAndYawResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetPitchAndYawResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetPitchAndYawResponse::SetPitchAndYawResponse(
    ::google::protobuf::Arena* arena,
    const SetPitchAndYawResponse& from)
    : ::google::protobuf::Message(arena) {
  SetPitchAndYawResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.gimbal_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(arena, *from._impl_.gimbal_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetPitchAndYawResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetPitchAndYawResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gimbal_result_ = {};
}
SetPitchAndYawResponse::~SetPitchAndYawResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetPitchAndYawResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.gimbal_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetPitchAndYawResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gimbal_result_ != nullptr);
    _impl_.gimbal_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetPitchAndYawResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetPitchAndYawResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetPitchAndYawResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetPitchAndYawResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetPitchAndYawResponse, _impl_.gimbal_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetPitchAndYawResponse, _impl_.gimbal_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::GimbalResult>()},
  }}, {{
  }},
};

::uint8_t* SetPitchAndYawResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  return target;
}

::size_t SetPitchAndYawResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetPitchAndYawResponse::_class_data_ = {
    SetPitchAndYawResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetPitchAndYawResponse::GetClassData() const {
  return &_class_data_;
}

void SetPitchAndYawResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetPitchAndYawResponse*>(&to_msg);
  auto& from = static_cast<const SetPitchAndYawResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetPitchAndYawResponse::CopyFrom(const SetPitchAndYawResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetPitchAndYawResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetPitchAndYawResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetPitchAndYawResponse::InternalSwap(SetPitchAndYawResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::google::protobuf::Metadata SetPitchAndYawResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[3]);
}
// ===================================================================

class SetPitchRateAndYawRateRequest::_Internal {
 public:
};

SetPitchRateAndYawRateRequest::SetPitchRateAndYawRateRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
}
SetPitchRateAndYawRateRequest::SetPitchRateAndYawRateRequest(
    ::google::protobuf::Arena* arena, const SetPitchRateAndYawRateRequest& from)
    : SetPitchRateAndYawRateRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetPitchRateAndYawRateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetPitchRateAndYawRateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pitch_rate_deg_s_),
           0,
           offsetof(Impl_, yaw_rate_deg_s_) -
               offsetof(Impl_, pitch_rate_deg_s_) +
               sizeof(Impl_::yaw_rate_deg_s_));
}
SetPitchRateAndYawRateRequest::~SetPitchRateAndYawRateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetPitchRateAndYawRateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetPitchRateAndYawRateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pitch_rate_deg_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_rate_deg_s_) -
      reinterpret_cast<char*>(&_impl_.pitch_rate_deg_s_)) + sizeof(_impl_.yaw_rate_deg_s_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetPitchRateAndYawRateRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SetPitchRateAndYawRateRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetPitchRateAndYawRateRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float yaw_rate_deg_s = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateRequest, _impl_.yaw_rate_deg_s_)}},
    // float pitch_rate_deg_s = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateRequest, _impl_.pitch_rate_deg_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float pitch_rate_deg_s = 1;
    {PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateRequest, _impl_.pitch_rate_deg_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_rate_deg_s = 2;
    {PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateRequest, _impl_.yaw_rate_deg_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetPitchRateAndYawRateRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float pitch_rate_deg_s = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rate_deg_s = this->_internal_pitch_rate_deg_s();
  ::uint32_t raw_pitch_rate_deg_s;
  memcpy(&raw_pitch_rate_deg_s, &tmp_pitch_rate_deg_s, sizeof(tmp_pitch_rate_deg_s));
  if (raw_pitch_rate_deg_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_pitch_rate_deg_s(), target);
  }

  // float yaw_rate_deg_s = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rate_deg_s = this->_internal_yaw_rate_deg_s();
  ::uint32_t raw_yaw_rate_deg_s;
  memcpy(&raw_yaw_rate_deg_s, &tmp_yaw_rate_deg_s, sizeof(tmp_yaw_rate_deg_s));
  if (raw_yaw_rate_deg_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_yaw_rate_deg_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  return target;
}

::size_t SetPitchRateAndYawRateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pitch_rate_deg_s = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rate_deg_s = this->_internal_pitch_rate_deg_s();
  ::uint32_t raw_pitch_rate_deg_s;
  memcpy(&raw_pitch_rate_deg_s, &tmp_pitch_rate_deg_s, sizeof(tmp_pitch_rate_deg_s));
  if (raw_pitch_rate_deg_s != 0) {
    total_size += 5;
  }

  // float yaw_rate_deg_s = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rate_deg_s = this->_internal_yaw_rate_deg_s();
  ::uint32_t raw_yaw_rate_deg_s;
  memcpy(&raw_yaw_rate_deg_s, &tmp_yaw_rate_deg_s, sizeof(tmp_yaw_rate_deg_s));
  if (raw_yaw_rate_deg_s != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetPitchRateAndYawRateRequest::_class_data_ = {
    SetPitchRateAndYawRateRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetPitchRateAndYawRateRequest::GetClassData() const {
  return &_class_data_;
}

void SetPitchRateAndYawRateRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetPitchRateAndYawRateRequest*>(&to_msg);
  auto& from = static_cast<const SetPitchRateAndYawRateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rate_deg_s = from._internal_pitch_rate_deg_s();
  ::uint32_t raw_pitch_rate_deg_s;
  memcpy(&raw_pitch_rate_deg_s, &tmp_pitch_rate_deg_s, sizeof(tmp_pitch_rate_deg_s));
  if (raw_pitch_rate_deg_s != 0) {
    _this->_internal_set_pitch_rate_deg_s(from._internal_pitch_rate_deg_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rate_deg_s = from._internal_yaw_rate_deg_s();
  ::uint32_t raw_yaw_rate_deg_s;
  memcpy(&raw_yaw_rate_deg_s, &tmp_yaw_rate_deg_s, sizeof(tmp_yaw_rate_deg_s));
  if (raw_yaw_rate_deg_s != 0) {
    _this->_internal_set_yaw_rate_deg_s(from._internal_yaw_rate_deg_s());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetPitchRateAndYawRateRequest::CopyFrom(const SetPitchRateAndYawRateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetPitchRateAndYawRateRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetPitchRateAndYawRateRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetPitchRateAndYawRateRequest::InternalSwap(SetPitchRateAndYawRateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateRequest, _impl_.yaw_rate_deg_s_)
      + sizeof(SetPitchRateAndYawRateRequest::_impl_.yaw_rate_deg_s_)
      - PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateRequest, _impl_.pitch_rate_deg_s_)>(
          reinterpret_cast<char*>(&_impl_.pitch_rate_deg_s_),
          reinterpret_cast<char*>(&other->_impl_.pitch_rate_deg_s_));
}

::google::protobuf::Metadata SetPitchRateAndYawRateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[4]);
}
// ===================================================================

class SetPitchRateAndYawRateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetPitchRateAndYawRateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetPitchRateAndYawRateResponse* msg);
  static void set_has_gimbal_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal::GimbalResult& SetPitchRateAndYawRateResponse::_Internal::gimbal_result(const SetPitchRateAndYawRateResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
SetPitchRateAndYawRateResponse::SetPitchRateAndYawRateResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetPitchRateAndYawRateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetPitchRateAndYawRateResponse::SetPitchRateAndYawRateResponse(
    ::google::protobuf::Arena* arena,
    const SetPitchRateAndYawRateResponse& from)
    : ::google::protobuf::Message(arena) {
  SetPitchRateAndYawRateResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.gimbal_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(arena, *from._impl_.gimbal_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetPitchRateAndYawRateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetPitchRateAndYawRateResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gimbal_result_ = {};
}
SetPitchRateAndYawRateResponse::~SetPitchRateAndYawRateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetPitchRateAndYawRateResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.gimbal_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetPitchRateAndYawRateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gimbal_result_ != nullptr);
    _impl_.gimbal_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetPitchRateAndYawRateResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetPitchRateAndYawRateResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetPitchRateAndYawRateResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateResponse, _impl_.gimbal_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateResponse, _impl_.gimbal_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::GimbalResult>()},
  }}, {{
  }},
};

::uint8_t* SetPitchRateAndYawRateResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  return target;
}

::size_t SetPitchRateAndYawRateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetPitchRateAndYawRateResponse::_class_data_ = {
    SetPitchRateAndYawRateResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetPitchRateAndYawRateResponse::GetClassData() const {
  return &_class_data_;
}

void SetPitchRateAndYawRateResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetPitchRateAndYawRateResponse*>(&to_msg);
  auto& from = static_cast<const SetPitchRateAndYawRateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetPitchRateAndYawRateResponse::CopyFrom(const SetPitchRateAndYawRateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetPitchRateAndYawRateResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetPitchRateAndYawRateResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetPitchRateAndYawRateResponse::InternalSwap(SetPitchRateAndYawRateResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::google::protobuf::Metadata SetPitchRateAndYawRateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[5]);
}
// ===================================================================

class SetModeRequest::_Internal {
 public:
};

SetModeRequest::SetModeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetModeRequest)
}
SetModeRequest::SetModeRequest(
    ::google::protobuf::Arena* arena, const SetModeRequest& from)
    : SetModeRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetModeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetModeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gimbal_mode_ = {};
}
SetModeRequest::~SetModeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetModeRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetModeRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetModeRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gimbal_mode_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetModeRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetModeRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetModeRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SetModeRequest, _impl_.gimbal_mode_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SetModeRequest, _impl_.gimbal_mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
    {PROTOBUF_FIELD_OFFSET(SetModeRequest, _impl_.gimbal_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetModeRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetModeRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
  if (this->_internal_gimbal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_gimbal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetModeRequest)
  return target;
}

::size_t SetModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetModeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
  if (this->_internal_gimbal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_gimbal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetModeRequest::_class_data_ = {
    SetModeRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetModeRequest::GetClassData() const {
  return &_class_data_;
}

void SetModeRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetModeRequest*>(&to_msg);
  auto& from = static_cast<const SetModeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetModeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gimbal_mode() != 0) {
    _this->_internal_set_gimbal_mode(from._internal_gimbal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetModeRequest::CopyFrom(const SetModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetModeRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetModeRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetModeRequest::InternalSwap(SetModeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gimbal_mode_, other->_impl_.gimbal_mode_);
}

::google::protobuf::Metadata SetModeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[6]);
}
// ===================================================================

class SetModeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetModeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetModeResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetModeResponse* msg);
  static void set_has_gimbal_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal::GimbalResult& SetModeResponse::_Internal::gimbal_result(const SetModeResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
SetModeResponse::SetModeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetModeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetModeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetModeResponse::SetModeResponse(
    ::google::protobuf::Arena* arena,
    const SetModeResponse& from)
    : ::google::protobuf::Message(arena) {
  SetModeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.gimbal_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(arena, *from._impl_.gimbal_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetModeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetModeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetModeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gimbal_result_ = {};
}
SetModeResponse::~SetModeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetModeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetModeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.gimbal_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetModeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gimbal_result_ != nullptr);
    _impl_.gimbal_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetModeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetModeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetModeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetModeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetModeResponse, _impl_.gimbal_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetModeResponse, _impl_.gimbal_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::GimbalResult>()},
  }}, {{
  }},
};

::uint8_t* SetModeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetModeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetModeResponse)
  return target;
}

::size_t SetModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetModeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetModeResponse::_class_data_ = {
    SetModeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetModeResponse::GetClassData() const {
  return &_class_data_;
}

void SetModeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetModeResponse*>(&to_msg);
  auto& from = static_cast<const SetModeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetModeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetModeResponse::CopyFrom(const SetModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetModeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetModeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetModeResponse::InternalSwap(SetModeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::google::protobuf::Metadata SetModeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[7]);
}
// ===================================================================

class SetRoiLocationRequest::_Internal {
 public:
};

SetRoiLocationRequest::SetRoiLocationRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetRoiLocationRequest)
}
SetRoiLocationRequest::SetRoiLocationRequest(
    ::google::protobuf::Arena* arena, const SetRoiLocationRequest& from)
    : SetRoiLocationRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRoiLocationRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRoiLocationRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_deg_),
           0,
           offsetof(Impl_, altitude_m_) -
               offsetof(Impl_, latitude_deg_) +
               sizeof(Impl_::altitude_m_));
}
SetRoiLocationRequest::~SetRoiLocationRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRoiLocationRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRoiLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.altitude_m_) -
      reinterpret_cast<char*>(&_impl_.latitude_deg_)) + sizeof(_impl_.altitude_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRoiLocationRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> SetRoiLocationRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRoiLocationRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double latitude_deg = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, _impl_.latitude_deg_)}},
    // double longitude_deg = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, _impl_.longitude_deg_)}},
    // float altitude_m = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, _impl_.altitude_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double latitude_deg = 1;
    {PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, _impl_.latitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude_deg = 2;
    {PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, _impl_.longitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float altitude_m = 3;
    {PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, _impl_.altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRoiLocationRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double latitude_deg = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_longitude_deg(), target);
  }

  // float altitude_m = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_m = this->_internal_altitude_m();
  ::uint32_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  return target;
}

::size_t SetRoiLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    total_size += 9;
  }

  // double longitude_deg = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    total_size += 9;
  }

  // float altitude_m = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_m = this->_internal_altitude_m();
  ::uint32_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRoiLocationRequest::_class_data_ = {
    SetRoiLocationRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRoiLocationRequest::GetClassData() const {
  return &_class_data_;
}

void SetRoiLocationRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRoiLocationRequest*>(&to_msg);
  auto& from = static_cast<const SetRoiLocationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = from._internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    _this->_internal_set_latitude_deg(from._internal_latitude_deg());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = from._internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    _this->_internal_set_longitude_deg(from._internal_longitude_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_m = from._internal_altitude_m();
  ::uint32_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    _this->_internal_set_altitude_m(from._internal_altitude_m());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRoiLocationRequest::CopyFrom(const SetRoiLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRoiLocationRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRoiLocationRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRoiLocationRequest::InternalSwap(SetRoiLocationRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, _impl_.altitude_m_)
      + sizeof(SetRoiLocationRequest::_impl_.altitude_m_)
      - PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, _impl_.latitude_deg_)>(
          reinterpret_cast<char*>(&_impl_.latitude_deg_),
          reinterpret_cast<char*>(&other->_impl_.latitude_deg_));
}

::google::protobuf::Metadata SetRoiLocationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[8]);
}
// ===================================================================

class SetRoiLocationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRoiLocationResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRoiLocationResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetRoiLocationResponse* msg);
  static void set_has_gimbal_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal::GimbalResult& SetRoiLocationResponse::_Internal::gimbal_result(const SetRoiLocationResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
SetRoiLocationResponse::SetRoiLocationResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetRoiLocationResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRoiLocationResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRoiLocationResponse::SetRoiLocationResponse(
    ::google::protobuf::Arena* arena,
    const SetRoiLocationResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRoiLocationResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.gimbal_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(arena, *from._impl_.gimbal_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetRoiLocationResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRoiLocationResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRoiLocationResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gimbal_result_ = {};
}
SetRoiLocationResponse::~SetRoiLocationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRoiLocationResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.gimbal_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRoiLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gimbal_result_ != nullptr);
    _impl_.gimbal_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRoiLocationResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRoiLocationResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRoiLocationResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRoiLocationResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRoiLocationResponse, _impl_.gimbal_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRoiLocationResponse, _impl_.gimbal_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::GimbalResult>()},
  }}, {{
  }},
};

::uint8_t* SetRoiLocationResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  return target;
}

::size_t SetRoiLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRoiLocationResponse::_class_data_ = {
    SetRoiLocationResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRoiLocationResponse::GetClassData() const {
  return &_class_data_;
}

void SetRoiLocationResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRoiLocationResponse*>(&to_msg);
  auto& from = static_cast<const SetRoiLocationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRoiLocationResponse::CopyFrom(const SetRoiLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRoiLocationResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRoiLocationResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRoiLocationResponse::InternalSwap(SetRoiLocationResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::google::protobuf::Metadata SetRoiLocationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[9]);
}
// ===================================================================

class TakeControlRequest::_Internal {
 public:
};

TakeControlRequest::TakeControlRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.TakeControlRequest)
}
TakeControlRequest::TakeControlRequest(
    ::google::protobuf::Arena* arena, const TakeControlRequest& from)
    : TakeControlRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TakeControlRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TakeControlRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.control_mode_ = {};
}
TakeControlRequest::~TakeControlRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.TakeControlRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TakeControlRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TakeControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.TakeControlRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.control_mode_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TakeControlRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> TakeControlRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TakeControlRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TakeControlRequest, _impl_.control_mode_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TakeControlRequest, _impl_.control_mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
    {PROTOBUF_FIELD_OFFSET(TakeControlRequest, _impl_.control_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TakeControlRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.TakeControlRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
  if (this->_internal_control_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_control_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.TakeControlRequest)
  return target;
}

::size_t TakeControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.TakeControlRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
  if (this->_internal_control_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_control_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TakeControlRequest::_class_data_ = {
    TakeControlRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TakeControlRequest::GetClassData() const {
  return &_class_data_;
}

void TakeControlRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TakeControlRequest*>(&to_msg);
  auto& from = static_cast<const TakeControlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.TakeControlRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_control_mode() != 0) {
    _this->_internal_set_control_mode(from._internal_control_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TakeControlRequest::CopyFrom(const TakeControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.TakeControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TakeControlRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TakeControlRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TakeControlRequest::InternalSwap(TakeControlRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.control_mode_, other->_impl_.control_mode_);
}

::google::protobuf::Metadata TakeControlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[10]);
}
// ===================================================================

class TakeControlResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TakeControlResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TakeControlResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const TakeControlResponse* msg);
  static void set_has_gimbal_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal::GimbalResult& TakeControlResponse::_Internal::gimbal_result(const TakeControlResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
TakeControlResponse::TakeControlResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.TakeControlResponse)
}
inline PROTOBUF_NDEBUG_INLINE TakeControlResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TakeControlResponse::TakeControlResponse(
    ::google::protobuf::Arena* arena,
    const TakeControlResponse& from)
    : ::google::protobuf::Message(arena) {
  TakeControlResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.gimbal_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(arena, *from._impl_.gimbal_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.TakeControlResponse)
}
inline PROTOBUF_NDEBUG_INLINE TakeControlResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TakeControlResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gimbal_result_ = {};
}
TakeControlResponse::~TakeControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.TakeControlResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TakeControlResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.gimbal_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TakeControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.TakeControlResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gimbal_result_ != nullptr);
    _impl_.gimbal_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TakeControlResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TakeControlResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TakeControlResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TakeControlResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TakeControlResponse, _impl_.gimbal_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {PROTOBUF_FIELD_OFFSET(TakeControlResponse, _impl_.gimbal_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::GimbalResult>()},
  }}, {{
  }},
};

::uint8_t* TakeControlResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.TakeControlResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.TakeControlResponse)
  return target;
}

::size_t TakeControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.TakeControlResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TakeControlResponse::_class_data_ = {
    TakeControlResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TakeControlResponse::GetClassData() const {
  return &_class_data_;
}

void TakeControlResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TakeControlResponse*>(&to_msg);
  auto& from = static_cast<const TakeControlResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.TakeControlResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TakeControlResponse::CopyFrom(const TakeControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.TakeControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TakeControlResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TakeControlResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TakeControlResponse::InternalSwap(TakeControlResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::google::protobuf::Metadata TakeControlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[11]);
}
// ===================================================================

class ReleaseControlRequest::_Internal {
 public:
};

ReleaseControlRequest::ReleaseControlRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ReleaseControlRequest)
}
ReleaseControlRequest::ReleaseControlRequest(
    ::google::protobuf::Arena* arena,
    const ReleaseControlRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  ReleaseControlRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.ReleaseControlRequest)
}









::google::protobuf::Metadata ReleaseControlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[12]);
}
// ===================================================================

class ReleaseControlResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseControlResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ReleaseControlResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const ReleaseControlResponse* msg);
  static void set_has_gimbal_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal::GimbalResult& ReleaseControlResponse::_Internal::gimbal_result(const ReleaseControlResponse* msg) {
  return *msg->_impl_.gimbal_result_;
}
ReleaseControlResponse::ReleaseControlResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ReleaseControlResponse)
}
inline PROTOBUF_NDEBUG_INLINE ReleaseControlResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ReleaseControlResponse::ReleaseControlResponse(
    ::google::protobuf::Arena* arena,
    const ReleaseControlResponse& from)
    : ::google::protobuf::Message(arena) {
  ReleaseControlResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.gimbal_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::GimbalResult>(arena, *from._impl_.gimbal_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.ReleaseControlResponse)
}
inline PROTOBUF_NDEBUG_INLINE ReleaseControlResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ReleaseControlResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gimbal_result_ = {};
}
ReleaseControlResponse::~ReleaseControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.ReleaseControlResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ReleaseControlResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.gimbal_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ReleaseControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gimbal_result_ != nullptr);
    _impl_.gimbal_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ReleaseControlResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ReleaseControlResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReleaseControlResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ReleaseControlResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ReleaseControlResponse, _impl_.gimbal_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
    {PROTOBUF_FIELD_OFFSET(ReleaseControlResponse, _impl_.gimbal_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::GimbalResult>()},
  }}, {{
  }},
};

::uint8_t* ReleaseControlResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::gimbal_result(this),
        _Internal::gimbal_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.ReleaseControlResponse)
  return target;
}

::size_t ReleaseControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gimbal_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ReleaseControlResponse::_class_data_ = {
    ReleaseControlResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ReleaseControlResponse::GetClassData() const {
  return &_class_data_;
}

void ReleaseControlResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ReleaseControlResponse*>(&to_msg);
  auto& from = static_cast<const ReleaseControlResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(
        from._internal_gimbal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReleaseControlResponse::CopyFrom(const ReleaseControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ReleaseControlResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ReleaseControlResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ReleaseControlResponse::InternalSwap(ReleaseControlResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gimbal_result_, other->_impl_.gimbal_result_);
}

::google::protobuf::Metadata ReleaseControlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[13]);
}
// ===================================================================

class SubscribeControlRequest::_Internal {
 public:
};

SubscribeControlRequest::SubscribeControlRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SubscribeControlRequest)
}
SubscribeControlRequest::SubscribeControlRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeControlRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeControlRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SubscribeControlRequest)
}









::google::protobuf::Metadata SubscribeControlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[14]);
}
// ===================================================================

class ControlResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControlResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal::ControlStatus& control_status(const ControlResponse* msg);
  static void set_has_control_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal::ControlStatus& ControlResponse::_Internal::control_status(const ControlResponse* msg) {
  return *msg->_impl_.control_status_;
}
ControlResponse::ControlResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ControlResponse)
}
inline PROTOBUF_NDEBUG_INLINE ControlResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ControlResponse::ControlResponse(
    ::google::protobuf::Arena* arena,
    const ControlResponse& from)
    : ::google::protobuf::Message(arena) {
  ControlResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.control_status_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::ControlStatus>(arena, *from._impl_.control_status_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.ControlResponse)
}
inline PROTOBUF_NDEBUG_INLINE ControlResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ControlResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.control_status_ = {};
}
ControlResponse::~ControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.ControlResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ControlResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.control_status_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.ControlResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.control_status_ != nullptr);
    _impl_.control_status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ControlResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ControlResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ControlResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ControlResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ControlResponse, _impl_.control_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
    {PROTOBUF_FIELD_OFFSET(ControlResponse, _impl_.control_status_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::ControlStatus>()},
  }}, {{
  }},
};

::uint8_t* ControlResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.ControlResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::control_status(this),
        _Internal::control_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.ControlResponse)
  return target;
}

::size_t ControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.ControlResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.control_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ControlResponse::_class_data_ = {
    ControlResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ControlResponse::GetClassData() const {
  return &_class_data_;
}

void ControlResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ControlResponse*>(&to_msg);
  auto& from = static_cast<const ControlResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.ControlResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_control_status()->::mavsdk::rpc::gimbal::ControlStatus::MergeFrom(
        from._internal_control_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ControlResponse::CopyFrom(const ControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.ControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ControlResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ControlResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ControlResponse::InternalSwap(ControlResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.control_status_, other->_impl_.control_status_);
}

::google::protobuf::Metadata ControlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[15]);
}
// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.Quaternion)
}
Quaternion::Quaternion(
    ::google::protobuf::Arena* arena, const Quaternion& from)
    : Quaternion(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Quaternion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Quaternion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, w_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, w_) +
               sizeof(Impl_::z_));
}
Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.Quaternion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Quaternion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.Quaternion)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.w_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Quaternion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Quaternion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_)}},
    // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)}},
    // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_)}},
    // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Quaternion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.Quaternion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_w(), target);
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_x(), target);
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_y(), target);
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.Quaternion)
  return target;
}

::size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.Quaternion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 5;
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Quaternion::_class_data_ = {
    Quaternion::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Quaternion::GetClassData() const {
  return &_class_data_;
}

void Quaternion::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.Quaternion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Quaternion::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Quaternion::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Quaternion::InternalSwap(Quaternion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_)
      + sizeof(Quaternion::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)>(
          reinterpret_cast<char*>(&_impl_.w_),
          reinterpret_cast<char*>(&other->_impl_.w_));
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[16]);
}
// ===================================================================

class EulerAngle::_Internal {
 public:
};

EulerAngle::EulerAngle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.EulerAngle)
}
EulerAngle::EulerAngle(
    ::google::protobuf::Arena* arena, const EulerAngle& from)
    : EulerAngle(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EulerAngle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EulerAngle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roll_deg_),
           0,
           offsetof(Impl_, yaw_deg_) -
               offsetof(Impl_, roll_deg_) +
               sizeof(Impl_::yaw_deg_));
}
EulerAngle::~EulerAngle() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.EulerAngle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EulerAngle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EulerAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.EulerAngle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_deg_) -
      reinterpret_cast<char*>(&_impl_.roll_deg_)) + sizeof(_impl_.yaw_deg_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EulerAngle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> EulerAngle::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EulerAngle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.roll_deg_)}},
    // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.pitch_deg_)}},
    // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.yaw_deg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.roll_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.pitch_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.yaw_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EulerAngle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.EulerAngle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_deg = this->_internal_roll_deg();
  ::uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_roll_deg(), target);
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_yaw_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.EulerAngle)
  return target;
}

::size_t EulerAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.EulerAngle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_deg = this->_internal_roll_deg();
  ::uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    total_size += 5;
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    total_size += 5;
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EulerAngle::_class_data_ = {
    EulerAngle::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EulerAngle::GetClassData() const {
  return &_class_data_;
}

void EulerAngle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EulerAngle*>(&to_msg);
  auto& from = static_cast<const EulerAngle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.EulerAngle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_deg = from._internal_roll_deg();
  ::uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    _this->_internal_set_roll_deg(from._internal_roll_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = from._internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    _this->_internal_set_pitch_deg(from._internal_pitch_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = from._internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    _this->_internal_set_yaw_deg(from._internal_yaw_deg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EulerAngle::CopyFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EulerAngle::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EulerAngle::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EulerAngle::InternalSwap(EulerAngle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.yaw_deg_)
      + sizeof(EulerAngle::_impl_.yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.roll_deg_)>(
          reinterpret_cast<char*>(&_impl_.roll_deg_),
          reinterpret_cast<char*>(&other->_impl_.roll_deg_));
}

::google::protobuf::Metadata EulerAngle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[17]);
}
// ===================================================================

class AngularVelocityBody::_Internal {
 public:
};

AngularVelocityBody::AngularVelocityBody(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.AngularVelocityBody)
}
AngularVelocityBody::AngularVelocityBody(
    ::google::protobuf::Arena* arena, const AngularVelocityBody& from)
    : AngularVelocityBody(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AngularVelocityBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AngularVelocityBody::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roll_rad_s_),
           0,
           offsetof(Impl_, yaw_rad_s_) -
               offsetof(Impl_, roll_rad_s_) +
               sizeof(Impl_::yaw_rad_s_));
}
AngularVelocityBody::~AngularVelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.AngularVelocityBody)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AngularVelocityBody::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AngularVelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.AngularVelocityBody)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_rad_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_rad_s_) -
      reinterpret_cast<char*>(&_impl_.roll_rad_s_)) + sizeof(_impl_.yaw_rad_s_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AngularVelocityBody::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> AngularVelocityBody::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AngularVelocityBody_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.roll_rad_s_)}},
    // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.pitch_rad_s_)}},
    // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.yaw_rad_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.roll_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.pitch_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.yaw_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AngularVelocityBody::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.AngularVelocityBody)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_rad_s = this->_internal_roll_rad_s();
  ::uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_roll_rad_s(), target);
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rad_s = this->_internal_pitch_rad_s();
  ::uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_pitch_rad_s(), target);
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rad_s = this->_internal_yaw_rad_s();
  ::uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_yaw_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.AngularVelocityBody)
  return target;
}

::size_t AngularVelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.AngularVelocityBody)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_rad_s = this->_internal_roll_rad_s();
  ::uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    total_size += 5;
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rad_s = this->_internal_pitch_rad_s();
  ::uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    total_size += 5;
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rad_s = this->_internal_yaw_rad_s();
  ::uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AngularVelocityBody::_class_data_ = {
    AngularVelocityBody::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AngularVelocityBody::GetClassData() const {
  return &_class_data_;
}

void AngularVelocityBody::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AngularVelocityBody*>(&to_msg);
  auto& from = static_cast<const AngularVelocityBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.AngularVelocityBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_rad_s = from._internal_roll_rad_s();
  ::uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    _this->_internal_set_roll_rad_s(from._internal_roll_rad_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rad_s = from._internal_pitch_rad_s();
  ::uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    _this->_internal_set_pitch_rad_s(from._internal_pitch_rad_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rad_s = from._internal_yaw_rad_s();
  ::uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    _this->_internal_set_yaw_rad_s(from._internal_yaw_rad_s());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AngularVelocityBody::CopyFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AngularVelocityBody::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AngularVelocityBody::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AngularVelocityBody::InternalSwap(AngularVelocityBody* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.yaw_rad_s_)
      + sizeof(AngularVelocityBody::_impl_.yaw_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.roll_rad_s_)>(
          reinterpret_cast<char*>(&_impl_.roll_rad_s_),
          reinterpret_cast<char*>(&other->_impl_.roll_rad_s_));
}

::google::protobuf::Metadata AngularVelocityBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[18]);
}
// ===================================================================

class Attitude::_Internal {
 public:
  using HasBits = decltype(std::declval<Attitude>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Attitude, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal::EulerAngle& euler_angle_forward(const Attitude* msg);
  static void set_has_euler_angle_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mavsdk::rpc::gimbal::Quaternion& quaternion_forward(const Attitude* msg);
  static void set_has_quaternion_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mavsdk::rpc::gimbal::EulerAngle& euler_angle_north(const Attitude* msg);
  static void set_has_euler_angle_north(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mavsdk::rpc::gimbal::Quaternion& quaternion_north(const Attitude* msg);
  static void set_has_quaternion_north(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mavsdk::rpc::gimbal::AngularVelocityBody& angular_velocity(const Attitude* msg);
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::mavsdk::rpc::gimbal::EulerAngle& Attitude::_Internal::euler_angle_forward(const Attitude* msg) {
  return *msg->_impl_.euler_angle_forward_;
}
const ::mavsdk::rpc::gimbal::Quaternion& Attitude::_Internal::quaternion_forward(const Attitude* msg) {
  return *msg->_impl_.quaternion_forward_;
}
const ::mavsdk::rpc::gimbal::EulerAngle& Attitude::_Internal::euler_angle_north(const Attitude* msg) {
  return *msg->_impl_.euler_angle_north_;
}
const ::mavsdk::rpc::gimbal::Quaternion& Attitude::_Internal::quaternion_north(const Attitude* msg) {
  return *msg->_impl_.quaternion_north_;
}
const ::mavsdk::rpc::gimbal::AngularVelocityBody& Attitude::_Internal::angular_velocity(const Attitude* msg) {
  return *msg->_impl_.angular_velocity_;
}
Attitude::Attitude(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.Attitude)
}
inline PROTOBUF_NDEBUG_INLINE Attitude::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Attitude::Attitude(
    ::google::protobuf::Arena* arena,
    const Attitude& from)
    : ::google::protobuf::Message(arena) {
  Attitude* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.euler_angle_forward_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::EulerAngle>(arena, *from._impl_.euler_angle_forward_)
                : nullptr;
  _impl_.quaternion_forward_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::Quaternion>(arena, *from._impl_.quaternion_forward_)
                : nullptr;
  _impl_.euler_angle_north_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::EulerAngle>(arena, *from._impl_.euler_angle_north_)
                : nullptr;
  _impl_.quaternion_north_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::Quaternion>(arena, *from._impl_.quaternion_north_)
                : nullptr;
  _impl_.angular_velocity_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::AngularVelocityBody>(arena, *from._impl_.angular_velocity_)
                : nullptr;
  _impl_.timestamp_us_ = from._impl_.timestamp_us_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.Attitude)
}
inline PROTOBUF_NDEBUG_INLINE Attitude::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Attitude::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, euler_angle_forward_),
           0,
           offsetof(Impl_, timestamp_us_) -
               offsetof(Impl_, euler_angle_forward_) +
               sizeof(Impl_::timestamp_us_));
}
Attitude::~Attitude() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.Attitude)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Attitude::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.euler_angle_forward_;
  delete _impl_.quaternion_forward_;
  delete _impl_.euler_angle_north_;
  delete _impl_.quaternion_north_;
  delete _impl_.angular_velocity_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Attitude::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.Attitude)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.euler_angle_forward_ != nullptr);
      _impl_.euler_angle_forward_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.quaternion_forward_ != nullptr);
      _impl_.quaternion_forward_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.euler_angle_north_ != nullptr);
      _impl_.euler_angle_north_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.quaternion_north_ != nullptr);
      _impl_.quaternion_north_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.angular_velocity_ != nullptr);
      _impl_.angular_velocity_->Clear();
    }
  }
  _impl_.timestamp_us_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Attitude::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 5, 0, 2> Attitude::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Attitude, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Attitude_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Attitude, _impl_.euler_angle_forward_)}},
    // .mavsdk.rpc.gimbal.Quaternion quaternion_forward = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Attitude, _impl_.quaternion_forward_)}},
    // .mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Attitude, _impl_.euler_angle_north_)}},
    // .mavsdk.rpc.gimbal.Quaternion quaternion_north = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Attitude, _impl_.quaternion_north_)}},
    // .mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(Attitude, _impl_.angular_velocity_)}},
    // uint64 timestamp_us = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Attitude, _impl_.timestamp_us_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Attitude, _impl_.timestamp_us_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 1;
    {PROTOBUF_FIELD_OFFSET(Attitude, _impl_.euler_angle_forward_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.gimbal.Quaternion quaternion_forward = 2;
    {PROTOBUF_FIELD_OFFSET(Attitude, _impl_.quaternion_forward_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 3;
    {PROTOBUF_FIELD_OFFSET(Attitude, _impl_.euler_angle_north_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.gimbal.Quaternion quaternion_north = 4;
    {PROTOBUF_FIELD_OFFSET(Attitude, _impl_.quaternion_north_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 5;
    {PROTOBUF_FIELD_OFFSET(Attitude, _impl_.angular_velocity_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 timestamp_us = 6;
    {PROTOBUF_FIELD_OFFSET(Attitude, _impl_.timestamp_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::EulerAngle>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::Quaternion>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::EulerAngle>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::Quaternion>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::AngularVelocityBody>()},
  }}, {{
  }},
};

::uint8_t* Attitude::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.Attitude)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::euler_angle_forward(this),
        _Internal::euler_angle_forward(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.gimbal.Quaternion quaternion_forward = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::quaternion_forward(this),
        _Internal::quaternion_forward(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::euler_angle_north(this),
        _Internal::euler_angle_north(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.gimbal.Quaternion quaternion_north = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::quaternion_north(this),
        _Internal::quaternion_north(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::angular_velocity(this),
        _Internal::angular_velocity(this).GetCachedSize(), target, stream);
  }

  // uint64 timestamp_us = 6;
  if (this->_internal_timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.Attitude)
  return target;
}

::size_t Attitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.Attitude)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.euler_angle_forward_);
    }

    // .mavsdk.rpc.gimbal.Quaternion quaternion_forward = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.quaternion_forward_);
    }

    // .mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.euler_angle_north_);
    }

    // .mavsdk.rpc.gimbal.Quaternion quaternion_north = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.quaternion_north_);
    }

    // .mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.angular_velocity_);
    }

  }
  // uint64 timestamp_us = 6;
  if (this->_internal_timestamp_us() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp_us());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Attitude::_class_data_ = {
    Attitude::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Attitude::GetClassData() const {
  return &_class_data_;
}

void Attitude::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Attitude*>(&to_msg);
  auto& from = static_cast<const Attitude&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.Attitude)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_euler_angle_forward()->::mavsdk::rpc::gimbal::EulerAngle::MergeFrom(
          from._internal_euler_angle_forward());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_quaternion_forward()->::mavsdk::rpc::gimbal::Quaternion::MergeFrom(
          from._internal_quaternion_forward());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_euler_angle_north()->::mavsdk::rpc::gimbal::EulerAngle::MergeFrom(
          from._internal_euler_angle_north());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_quaternion_north()->::mavsdk::rpc::gimbal::Quaternion::MergeFrom(
          from._internal_quaternion_north());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_angular_velocity()->::mavsdk::rpc::gimbal::AngularVelocityBody::MergeFrom(
          from._internal_angular_velocity());
    }
  }
  if (from._internal_timestamp_us() != 0) {
    _this->_internal_set_timestamp_us(from._internal_timestamp_us());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Attitude::CopyFrom(const Attitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.Attitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Attitude::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Attitude::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Attitude::InternalSwap(Attitude* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attitude, _impl_.timestamp_us_)
      + sizeof(Attitude::_impl_.timestamp_us_)
      - PROTOBUF_FIELD_OFFSET(Attitude, _impl_.euler_angle_forward_)>(
          reinterpret_cast<char*>(&_impl_.euler_angle_forward_),
          reinterpret_cast<char*>(&other->_impl_.euler_angle_forward_));
}

::google::protobuf::Metadata Attitude::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[19]);
}
// ===================================================================

class SubscribeAttitudeRequest::_Internal {
 public:
};

SubscribeAttitudeRequest::SubscribeAttitudeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SubscribeAttitudeRequest)
}
SubscribeAttitudeRequest::SubscribeAttitudeRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeAttitudeRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeAttitudeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SubscribeAttitudeRequest)
}









::google::protobuf::Metadata SubscribeAttitudeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[20]);
}
// ===================================================================

class AttitudeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AttitudeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AttitudeResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::gimbal::Attitude& attitude(const AttitudeResponse* msg);
  static void set_has_attitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::gimbal::Attitude& AttitudeResponse::_Internal::attitude(const AttitudeResponse* msg) {
  return *msg->_impl_.attitude_;
}
AttitudeResponse::AttitudeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.AttitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE AttitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AttitudeResponse::AttitudeResponse(
    ::google::protobuf::Arena* arena,
    const AttitudeResponse& from)
    : ::google::protobuf::Message(arena) {
  AttitudeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.attitude_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::gimbal::Attitude>(arena, *from._impl_.attitude_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.AttitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE AttitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AttitudeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.attitude_ = {};
}
AttitudeResponse::~AttitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.AttitudeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AttitudeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.attitude_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AttitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.AttitudeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.attitude_ != nullptr);
    _impl_.attitude_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AttitudeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AttitudeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AttitudeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AttitudeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.gimbal.Attitude attitude = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AttitudeResponse, _impl_.attitude_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.Attitude attitude = 1;
    {PROTOBUF_FIELD_OFFSET(AttitudeResponse, _impl_.attitude_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::gimbal::Attitude>()},
  }}, {{
  }},
};

::uint8_t* AttitudeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.AttitudeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.gimbal.Attitude attitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::attitude(this),
        _Internal::attitude(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.AttitudeResponse)
  return target;
}

::size_t AttitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.AttitudeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.Attitude attitude = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.attitude_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AttitudeResponse::_class_data_ = {
    AttitudeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AttitudeResponse::GetClassData() const {
  return &_class_data_;
}

void AttitudeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AttitudeResponse*>(&to_msg);
  auto& from = static_cast<const AttitudeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.AttitudeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_attitude()->::mavsdk::rpc::gimbal::Attitude::MergeFrom(
        from._internal_attitude());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AttitudeResponse::CopyFrom(const AttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.AttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AttitudeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AttitudeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AttitudeResponse::InternalSwap(AttitudeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.attitude_, other->_impl_.attitude_);
}

::google::protobuf::Metadata AttitudeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[21]);
}
// ===================================================================

class ControlStatus::_Internal {
 public:
};

ControlStatus::ControlStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ControlStatus)
}
ControlStatus::ControlStatus(
    ::google::protobuf::Arena* arena, const ControlStatus& from)
    : ControlStatus(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ControlStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ControlStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, control_mode_),
           0,
           offsetof(Impl_, compid_secondary_control_) -
               offsetof(Impl_, control_mode_) +
               sizeof(Impl_::compid_secondary_control_));
}
ControlStatus::~ControlStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.ControlStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ControlStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ControlStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.ControlStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.control_mode_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.compid_secondary_control_) -
      reinterpret_cast<char*>(&_impl_.control_mode_)) + sizeof(_impl_.compid_secondary_control_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ControlStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> ControlStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ControlStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlStatus, _impl_.control_mode_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.control_mode_)}},
    // int32 sysid_primary_control = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlStatus, _impl_.sysid_primary_control_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.sysid_primary_control_)}},
    // int32 compid_primary_control = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlStatus, _impl_.compid_primary_control_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.compid_primary_control_)}},
    // int32 sysid_secondary_control = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlStatus, _impl_.sysid_secondary_control_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.sysid_secondary_control_)}},
    // int32 compid_secondary_control = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlStatus, _impl_.compid_secondary_control_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.compid_secondary_control_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
    {PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.control_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 sysid_primary_control = 2;
    {PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.sysid_primary_control_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 compid_primary_control = 3;
    {PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.compid_primary_control_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 sysid_secondary_control = 4;
    {PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.sysid_secondary_control_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 compid_secondary_control = 5;
    {PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.compid_secondary_control_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ControlStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.ControlStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
  if (this->_internal_control_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_control_mode(), target);
  }

  // int32 sysid_primary_control = 2;
  if (this->_internal_sysid_primary_control() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_sysid_primary_control(), target);
  }

  // int32 compid_primary_control = 3;
  if (this->_internal_compid_primary_control() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_compid_primary_control(), target);
  }

  // int32 sysid_secondary_control = 4;
  if (this->_internal_sysid_secondary_control() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_sysid_secondary_control(), target);
  }

  // int32 compid_secondary_control = 5;
  if (this->_internal_compid_secondary_control() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_compid_secondary_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.ControlStatus)
  return target;
}

::size_t ControlStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.ControlStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
  if (this->_internal_control_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_control_mode());
  }

  // int32 sysid_primary_control = 2;
  if (this->_internal_sysid_primary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sysid_primary_control());
  }

  // int32 compid_primary_control = 3;
  if (this->_internal_compid_primary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_compid_primary_control());
  }

  // int32 sysid_secondary_control = 4;
  if (this->_internal_sysid_secondary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sysid_secondary_control());
  }

  // int32 compid_secondary_control = 5;
  if (this->_internal_compid_secondary_control() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_compid_secondary_control());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ControlStatus::_class_data_ = {
    ControlStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ControlStatus::GetClassData() const {
  return &_class_data_;
}

void ControlStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ControlStatus*>(&to_msg);
  auto& from = static_cast<const ControlStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.ControlStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_control_mode() != 0) {
    _this->_internal_set_control_mode(from._internal_control_mode());
  }
  if (from._internal_sysid_primary_control() != 0) {
    _this->_internal_set_sysid_primary_control(from._internal_sysid_primary_control());
  }
  if (from._internal_compid_primary_control() != 0) {
    _this->_internal_set_compid_primary_control(from._internal_compid_primary_control());
  }
  if (from._internal_sysid_secondary_control() != 0) {
    _this->_internal_set_sysid_secondary_control(from._internal_sysid_secondary_control());
  }
  if (from._internal_compid_secondary_control() != 0) {
    _this->_internal_set_compid_secondary_control(from._internal_compid_secondary_control());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ControlStatus::CopyFrom(const ControlStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.ControlStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ControlStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ControlStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ControlStatus::InternalSwap(ControlStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.compid_secondary_control_)
      + sizeof(ControlStatus::_impl_.compid_secondary_control_)
      - PROTOBUF_FIELD_OFFSET(ControlStatus, _impl_.control_mode_)>(
          reinterpret_cast<char*>(&_impl_.control_mode_),
          reinterpret_cast<char*>(&other->_impl_.control_mode_));
}

::google::protobuf::Metadata ControlStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[22]);
}
// ===================================================================

class GimbalResult::_Internal {
 public:
};

GimbalResult::GimbalResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.GimbalResult)
}
inline PROTOBUF_NDEBUG_INLINE GimbalResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : result_str_(arena, from.result_str_),
        _cached_size_{0} {}

GimbalResult::GimbalResult(
    ::google::protobuf::Arena* arena,
    const GimbalResult& from)
    : ::google::protobuf::Message(arena) {
  GimbalResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.result_ = from._impl_.result_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.GimbalResult)
}
inline PROTOBUF_NDEBUG_INLINE GimbalResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : result_str_(arena),
        _cached_size_{0} {}

inline void GimbalResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
GimbalResult::~GimbalResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.GimbalResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GimbalResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.result_str_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GimbalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.GimbalResult)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GimbalResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 49, 2> GimbalResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GimbalResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string result_str = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalResult, _impl_.result_str_)}},
    // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GimbalResult, _impl_.result_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GimbalResult, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(GimbalResult, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string result_str = 2;
    {PROTOBUF_FIELD_OFFSET(GimbalResult, _impl_.result_str_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\36\0\12\0\0\0\0\0"
    "mavsdk.rpc.gimbal.GimbalResult"
    "result_str"
  }},
};

::uint8_t* GimbalResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.GimbalResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    const std::string& _s = this->_internal_result_str();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.gimbal.GimbalResult.result_str");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.GimbalResult)
  return target;
}

::size_t GimbalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.GimbalResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_result_str());
  }

  // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GimbalResult::_class_data_ = {
    GimbalResult::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GimbalResult::GetClassData() const {
  return &_class_data_;
}

void GimbalResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GimbalResult*>(&to_msg);
  auto& from = static_cast<const GimbalResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.GimbalResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GimbalResult::CopyFrom(const GimbalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.GimbalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GimbalResult::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GimbalResult::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GimbalResult::InternalSwap(GimbalResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_str_, &other->_impl_.result_str_, arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata GimbalResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gimbal_2fgimbal_2eproto_getter, &descriptor_table_gimbal_2fgimbal_2eproto_once,
      file_level_metadata_gimbal_2fgimbal_2eproto[23]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
