// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry/telemetry.proto

#include "telemetry/telemetry.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mavsdk {
namespace rpc {
namespace telemetry {

inline constexpr VtolStateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : vtol_state_{static_cast< ::mavsdk::rpc::telemetry::VtolState >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VtolStateResponse::VtolStateResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VtolStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VtolStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VtolStateResponseDefaultTypeInternal() {}
  union {
    VtolStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VtolStateResponseDefaultTypeInternal _VtolStateResponse_default_instance_;

inline constexpr VelocityNed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : north_m_s_{0},
        east_m_s_{0},
        down_m_s_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VelocityNed::VelocityNed(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VelocityNedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VelocityNedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VelocityNedDefaultTypeInternal() {}
  union {
    VelocityNed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VelocityNedDefaultTypeInternal _VelocityNed_default_instance_;

inline constexpr VelocityBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_m_s_{0},
        y_m_s_{0},
        z_m_s_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VelocityBody::VelocityBody(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VelocityBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VelocityBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VelocityBodyDefaultTypeInternal() {}
  union {
    VelocityBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VelocityBodyDefaultTypeInternal _VelocityBody_default_instance_;

inline constexpr UnixEpochTimeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : time_us_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UnixEpochTimeResponse::UnixEpochTimeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UnixEpochTimeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnixEpochTimeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnixEpochTimeResponseDefaultTypeInternal() {}
  union {
    UnixEpochTimeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnixEpochTimeResponseDefaultTypeInternal _UnixEpochTimeResponse_default_instance_;

inline constexpr TelemetryResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : result_str_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{static_cast< ::mavsdk::rpc::telemetry::TelemetryResult_Result >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TelemetryResult::TelemetryResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TelemetryResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelemetryResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelemetryResultDefaultTypeInternal() {}
  union {
    TelemetryResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelemetryResultDefaultTypeInternal _TelemetryResult_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeVtolStateRequest::SubscribeVtolStateRequest(::_pbi::ConstantInitialized) {}
struct SubscribeVtolStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeVtolStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeVtolStateRequestDefaultTypeInternal() {}
  union {
    SubscribeVtolStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeVtolStateRequestDefaultTypeInternal _SubscribeVtolStateRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeVelocityNedRequest::SubscribeVelocityNedRequest(::_pbi::ConstantInitialized) {}
struct SubscribeVelocityNedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeVelocityNedRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeVelocityNedRequestDefaultTypeInternal() {}
  union {
    SubscribeVelocityNedRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeVelocityNedRequestDefaultTypeInternal _SubscribeVelocityNedRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeUnixEpochTimeRequest::SubscribeUnixEpochTimeRequest(::_pbi::ConstantInitialized) {}
struct SubscribeUnixEpochTimeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeUnixEpochTimeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeUnixEpochTimeRequestDefaultTypeInternal() {}
  union {
    SubscribeUnixEpochTimeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeUnixEpochTimeRequestDefaultTypeInternal _SubscribeUnixEpochTimeRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeStatusTextRequest::SubscribeStatusTextRequest(::_pbi::ConstantInitialized) {}
struct SubscribeStatusTextRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeStatusTextRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeStatusTextRequestDefaultTypeInternal() {}
  union {
    SubscribeStatusTextRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeStatusTextRequestDefaultTypeInternal _SubscribeStatusTextRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeScaledPressureRequest::SubscribeScaledPressureRequest(::_pbi::ConstantInitialized) {}
struct SubscribeScaledPressureRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeScaledPressureRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeScaledPressureRequestDefaultTypeInternal() {}
  union {
    SubscribeScaledPressureRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeScaledPressureRequestDefaultTypeInternal _SubscribeScaledPressureRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeScaledImuRequest::SubscribeScaledImuRequest(::_pbi::ConstantInitialized) {}
struct SubscribeScaledImuRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeScaledImuRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeScaledImuRequestDefaultTypeInternal() {}
  union {
    SubscribeScaledImuRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeScaledImuRequestDefaultTypeInternal _SubscribeScaledImuRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeRcStatusRequest::SubscribeRcStatusRequest(::_pbi::ConstantInitialized) {}
struct SubscribeRcStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeRcStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeRcStatusRequestDefaultTypeInternal() {}
  union {
    SubscribeRcStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeRcStatusRequestDefaultTypeInternal _SubscribeRcStatusRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeRawImuRequest::SubscribeRawImuRequest(::_pbi::ConstantInitialized) {}
struct SubscribeRawImuRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeRawImuRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeRawImuRequestDefaultTypeInternal() {}
  union {
    SubscribeRawImuRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeRawImuRequestDefaultTypeInternal _SubscribeRawImuRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeRawGpsRequest::SubscribeRawGpsRequest(::_pbi::ConstantInitialized) {}
struct SubscribeRawGpsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeRawGpsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeRawGpsRequestDefaultTypeInternal() {}
  union {
    SubscribeRawGpsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeRawGpsRequestDefaultTypeInternal _SubscribeRawGpsRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribePositionVelocityNedRequest::SubscribePositionVelocityNedRequest(::_pbi::ConstantInitialized) {}
struct SubscribePositionVelocityNedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribePositionVelocityNedRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribePositionVelocityNedRequestDefaultTypeInternal() {}
  union {
    SubscribePositionVelocityNedRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribePositionVelocityNedRequestDefaultTypeInternal _SubscribePositionVelocityNedRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribePositionRequest::SubscribePositionRequest(::_pbi::ConstantInitialized) {}
struct SubscribePositionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribePositionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribePositionRequestDefaultTypeInternal() {}
  union {
    SubscribePositionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribePositionRequestDefaultTypeInternal _SubscribePositionRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeOdometryRequest::SubscribeOdometryRequest(::_pbi::ConstantInitialized) {}
struct SubscribeOdometryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeOdometryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeOdometryRequestDefaultTypeInternal() {}
  union {
    SubscribeOdometryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeOdometryRequestDefaultTypeInternal _SubscribeOdometryRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeLandedStateRequest::SubscribeLandedStateRequest(::_pbi::ConstantInitialized) {}
struct SubscribeLandedStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeLandedStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeLandedStateRequestDefaultTypeInternal() {}
  union {
    SubscribeLandedStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeLandedStateRequestDefaultTypeInternal _SubscribeLandedStateRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeInAirRequest::SubscribeInAirRequest(::_pbi::ConstantInitialized) {}
struct SubscribeInAirRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeInAirRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeInAirRequestDefaultTypeInternal() {}
  union {
    SubscribeInAirRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeInAirRequestDefaultTypeInternal _SubscribeInAirRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeImuRequest::SubscribeImuRequest(::_pbi::ConstantInitialized) {}
struct SubscribeImuRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeImuRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeImuRequestDefaultTypeInternal() {}
  union {
    SubscribeImuRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeImuRequestDefaultTypeInternal _SubscribeImuRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeHomeRequest::SubscribeHomeRequest(::_pbi::ConstantInitialized) {}
struct SubscribeHomeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeHomeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeHomeRequestDefaultTypeInternal() {}
  union {
    SubscribeHomeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeHomeRequestDefaultTypeInternal _SubscribeHomeRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeHealthRequest::SubscribeHealthRequest(::_pbi::ConstantInitialized) {}
struct SubscribeHealthRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeHealthRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeHealthRequestDefaultTypeInternal() {}
  union {
    SubscribeHealthRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeHealthRequestDefaultTypeInternal _SubscribeHealthRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeHealthAllOkRequest::SubscribeHealthAllOkRequest(::_pbi::ConstantInitialized) {}
struct SubscribeHealthAllOkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeHealthAllOkRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeHealthAllOkRequestDefaultTypeInternal() {}
  union {
    SubscribeHealthAllOkRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeHealthAllOkRequestDefaultTypeInternal _SubscribeHealthAllOkRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeHeadingRequest::SubscribeHeadingRequest(::_pbi::ConstantInitialized) {}
struct SubscribeHeadingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeHeadingRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeHeadingRequestDefaultTypeInternal() {}
  union {
    SubscribeHeadingRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeHeadingRequestDefaultTypeInternal _SubscribeHeadingRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeGroundTruthRequest::SubscribeGroundTruthRequest(::_pbi::ConstantInitialized) {}
struct SubscribeGroundTruthRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeGroundTruthRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeGroundTruthRequestDefaultTypeInternal() {}
  union {
    SubscribeGroundTruthRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeGroundTruthRequestDefaultTypeInternal _SubscribeGroundTruthRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeGpsInfoRequest::SubscribeGpsInfoRequest(::_pbi::ConstantInitialized) {}
struct SubscribeGpsInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeGpsInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeGpsInfoRequestDefaultTypeInternal() {}
  union {
    SubscribeGpsInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeGpsInfoRequestDefaultTypeInternal _SubscribeGpsInfoRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeFlightModeRequest::SubscribeFlightModeRequest(::_pbi::ConstantInitialized) {}
struct SubscribeFlightModeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeFlightModeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeFlightModeRequestDefaultTypeInternal() {}
  union {
    SubscribeFlightModeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeFlightModeRequestDefaultTypeInternal _SubscribeFlightModeRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeFixedwingMetricsRequest::SubscribeFixedwingMetricsRequest(::_pbi::ConstantInitialized) {}
struct SubscribeFixedwingMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeFixedwingMetricsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeFixedwingMetricsRequestDefaultTypeInternal() {}
  union {
    SubscribeFixedwingMetricsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeFixedwingMetricsRequestDefaultTypeInternal _SubscribeFixedwingMetricsRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeDistanceSensorRequest::SubscribeDistanceSensorRequest(::_pbi::ConstantInitialized) {}
struct SubscribeDistanceSensorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeDistanceSensorRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeDistanceSensorRequestDefaultTypeInternal() {}
  union {
    SubscribeDistanceSensorRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeDistanceSensorRequestDefaultTypeInternal _SubscribeDistanceSensorRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeCameraAttitudeQuaternionRequest::SubscribeCameraAttitudeQuaternionRequest(::_pbi::ConstantInitialized) {}
struct SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal() {}
  union {
    SubscribeCameraAttitudeQuaternionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal _SubscribeCameraAttitudeQuaternionRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeCameraAttitudeEulerRequest::SubscribeCameraAttitudeEulerRequest(::_pbi::ConstantInitialized) {}
struct SubscribeCameraAttitudeEulerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeCameraAttitudeEulerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeCameraAttitudeEulerRequestDefaultTypeInternal() {}
  union {
    SubscribeCameraAttitudeEulerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeCameraAttitudeEulerRequestDefaultTypeInternal _SubscribeCameraAttitudeEulerRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeBatteryRequest::SubscribeBatteryRequest(::_pbi::ConstantInitialized) {}
struct SubscribeBatteryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeBatteryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeBatteryRequestDefaultTypeInternal() {}
  union {
    SubscribeBatteryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeBatteryRequestDefaultTypeInternal _SubscribeBatteryRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeAttitudeQuaternionRequest::SubscribeAttitudeQuaternionRequest(::_pbi::ConstantInitialized) {}
struct SubscribeAttitudeQuaternionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeAttitudeQuaternionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeAttitudeQuaternionRequestDefaultTypeInternal() {}
  union {
    SubscribeAttitudeQuaternionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeAttitudeQuaternionRequestDefaultTypeInternal _SubscribeAttitudeQuaternionRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeAttitudeEulerRequest::SubscribeAttitudeEulerRequest(::_pbi::ConstantInitialized) {}
struct SubscribeAttitudeEulerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeAttitudeEulerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeAttitudeEulerRequestDefaultTypeInternal() {}
  union {
    SubscribeAttitudeEulerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeAttitudeEulerRequestDefaultTypeInternal _SubscribeAttitudeEulerRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeAttitudeAngularVelocityBodyRequest::SubscribeAttitudeAngularVelocityBodyRequest(::_pbi::ConstantInitialized) {}
struct SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal() {}
  union {
    SubscribeAttitudeAngularVelocityBodyRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal _SubscribeAttitudeAngularVelocityBodyRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeArmedRequest::SubscribeArmedRequest(::_pbi::ConstantInitialized) {}
struct SubscribeArmedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeArmedRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeArmedRequestDefaultTypeInternal() {}
  union {
    SubscribeArmedRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeArmedRequestDefaultTypeInternal _SubscribeArmedRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeAltitudeRequest::SubscribeAltitudeRequest(::_pbi::ConstantInitialized) {}
struct SubscribeAltitudeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeAltitudeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeAltitudeRequestDefaultTypeInternal() {}
  union {
    SubscribeAltitudeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeAltitudeRequestDefaultTypeInternal _SubscribeAltitudeRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeActuatorOutputStatusRequest::SubscribeActuatorOutputStatusRequest(::_pbi::ConstantInitialized) {}
struct SubscribeActuatorOutputStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeActuatorOutputStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeActuatorOutputStatusRequestDefaultTypeInternal() {}
  union {
    SubscribeActuatorOutputStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeActuatorOutputStatusRequestDefaultTypeInternal _SubscribeActuatorOutputStatusRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SubscribeActuatorControlTargetRequest::SubscribeActuatorControlTargetRequest(::_pbi::ConstantInitialized) {}
struct SubscribeActuatorControlTargetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeActuatorControlTargetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeActuatorControlTargetRequestDefaultTypeInternal() {}
  union {
    SubscribeActuatorControlTargetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeActuatorControlTargetRequestDefaultTypeInternal _SubscribeActuatorControlTargetRequest_default_instance_;

inline constexpr StatusText::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::mavsdk::rpc::telemetry::StatusTextType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StatusText::StatusText(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StatusTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusTextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusTextDefaultTypeInternal() {}
  union {
    StatusText _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusTextDefaultTypeInternal _StatusText_default_instance_;

inline constexpr SetRateVtolStateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateVtolStateRequest::SetRateVtolStateRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateVtolStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateVtolStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateVtolStateRequestDefaultTypeInternal() {}
  union {
    SetRateVtolStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateVtolStateRequestDefaultTypeInternal _SetRateVtolStateRequest_default_instance_;

inline constexpr SetRateVelocityNedRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateVelocityNedRequest::SetRateVelocityNedRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateVelocityNedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateVelocityNedRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateVelocityNedRequestDefaultTypeInternal() {}
  union {
    SetRateVelocityNedRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateVelocityNedRequestDefaultTypeInternal _SetRateVelocityNedRequest_default_instance_;

inline constexpr SetRateUnixEpochTimeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateUnixEpochTimeRequest::SetRateUnixEpochTimeRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateUnixEpochTimeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateUnixEpochTimeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateUnixEpochTimeRequestDefaultTypeInternal() {}
  union {
    SetRateUnixEpochTimeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateUnixEpochTimeRequestDefaultTypeInternal _SetRateUnixEpochTimeRequest_default_instance_;

inline constexpr SetRateScaledImuRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateScaledImuRequest::SetRateScaledImuRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateScaledImuRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateScaledImuRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateScaledImuRequestDefaultTypeInternal() {}
  union {
    SetRateScaledImuRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateScaledImuRequestDefaultTypeInternal _SetRateScaledImuRequest_default_instance_;

inline constexpr SetRateRcStatusRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateRcStatusRequest::SetRateRcStatusRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateRcStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateRcStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateRcStatusRequestDefaultTypeInternal() {}
  union {
    SetRateRcStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateRcStatusRequestDefaultTypeInternal _SetRateRcStatusRequest_default_instance_;

inline constexpr SetRateRawImuRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateRawImuRequest::SetRateRawImuRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateRawImuRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateRawImuRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateRawImuRequestDefaultTypeInternal() {}
  union {
    SetRateRawImuRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateRawImuRequestDefaultTypeInternal _SetRateRawImuRequest_default_instance_;

inline constexpr SetRateRawGpsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateRawGpsRequest::SetRateRawGpsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateRawGpsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateRawGpsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateRawGpsRequestDefaultTypeInternal() {}
  union {
    SetRateRawGpsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateRawGpsRequestDefaultTypeInternal _SetRateRawGpsRequest_default_instance_;

inline constexpr SetRatePositionVelocityNedRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRatePositionVelocityNedRequest::SetRatePositionVelocityNedRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRatePositionVelocityNedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRatePositionVelocityNedRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRatePositionVelocityNedRequestDefaultTypeInternal() {}
  union {
    SetRatePositionVelocityNedRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRatePositionVelocityNedRequestDefaultTypeInternal _SetRatePositionVelocityNedRequest_default_instance_;

inline constexpr SetRatePositionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRatePositionRequest::SetRatePositionRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRatePositionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRatePositionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRatePositionRequestDefaultTypeInternal() {}
  union {
    SetRatePositionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRatePositionRequestDefaultTypeInternal _SetRatePositionRequest_default_instance_;

inline constexpr SetRateOdometryRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateOdometryRequest::SetRateOdometryRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateOdometryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateOdometryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateOdometryRequestDefaultTypeInternal() {}
  union {
    SetRateOdometryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateOdometryRequestDefaultTypeInternal _SetRateOdometryRequest_default_instance_;

inline constexpr SetRateLandedStateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateLandedStateRequest::SetRateLandedStateRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateLandedStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateLandedStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateLandedStateRequestDefaultTypeInternal() {}
  union {
    SetRateLandedStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateLandedStateRequestDefaultTypeInternal _SetRateLandedStateRequest_default_instance_;

inline constexpr SetRateInAirRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateInAirRequest::SetRateInAirRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateInAirRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateInAirRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateInAirRequestDefaultTypeInternal() {}
  union {
    SetRateInAirRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateInAirRequestDefaultTypeInternal _SetRateInAirRequest_default_instance_;

inline constexpr SetRateImuRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateImuRequest::SetRateImuRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateImuRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateImuRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateImuRequestDefaultTypeInternal() {}
  union {
    SetRateImuRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateImuRequestDefaultTypeInternal _SetRateImuRequest_default_instance_;

inline constexpr SetRateHomeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateHomeRequest::SetRateHomeRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateHomeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateHomeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateHomeRequestDefaultTypeInternal() {}
  union {
    SetRateHomeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateHomeRequestDefaultTypeInternal _SetRateHomeRequest_default_instance_;

inline constexpr SetRateGroundTruthRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateGroundTruthRequest::SetRateGroundTruthRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateGroundTruthRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateGroundTruthRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateGroundTruthRequestDefaultTypeInternal() {}
  union {
    SetRateGroundTruthRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateGroundTruthRequestDefaultTypeInternal _SetRateGroundTruthRequest_default_instance_;

inline constexpr SetRateGpsInfoRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateGpsInfoRequest::SetRateGpsInfoRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateGpsInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateGpsInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateGpsInfoRequestDefaultTypeInternal() {}
  union {
    SetRateGpsInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateGpsInfoRequestDefaultTypeInternal _SetRateGpsInfoRequest_default_instance_;

inline constexpr SetRateFixedwingMetricsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateFixedwingMetricsRequest::SetRateFixedwingMetricsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateFixedwingMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateFixedwingMetricsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateFixedwingMetricsRequestDefaultTypeInternal() {}
  union {
    SetRateFixedwingMetricsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateFixedwingMetricsRequestDefaultTypeInternal _SetRateFixedwingMetricsRequest_default_instance_;

inline constexpr SetRateDistanceSensorRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateDistanceSensorRequest::SetRateDistanceSensorRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateDistanceSensorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateDistanceSensorRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateDistanceSensorRequestDefaultTypeInternal() {}
  union {
    SetRateDistanceSensorRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateDistanceSensorRequestDefaultTypeInternal _SetRateDistanceSensorRequest_default_instance_;

inline constexpr SetRateCameraAttitudeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateCameraAttitudeRequest::SetRateCameraAttitudeRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateCameraAttitudeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateCameraAttitudeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateCameraAttitudeRequestDefaultTypeInternal() {}
  union {
    SetRateCameraAttitudeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateCameraAttitudeRequestDefaultTypeInternal _SetRateCameraAttitudeRequest_default_instance_;

inline constexpr SetRateCameraAttitudeQuaternionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateCameraAttitudeQuaternionRequest::SetRateCameraAttitudeQuaternionRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateCameraAttitudeQuaternionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateCameraAttitudeQuaternionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateCameraAttitudeQuaternionRequestDefaultTypeInternal() {}
  union {
    SetRateCameraAttitudeQuaternionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateCameraAttitudeQuaternionRequestDefaultTypeInternal _SetRateCameraAttitudeQuaternionRequest_default_instance_;

inline constexpr SetRateBatteryRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateBatteryRequest::SetRateBatteryRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateBatteryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateBatteryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateBatteryRequestDefaultTypeInternal() {}
  union {
    SetRateBatteryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateBatteryRequestDefaultTypeInternal _SetRateBatteryRequest_default_instance_;

inline constexpr SetRateAttitudeQuaternionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateAttitudeQuaternionRequest::SetRateAttitudeQuaternionRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateAttitudeQuaternionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateAttitudeQuaternionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateAttitudeQuaternionRequestDefaultTypeInternal() {}
  union {
    SetRateAttitudeQuaternionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateAttitudeQuaternionRequestDefaultTypeInternal _SetRateAttitudeQuaternionRequest_default_instance_;

inline constexpr SetRateAttitudeEulerRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateAttitudeEulerRequest::SetRateAttitudeEulerRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateAttitudeEulerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateAttitudeEulerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateAttitudeEulerRequestDefaultTypeInternal() {}
  union {
    SetRateAttitudeEulerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateAttitudeEulerRequestDefaultTypeInternal _SetRateAttitudeEulerRequest_default_instance_;

inline constexpr SetRateAttitudeAngularVelocityBodyRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateAttitudeAngularVelocityBodyRequest::SetRateAttitudeAngularVelocityBodyRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateAttitudeAngularVelocityBodyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateAttitudeAngularVelocityBodyRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateAttitudeAngularVelocityBodyRequestDefaultTypeInternal() {}
  union {
    SetRateAttitudeAngularVelocityBodyRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateAttitudeAngularVelocityBodyRequestDefaultTypeInternal _SetRateAttitudeAngularVelocityBodyRequest_default_instance_;

inline constexpr SetRateAltitudeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateAltitudeRequest::SetRateAltitudeRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateAltitudeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateAltitudeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateAltitudeRequestDefaultTypeInternal() {}
  union {
    SetRateAltitudeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateAltitudeRequestDefaultTypeInternal _SetRateAltitudeRequest_default_instance_;

inline constexpr SetRateActuatorOutputStatusRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateActuatorOutputStatusRequest::SetRateActuatorOutputStatusRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateActuatorOutputStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateActuatorOutputStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateActuatorOutputStatusRequestDefaultTypeInternal() {}
  union {
    SetRateActuatorOutputStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateActuatorOutputStatusRequestDefaultTypeInternal _SetRateActuatorOutputStatusRequest_default_instance_;

inline constexpr SetRateActuatorControlTargetRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rate_hz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateActuatorControlTargetRequest::SetRateActuatorControlTargetRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateActuatorControlTargetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateActuatorControlTargetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateActuatorControlTargetRequestDefaultTypeInternal() {}
  union {
    SetRateActuatorControlTargetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateActuatorControlTargetRequestDefaultTypeInternal _SetRateActuatorControlTargetRequest_default_instance_;

inline constexpr ScaledPressure::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : timestamp_us_{::uint64_t{0u}},
        absolute_pressure_hpa_{0},
        differential_pressure_hpa_{0},
        temperature_deg_{0},
        differential_pressure_temperature_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ScaledPressure::ScaledPressure(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ScaledPressureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScaledPressureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScaledPressureDefaultTypeInternal() {}
  union {
    ScaledPressure _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScaledPressureDefaultTypeInternal _ScaledPressure_default_instance_;

inline constexpr RcStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : was_available_once_{false},
        is_available_{false},
        signal_strength_percent_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RcStatus::RcStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RcStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RcStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RcStatusDefaultTypeInternal() {}
  union {
    RcStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RcStatusDefaultTypeInternal _RcStatus_default_instance_;

inline constexpr RawGps::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : timestamp_us_{::uint64_t{0u}},
        latitude_deg_{0},
        longitude_deg_{0},
        absolute_altitude_m_{0},
        hdop_{0},
        vdop_{0},
        velocity_m_s_{0},
        cog_deg_{0},
        altitude_ellipsoid_m_{0},
        horizontal_uncertainty_m_{0},
        vertical_uncertainty_m_{0},
        velocity_uncertainty_m_s_{0},
        heading_uncertainty_deg_{0},
        yaw_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RawGps::RawGps(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RawGpsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawGpsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawGpsDefaultTypeInternal() {}
  union {
    RawGps _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawGpsDefaultTypeInternal _RawGps_default_instance_;

inline constexpr Quaternion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : w_{0},
        x_{0},
        y_{0},
        z_{0},
        timestamp_us_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Quaternion::Quaternion(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;

inline constexpr PositionNed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : north_m_{0},
        east_m_{0},
        down_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PositionNed::PositionNed(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PositionNedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionNedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionNedDefaultTypeInternal() {}
  union {
    PositionNed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionNedDefaultTypeInternal _PositionNed_default_instance_;

inline constexpr PositionBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_m_{0},
        y_m_{0},
        z_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PositionBody::PositionBody(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PositionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionBodyDefaultTypeInternal() {}
  union {
    PositionBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionBodyDefaultTypeInternal _PositionBody_default_instance_;

inline constexpr Position::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : latitude_deg_{0},
        longitude_deg_{0},
        absolute_altitude_m_{0},
        relative_altitude_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Position::Position(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;

inline constexpr MagneticFieldFrd::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : forward_gauss_{0},
        right_gauss_{0},
        down_gauss_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MagneticFieldFrd::MagneticFieldFrd(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MagneticFieldFrdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MagneticFieldFrdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MagneticFieldFrdDefaultTypeInternal() {}
  union {
    MagneticFieldFrd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MagneticFieldFrdDefaultTypeInternal _MagneticFieldFrd_default_instance_;

inline constexpr LandedStateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : landed_state_{static_cast< ::mavsdk::rpc::telemetry::LandedState >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LandedStateResponse::LandedStateResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LandedStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LandedStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LandedStateResponseDefaultTypeInternal() {}
  union {
    LandedStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LandedStateResponseDefaultTypeInternal _LandedStateResponse_default_instance_;

inline constexpr InAirResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : is_in_air_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InAirResponse::InAirResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InAirResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InAirResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InAirResponseDefaultTypeInternal() {}
  union {
    InAirResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InAirResponseDefaultTypeInternal _InAirResponse_default_instance_;

inline constexpr HealthAllOkResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : is_health_all_ok_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthAllOkResponse::HealthAllOkResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthAllOkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAllOkResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAllOkResponseDefaultTypeInternal() {}
  union {
    HealthAllOkResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAllOkResponseDefaultTypeInternal _HealthAllOkResponse_default_instance_;

inline constexpr Health::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : is_gyrometer_calibration_ok_{false},
        is_accelerometer_calibration_ok_{false},
        is_magnetometer_calibration_ok_{false},
        is_local_position_ok_{false},
        is_global_position_ok_{false},
        is_home_position_ok_{false},
        is_armable_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Health::Health(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthDefaultTypeInternal() {}
  union {
    Health _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthDefaultTypeInternal _Health_default_instance_;

inline constexpr Heading::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : heading_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Heading::Heading(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HeadingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeadingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeadingDefaultTypeInternal() {}
  union {
    Heading _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeadingDefaultTypeInternal _Heading_default_instance_;

inline constexpr GroundTruth::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : latitude_deg_{0},
        longitude_deg_{0},
        absolute_altitude_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GroundTruth::GroundTruth(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GroundTruthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroundTruthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroundTruthDefaultTypeInternal() {}
  union {
    GroundTruth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;

inline constexpr GpsInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : num_satellites_{0},
        fix_type_{static_cast< ::mavsdk::rpc::telemetry::FixType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GpsInfo::GpsInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GpsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpsInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpsInfoDefaultTypeInternal() {}
  union {
    GpsInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpsInfoDefaultTypeInternal _GpsInfo_default_instance_;

inline constexpr GpsGlobalOrigin::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : latitude_deg_{0},
        longitude_deg_{0},
        altitude_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GpsGlobalOrigin::GpsGlobalOrigin(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GpsGlobalOriginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpsGlobalOriginDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpsGlobalOriginDefaultTypeInternal() {}
  union {
    GpsGlobalOrigin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpsGlobalOriginDefaultTypeInternal _GpsGlobalOrigin_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR GetGpsGlobalOriginRequest::GetGpsGlobalOriginRequest(::_pbi::ConstantInitialized) {}
struct GetGpsGlobalOriginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetGpsGlobalOriginRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetGpsGlobalOriginRequestDefaultTypeInternal() {}
  union {
    GetGpsGlobalOriginRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetGpsGlobalOriginRequestDefaultTypeInternal _GetGpsGlobalOriginRequest_default_instance_;

inline constexpr FlightModeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : flight_mode_{static_cast< ::mavsdk::rpc::telemetry::FlightMode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FlightModeResponse::FlightModeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FlightModeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightModeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightModeResponseDefaultTypeInternal() {}
  union {
    FlightModeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightModeResponseDefaultTypeInternal _FlightModeResponse_default_instance_;

inline constexpr FixedwingMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : airspeed_m_s_{0},
        throttle_percentage_{0},
        climb_rate_m_s_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FixedwingMetrics::FixedwingMetrics(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FixedwingMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FixedwingMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FixedwingMetricsDefaultTypeInternal() {}
  union {
    FixedwingMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FixedwingMetricsDefaultTypeInternal _FixedwingMetrics_default_instance_;

inline constexpr EulerAngle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : roll_deg_{0},
        pitch_deg_{0},
        timestamp_us_{::uint64_t{0u}},
        yaw_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EulerAngle::EulerAngle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EulerAngleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EulerAngleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EulerAngleDefaultTypeInternal() {}
  union {
    EulerAngle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;

inline constexpr Covariance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : covariance_matrix_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Covariance::Covariance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CovarianceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CovarianceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CovarianceDefaultTypeInternal() {}
  union {
    Covariance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CovarianceDefaultTypeInternal _Covariance_default_instance_;

inline constexpr Battery::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{0u},
        temperature_degc_{0},
        voltage_v_{0},
        current_battery_a_{0},
        capacity_consumed_ah_{0},
        remaining_percent_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Battery::Battery(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BatteryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryDefaultTypeInternal() {}
  union {
    Battery _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryDefaultTypeInternal _Battery_default_instance_;

inline constexpr ArmedResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : is_armed_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ArmedResponse::ArmedResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ArmedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArmedResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArmedResponseDefaultTypeInternal() {}
  union {
    ArmedResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArmedResponseDefaultTypeInternal _ArmedResponse_default_instance_;

inline constexpr AngularVelocityFrd::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : forward_rad_s_{0},
        right_rad_s_{0},
        down_rad_s_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AngularVelocityFrd::AngularVelocityFrd(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AngularVelocityFrdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AngularVelocityFrdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AngularVelocityFrdDefaultTypeInternal() {}
  union {
    AngularVelocityFrd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AngularVelocityFrdDefaultTypeInternal _AngularVelocityFrd_default_instance_;

inline constexpr AngularVelocityBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : roll_rad_s_{0},
        pitch_rad_s_{0},
        yaw_rad_s_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AngularVelocityBody::AngularVelocityBody(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AngularVelocityBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AngularVelocityBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AngularVelocityBodyDefaultTypeInternal() {}
  union {
    AngularVelocityBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;

inline constexpr Altitude::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : altitude_monotonic_m_{0},
        altitude_amsl_m_{0},
        altitude_local_m_{0},
        altitude_relative_m_{0},
        altitude_terrain_m_{0},
        bottom_clearance_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Altitude::Altitude(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AltitudeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AltitudeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AltitudeDefaultTypeInternal() {}
  union {
    Altitude _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AltitudeDefaultTypeInternal _Altitude_default_instance_;

inline constexpr ActuatorOutputStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actuator_{},
        active_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ActuatorOutputStatus::ActuatorOutputStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ActuatorOutputStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActuatorOutputStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActuatorOutputStatusDefaultTypeInternal() {}
  union {
    ActuatorOutputStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActuatorOutputStatusDefaultTypeInternal _ActuatorOutputStatus_default_instance_;

inline constexpr ActuatorControlTarget::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : controls_{},
        group_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ActuatorControlTarget::ActuatorControlTarget(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ActuatorControlTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActuatorControlTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActuatorControlTargetDefaultTypeInternal() {}
  union {
    ActuatorControlTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActuatorControlTargetDefaultTypeInternal _ActuatorControlTarget_default_instance_;

inline constexpr AccelerationFrd::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : forward_m_s2_{0},
        right_m_s2_{0},
        down_m_s2_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AccelerationFrd::AccelerationFrd(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AccelerationFrdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelerationFrdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelerationFrdDefaultTypeInternal() {}
  union {
    AccelerationFrd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelerationFrdDefaultTypeInternal _AccelerationFrd_default_instance_;

inline constexpr VelocityNedResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        velocity_ned_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR VelocityNedResponse::VelocityNedResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VelocityNedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VelocityNedResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VelocityNedResponseDefaultTypeInternal() {}
  union {
    VelocityNedResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VelocityNedResponseDefaultTypeInternal _VelocityNedResponse_default_instance_;

inline constexpr StatusTextResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        status_text_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StatusTextResponse::StatusTextResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StatusTextResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusTextResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusTextResponseDefaultTypeInternal() {}
  union {
    StatusTextResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusTextResponseDefaultTypeInternal _StatusTextResponse_default_instance_;

inline constexpr SetRateVtolStateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateVtolStateResponse::SetRateVtolStateResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateVtolStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateVtolStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateVtolStateResponseDefaultTypeInternal() {}
  union {
    SetRateVtolStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateVtolStateResponseDefaultTypeInternal _SetRateVtolStateResponse_default_instance_;

inline constexpr SetRateVelocityNedResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateVelocityNedResponse::SetRateVelocityNedResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateVelocityNedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateVelocityNedResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateVelocityNedResponseDefaultTypeInternal() {}
  union {
    SetRateVelocityNedResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateVelocityNedResponseDefaultTypeInternal _SetRateVelocityNedResponse_default_instance_;

inline constexpr SetRateUnixEpochTimeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateUnixEpochTimeResponse::SetRateUnixEpochTimeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateUnixEpochTimeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateUnixEpochTimeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateUnixEpochTimeResponseDefaultTypeInternal() {}
  union {
    SetRateUnixEpochTimeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateUnixEpochTimeResponseDefaultTypeInternal _SetRateUnixEpochTimeResponse_default_instance_;

inline constexpr SetRateScaledImuResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateScaledImuResponse::SetRateScaledImuResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateScaledImuResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateScaledImuResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateScaledImuResponseDefaultTypeInternal() {}
  union {
    SetRateScaledImuResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateScaledImuResponseDefaultTypeInternal _SetRateScaledImuResponse_default_instance_;

inline constexpr SetRateRcStatusResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateRcStatusResponse::SetRateRcStatusResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateRcStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateRcStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateRcStatusResponseDefaultTypeInternal() {}
  union {
    SetRateRcStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateRcStatusResponseDefaultTypeInternal _SetRateRcStatusResponse_default_instance_;

inline constexpr SetRateRawImuResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateRawImuResponse::SetRateRawImuResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateRawImuResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateRawImuResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateRawImuResponseDefaultTypeInternal() {}
  union {
    SetRateRawImuResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateRawImuResponseDefaultTypeInternal _SetRateRawImuResponse_default_instance_;

inline constexpr SetRatePositionVelocityNedResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRatePositionVelocityNedResponse::SetRatePositionVelocityNedResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRatePositionVelocityNedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRatePositionVelocityNedResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRatePositionVelocityNedResponseDefaultTypeInternal() {}
  union {
    SetRatePositionVelocityNedResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRatePositionVelocityNedResponseDefaultTypeInternal _SetRatePositionVelocityNedResponse_default_instance_;

inline constexpr SetRatePositionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRatePositionResponse::SetRatePositionResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRatePositionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRatePositionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRatePositionResponseDefaultTypeInternal() {}
  union {
    SetRatePositionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRatePositionResponseDefaultTypeInternal _SetRatePositionResponse_default_instance_;

inline constexpr SetRateOdometryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateOdometryResponse::SetRateOdometryResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateOdometryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateOdometryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateOdometryResponseDefaultTypeInternal() {}
  union {
    SetRateOdometryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateOdometryResponseDefaultTypeInternal _SetRateOdometryResponse_default_instance_;

inline constexpr SetRateLandedStateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateLandedStateResponse::SetRateLandedStateResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateLandedStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateLandedStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateLandedStateResponseDefaultTypeInternal() {}
  union {
    SetRateLandedStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateLandedStateResponseDefaultTypeInternal _SetRateLandedStateResponse_default_instance_;

inline constexpr SetRateInAirResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateInAirResponse::SetRateInAirResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateInAirResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateInAirResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateInAirResponseDefaultTypeInternal() {}
  union {
    SetRateInAirResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateInAirResponseDefaultTypeInternal _SetRateInAirResponse_default_instance_;

inline constexpr SetRateImuResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateImuResponse::SetRateImuResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateImuResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateImuResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateImuResponseDefaultTypeInternal() {}
  union {
    SetRateImuResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateImuResponseDefaultTypeInternal _SetRateImuResponse_default_instance_;

inline constexpr SetRateHomeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateHomeResponse::SetRateHomeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateHomeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateHomeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateHomeResponseDefaultTypeInternal() {}
  union {
    SetRateHomeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateHomeResponseDefaultTypeInternal _SetRateHomeResponse_default_instance_;

inline constexpr SetRateGroundTruthResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateGroundTruthResponse::SetRateGroundTruthResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateGroundTruthResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateGroundTruthResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateGroundTruthResponseDefaultTypeInternal() {}
  union {
    SetRateGroundTruthResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateGroundTruthResponseDefaultTypeInternal _SetRateGroundTruthResponse_default_instance_;

inline constexpr SetRateGpsInfoResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateGpsInfoResponse::SetRateGpsInfoResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateGpsInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateGpsInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateGpsInfoResponseDefaultTypeInternal() {}
  union {
    SetRateGpsInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateGpsInfoResponseDefaultTypeInternal _SetRateGpsInfoResponse_default_instance_;

inline constexpr SetRateFixedwingMetricsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateFixedwingMetricsResponse::SetRateFixedwingMetricsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateFixedwingMetricsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateFixedwingMetricsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateFixedwingMetricsResponseDefaultTypeInternal() {}
  union {
    SetRateFixedwingMetricsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateFixedwingMetricsResponseDefaultTypeInternal _SetRateFixedwingMetricsResponse_default_instance_;

inline constexpr SetRateDistanceSensorResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateDistanceSensorResponse::SetRateDistanceSensorResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateDistanceSensorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateDistanceSensorResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateDistanceSensorResponseDefaultTypeInternal() {}
  union {
    SetRateDistanceSensorResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateDistanceSensorResponseDefaultTypeInternal _SetRateDistanceSensorResponse_default_instance_;

inline constexpr SetRateCameraAttitudeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateCameraAttitudeResponse::SetRateCameraAttitudeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateCameraAttitudeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateCameraAttitudeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateCameraAttitudeResponseDefaultTypeInternal() {}
  union {
    SetRateCameraAttitudeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateCameraAttitudeResponseDefaultTypeInternal _SetRateCameraAttitudeResponse_default_instance_;

inline constexpr SetRateCameraAttitudeQuaternionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateCameraAttitudeQuaternionResponse::SetRateCameraAttitudeQuaternionResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateCameraAttitudeQuaternionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateCameraAttitudeQuaternionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateCameraAttitudeQuaternionResponseDefaultTypeInternal() {}
  union {
    SetRateCameraAttitudeQuaternionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateCameraAttitudeQuaternionResponseDefaultTypeInternal _SetRateCameraAttitudeQuaternionResponse_default_instance_;

inline constexpr SetRateBatteryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateBatteryResponse::SetRateBatteryResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateBatteryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateBatteryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateBatteryResponseDefaultTypeInternal() {}
  union {
    SetRateBatteryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateBatteryResponseDefaultTypeInternal _SetRateBatteryResponse_default_instance_;

inline constexpr SetRateAttitudeQuaternionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateAttitudeQuaternionResponse::SetRateAttitudeQuaternionResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateAttitudeQuaternionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateAttitudeQuaternionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateAttitudeQuaternionResponseDefaultTypeInternal() {}
  union {
    SetRateAttitudeQuaternionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateAttitudeQuaternionResponseDefaultTypeInternal _SetRateAttitudeQuaternionResponse_default_instance_;

inline constexpr SetRateAttitudeEulerResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateAttitudeEulerResponse::SetRateAttitudeEulerResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateAttitudeEulerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateAttitudeEulerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateAttitudeEulerResponseDefaultTypeInternal() {}
  union {
    SetRateAttitudeEulerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateAttitudeEulerResponseDefaultTypeInternal _SetRateAttitudeEulerResponse_default_instance_;

inline constexpr SetRateAttitudeAngularVelocityBodyResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateAttitudeAngularVelocityBodyResponse::SetRateAttitudeAngularVelocityBodyResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateAttitudeAngularVelocityBodyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateAttitudeAngularVelocityBodyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateAttitudeAngularVelocityBodyResponseDefaultTypeInternal() {}
  union {
    SetRateAttitudeAngularVelocityBodyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateAttitudeAngularVelocityBodyResponseDefaultTypeInternal _SetRateAttitudeAngularVelocityBodyResponse_default_instance_;

inline constexpr SetRateAltitudeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateAltitudeResponse::SetRateAltitudeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateAltitudeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateAltitudeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateAltitudeResponseDefaultTypeInternal() {}
  union {
    SetRateAltitudeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateAltitudeResponseDefaultTypeInternal _SetRateAltitudeResponse_default_instance_;

inline constexpr SetRateActuatorOutputStatusResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateActuatorOutputStatusResponse::SetRateActuatorOutputStatusResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateActuatorOutputStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateActuatorOutputStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateActuatorOutputStatusResponseDefaultTypeInternal() {}
  union {
    SetRateActuatorOutputStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateActuatorOutputStatusResponseDefaultTypeInternal _SetRateActuatorOutputStatusResponse_default_instance_;

inline constexpr SetRateActuatorControlTargetResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRateActuatorControlTargetResponse::SetRateActuatorControlTargetResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetRateActuatorControlTargetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRateActuatorControlTargetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRateActuatorControlTargetResponseDefaultTypeInternal() {}
  union {
    SetRateActuatorControlTargetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRateActuatorControlTargetResponseDefaultTypeInternal _SetRateActuatorControlTargetResponse_default_instance_;

inline constexpr ScaledPressureResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        scaled_pressure_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ScaledPressureResponse::ScaledPressureResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ScaledPressureResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScaledPressureResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScaledPressureResponseDefaultTypeInternal() {}
  union {
    ScaledPressureResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScaledPressureResponseDefaultTypeInternal _ScaledPressureResponse_default_instance_;

inline constexpr RcStatusResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rc_status_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RcStatusResponse::RcStatusResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RcStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RcStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RcStatusResponseDefaultTypeInternal() {}
  union {
    RcStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RcStatusResponseDefaultTypeInternal _RcStatusResponse_default_instance_;

inline constexpr RawGpsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        raw_gps_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RawGpsResponse::RawGpsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RawGpsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawGpsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawGpsResponseDefaultTypeInternal() {}
  union {
    RawGpsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawGpsResponseDefaultTypeInternal _RawGpsResponse_default_instance_;

inline constexpr PositionVelocityNed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        velocity_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PositionVelocityNed::PositionVelocityNed(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PositionVelocityNedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionVelocityNedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionVelocityNedDefaultTypeInternal() {}
  union {
    PositionVelocityNed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionVelocityNedDefaultTypeInternal _PositionVelocityNed_default_instance_;

inline constexpr PositionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PositionResponse::PositionResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PositionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionResponseDefaultTypeInternal() {}
  union {
    PositionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionResponseDefaultTypeInternal _PositionResponse_default_instance_;

inline constexpr Odometry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_body_{nullptr},
        q_{nullptr},
        velocity_body_{nullptr},
        angular_velocity_body_{nullptr},
        pose_covariance_{nullptr},
        velocity_covariance_{nullptr},
        time_usec_{::uint64_t{0u}},
        frame_id_{static_cast< ::mavsdk::rpc::telemetry::Odometry_MavFrame >(0)},
        child_frame_id_{static_cast< ::mavsdk::rpc::telemetry::Odometry_MavFrame >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Odometry::Odometry(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OdometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OdometryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OdometryDefaultTypeInternal() {}
  union {
    Odometry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OdometryDefaultTypeInternal _Odometry_default_instance_;

inline constexpr Imu::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        acceleration_frd_{nullptr},
        angular_velocity_frd_{nullptr},
        magnetic_field_frd_{nullptr},
        timestamp_us_{::uint64_t{0u}},
        temperature_degc_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Imu::Imu(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ImuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuDefaultTypeInternal() {}
  union {
    Imu _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuDefaultTypeInternal _Imu_default_instance_;

inline constexpr HomeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        home_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HomeResponse::HomeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HomeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HomeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HomeResponseDefaultTypeInternal() {}
  union {
    HomeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HomeResponseDefaultTypeInternal _HomeResponse_default_instance_;

inline constexpr HealthResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        health_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HealthResponse::HealthResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthResponseDefaultTypeInternal() {}
  union {
    HealthResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthResponseDefaultTypeInternal _HealthResponse_default_instance_;

inline constexpr HeadingResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        heading_deg_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HeadingResponse::HeadingResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HeadingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeadingResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeadingResponseDefaultTypeInternal() {}
  union {
    HeadingResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeadingResponseDefaultTypeInternal _HeadingResponse_default_instance_;

inline constexpr GroundTruthResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ground_truth_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GroundTruthResponse::GroundTruthResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GroundTruthResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroundTruthResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroundTruthResponseDefaultTypeInternal() {}
  union {
    GroundTruthResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroundTruthResponseDefaultTypeInternal _GroundTruthResponse_default_instance_;

inline constexpr GpsInfoResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gps_info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GpsInfoResponse::GpsInfoResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GpsInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpsInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpsInfoResponseDefaultTypeInternal() {}
  union {
    GpsInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpsInfoResponseDefaultTypeInternal _GpsInfoResponse_default_instance_;

inline constexpr GetGpsGlobalOriginResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_result_{nullptr},
        gps_global_origin_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetGpsGlobalOriginResponse::GetGpsGlobalOriginResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetGpsGlobalOriginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetGpsGlobalOriginResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetGpsGlobalOriginResponseDefaultTypeInternal() {}
  union {
    GetGpsGlobalOriginResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetGpsGlobalOriginResponseDefaultTypeInternal _GetGpsGlobalOriginResponse_default_instance_;

inline constexpr FixedwingMetricsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        fixedwing_metrics_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FixedwingMetricsResponse::FixedwingMetricsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FixedwingMetricsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FixedwingMetricsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FixedwingMetricsResponseDefaultTypeInternal() {}
  union {
    FixedwingMetricsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FixedwingMetricsResponseDefaultTypeInternal _FixedwingMetricsResponse_default_instance_;

inline constexpr DistanceSensor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        orientation_{nullptr},
        minimum_distance_m_{0},
        maximum_distance_m_{0},
        current_distance_m_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DistanceSensor::DistanceSensor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DistanceSensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistanceSensorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistanceSensorDefaultTypeInternal() {}
  union {
    DistanceSensor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistanceSensorDefaultTypeInternal _DistanceSensor_default_instance_;

inline constexpr CameraAttitudeQuaternionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attitude_quaternion_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CameraAttitudeQuaternionResponse::CameraAttitudeQuaternionResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CameraAttitudeQuaternionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraAttitudeQuaternionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraAttitudeQuaternionResponseDefaultTypeInternal() {}
  union {
    CameraAttitudeQuaternionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraAttitudeQuaternionResponseDefaultTypeInternal _CameraAttitudeQuaternionResponse_default_instance_;

inline constexpr CameraAttitudeEulerResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attitude_euler_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CameraAttitudeEulerResponse::CameraAttitudeEulerResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CameraAttitudeEulerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraAttitudeEulerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraAttitudeEulerResponseDefaultTypeInternal() {}
  union {
    CameraAttitudeEulerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraAttitudeEulerResponseDefaultTypeInternal _CameraAttitudeEulerResponse_default_instance_;

inline constexpr BatteryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        battery_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BatteryResponse::BatteryResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BatteryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryResponseDefaultTypeInternal() {}
  union {
    BatteryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryResponseDefaultTypeInternal _BatteryResponse_default_instance_;

inline constexpr AttitudeQuaternionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attitude_quaternion_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AttitudeQuaternionResponse::AttitudeQuaternionResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AttitudeQuaternionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttitudeQuaternionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttitudeQuaternionResponseDefaultTypeInternal() {}
  union {
    AttitudeQuaternionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttitudeQuaternionResponseDefaultTypeInternal _AttitudeQuaternionResponse_default_instance_;

inline constexpr AttitudeEulerResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attitude_euler_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AttitudeEulerResponse::AttitudeEulerResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AttitudeEulerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttitudeEulerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttitudeEulerResponseDefaultTypeInternal() {}
  union {
    AttitudeEulerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttitudeEulerResponseDefaultTypeInternal _AttitudeEulerResponse_default_instance_;

inline constexpr AttitudeAngularVelocityBodyResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attitude_angular_velocity_body_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AttitudeAngularVelocityBodyResponse::AttitudeAngularVelocityBodyResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AttitudeAngularVelocityBodyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttitudeAngularVelocityBodyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttitudeAngularVelocityBodyResponseDefaultTypeInternal() {}
  union {
    AttitudeAngularVelocityBodyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttitudeAngularVelocityBodyResponseDefaultTypeInternal _AttitudeAngularVelocityBodyResponse_default_instance_;

inline constexpr AltitudeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        altitude_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AltitudeResponse::AltitudeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AltitudeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AltitudeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AltitudeResponseDefaultTypeInternal() {}
  union {
    AltitudeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AltitudeResponseDefaultTypeInternal _AltitudeResponse_default_instance_;

inline constexpr ActuatorOutputStatusResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        actuator_output_status_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ActuatorOutputStatusResponse::ActuatorOutputStatusResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ActuatorOutputStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActuatorOutputStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActuatorOutputStatusResponseDefaultTypeInternal() {}
  union {
    ActuatorOutputStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActuatorOutputStatusResponseDefaultTypeInternal _ActuatorOutputStatusResponse_default_instance_;

inline constexpr ActuatorControlTargetResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        actuator_control_target_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ActuatorControlTargetResponse::ActuatorControlTargetResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ActuatorControlTargetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActuatorControlTargetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActuatorControlTargetResponseDefaultTypeInternal() {}
  union {
    ActuatorControlTargetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActuatorControlTargetResponseDefaultTypeInternal _ActuatorControlTargetResponse_default_instance_;

inline constexpr ScaledImuResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        imu_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ScaledImuResponse::ScaledImuResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ScaledImuResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScaledImuResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScaledImuResponseDefaultTypeInternal() {}
  union {
    ScaledImuResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScaledImuResponseDefaultTypeInternal _ScaledImuResponse_default_instance_;

inline constexpr RawImuResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        imu_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RawImuResponse::RawImuResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RawImuResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawImuResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawImuResponseDefaultTypeInternal() {}
  union {
    RawImuResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawImuResponseDefaultTypeInternal _RawImuResponse_default_instance_;

inline constexpr PositionVelocityNedResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_velocity_ned_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PositionVelocityNedResponse::PositionVelocityNedResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PositionVelocityNedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionVelocityNedResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionVelocityNedResponseDefaultTypeInternal() {}
  union {
    PositionVelocityNedResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionVelocityNedResponseDefaultTypeInternal _PositionVelocityNedResponse_default_instance_;

inline constexpr OdometryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        odometry_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR OdometryResponse::OdometryResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OdometryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OdometryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OdometryResponseDefaultTypeInternal() {}
  union {
    OdometryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OdometryResponseDefaultTypeInternal _OdometryResponse_default_instance_;

inline constexpr ImuResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        imu_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ImuResponse::ImuResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ImuResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuResponseDefaultTypeInternal() {}
  union {
    ImuResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuResponseDefaultTypeInternal _ImuResponse_default_instance_;

inline constexpr DistanceSensorResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        distance_sensor_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DistanceSensorResponse::DistanceSensorResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DistanceSensorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistanceSensorResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistanceSensorResponseDefaultTypeInternal() {}
  union {
    DistanceSensorResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistanceSensorResponseDefaultTypeInternal _DistanceSensorResponse_default_instance_;
}  // namespace telemetry
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_telemetry_2ftelemetry_2eproto[154];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[7];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_telemetry_2ftelemetry_2eproto = nullptr;
const ::uint32_t TableStruct_telemetry_2ftelemetry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribePositionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionResponse, _impl_.position_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeHomeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HomeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HomeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HomeResponse, _impl_.home_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeInAirRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::InAirResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::InAirResponse, _impl_.is_in_air_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeLandedStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::LandedStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::LandedStateResponse, _impl_.landed_state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeArmedRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ArmedResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ArmedResponse, _impl_.is_armed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeVtolStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VtolStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VtolStateResponse, _impl_.vtol_state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeQuaternionResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeQuaternionResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeQuaternionResponse, _impl_.attitude_quaternion_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeEulerResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeEulerResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeEulerResponse, _impl_.attitude_euler_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse, _impl_.attitude_angular_velocity_body_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse, _impl_.attitude_quaternion_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse, _impl_.attitude_euler_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeVelocityNedRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNedResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNedResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNedResponse, _impl_.velocity_ned_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfoResponse, _impl_.gps_info_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeRawGpsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGpsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGpsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGpsResponse, _impl_.raw_gps_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeBatteryRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::BatteryResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::BatteryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::BatteryResponse, _impl_.battery_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeFlightModeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FlightModeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FlightModeResponse, _impl_.flight_mode_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeHealthRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthResponse, _impl_.health_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeRcStatusRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatusResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatusResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatusResponse, _impl_.rc_status_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeStatusTextRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusTextResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusTextResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusTextResponse, _impl_.status_text_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTargetResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTargetResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTargetResponse, _impl_.actuator_control_target_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse, _impl_.actuator_output_status_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeOdometryRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::OdometryResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::OdometryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::OdometryResponse, _impl_.odometry_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNedResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNedResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNedResponse, _impl_.position_velocity_ned_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruthResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruthResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruthResponse, _impl_.ground_truth_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetricsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetricsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetricsResponse, _impl_.fixedwing_metrics_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeImuRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ImuResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ImuResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ImuResponse, _impl_.imu_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeScaledImuRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledImuResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledImuResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledImuResponse, _impl_.imu_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeRawImuRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawImuResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawImuResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawImuResponse, _impl_.imu_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthAllOkResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthAllOkResponse, _impl_.is_health_all_ok_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::UnixEpochTimeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::UnixEpochTimeResponse, _impl_.time_us_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeDistanceSensorRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensorResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensorResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensorResponse, _impl_.distance_sensor_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeScaledPressureRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressureResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressureResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressureResponse, _impl_.scaled_pressure_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeHeadingRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HeadingResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HeadingResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HeadingResponse, _impl_.heading_deg_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeAltitudeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AltitudeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AltitudeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AltitudeResponse, _impl_.altitude_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVtolStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVtolStateRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVtolStateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVtolStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVtolStateResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeEulerRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeEulerRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeEulerResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeEulerResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeEulerResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeQuaternionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeQuaternionRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeQuaternionResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeQuaternionResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeQuaternionResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVelocityNedRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVelocityNedRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVelocityNedResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVelocityNedResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVelocityNedResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawGpsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawGpsRequest, _impl_.rate_hz_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateScaledImuRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateScaledImuRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateScaledImuResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateScaledImuResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateScaledImuResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawImuRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawImuRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawImuResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawImuResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawImuResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateDistanceSensorRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateDistanceSensorRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GetGpsGlobalOriginRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse, _impl_.telemetry_result_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse, _impl_.gps_global_origin_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAltitudeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAltitudeRequest, _impl_.rate_hz_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAltitudeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAltitudeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAltitudeResponse, _impl_.telemetry_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, _impl_.latitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, _impl_.longitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, _impl_.absolute_altitude_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, _impl_.relative_altitude_m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Heading, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Heading, _impl_.heading_deg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, _impl_.w_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, _impl_.timestamp_us_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, _impl_.roll_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, _impl_.pitch_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, _impl_.yaw_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, _impl_.timestamp_us_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, _impl_.roll_rad_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, _impl_.pitch_rad_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, _impl_.yaw_rad_s_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfo, _impl_.num_satellites_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfo, _impl_.fix_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.timestamp_us_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.latitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.longitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.absolute_altitude_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.hdop_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.vdop_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.velocity_m_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.cog_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.altitude_ellipsoid_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.horizontal_uncertainty_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.vertical_uncertainty_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.velocity_uncertainty_m_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.heading_uncertainty_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _impl_.yaw_deg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, _impl_.temperature_degc_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, _impl_.voltage_v_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, _impl_.current_battery_a_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, _impl_.capacity_consumed_ah_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, _impl_.remaining_percent_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, _impl_.is_gyrometer_calibration_ok_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, _impl_.is_accelerometer_calibration_ok_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, _impl_.is_magnetometer_calibration_ok_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, _impl_.is_local_position_ok_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, _impl_.is_global_position_ok_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, _impl_.is_home_position_ok_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, _impl_.is_armable_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, _impl_.was_available_once_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, _impl_.is_available_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, _impl_.signal_strength_percent_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusText, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusText, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusText, _impl_.text_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTarget, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTarget, _impl_.group_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTarget, _impl_.controls_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatus, _impl_.active_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatus, _impl_.actuator_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Covariance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Covariance, _impl_.covariance_matrix_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, _impl_.x_m_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, _impl_.y_m_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, _impl_.z_m_s_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, _impl_.x_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, _impl_.y_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, _impl_.z_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _impl_.time_usec_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _impl_.frame_id_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _impl_.child_frame_id_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _impl_.position_body_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _impl_.q_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _impl_.velocity_body_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _impl_.angular_velocity_body_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _impl_.pose_covariance_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _impl_.velocity_covariance_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensor, _impl_.minimum_distance_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensor, _impl_.maximum_distance_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensor, _impl_.current_distance_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensor, _impl_.orientation_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, _impl_.timestamp_us_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, _impl_.absolute_pressure_hpa_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, _impl_.differential_pressure_hpa_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, _impl_.temperature_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, _impl_.differential_pressure_temperature_deg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, _impl_.north_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, _impl_.east_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, _impl_.down_m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, _impl_.north_m_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, _impl_.east_m_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, _impl_.down_m_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNed, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNed, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNed, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNed, _impl_.velocity_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, _impl_.latitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, _impl_.longitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, _impl_.absolute_altitude_m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, _impl_.airspeed_m_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, _impl_.throttle_percentage_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, _impl_.climb_rate_m_s_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, _impl_.forward_m_s2_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, _impl_.right_m_s2_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, _impl_.down_m_s2_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, _impl_.forward_rad_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, _impl_.right_rad_s_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, _impl_.down_rad_s_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, _impl_.forward_gauss_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, _impl_.right_gauss_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, _impl_.down_gauss_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, _impl_.acceleration_frd_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, _impl_.angular_velocity_frd_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, _impl_.magnetic_field_frd_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, _impl_.temperature_degc_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, _impl_.timestamp_us_),
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsGlobalOrigin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsGlobalOrigin, _impl_.latitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsGlobalOrigin, _impl_.longitude_deg_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsGlobalOrigin, _impl_.altitude_m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Altitude, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Altitude, _impl_.altitude_monotonic_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Altitude, _impl_.altitude_amsl_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Altitude, _impl_.altitude_local_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Altitude, _impl_.altitude_relative_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Altitude, _impl_.altitude_terrain_m_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Altitude, _impl_.bottom_clearance_m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::TelemetryResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::TelemetryResult, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::TelemetryResult, _impl_.result_str_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribePositionRequest)},
        {8, 17, -1, sizeof(::mavsdk::rpc::telemetry::PositionResponse)},
        {18, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeHomeRequest)},
        {26, 35, -1, sizeof(::mavsdk::rpc::telemetry::HomeResponse)},
        {36, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeInAirRequest)},
        {44, -1, -1, sizeof(::mavsdk::rpc::telemetry::InAirResponse)},
        {53, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeLandedStateRequest)},
        {61, -1, -1, sizeof(::mavsdk::rpc::telemetry::LandedStateResponse)},
        {70, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeArmedRequest)},
        {78, -1, -1, sizeof(::mavsdk::rpc::telemetry::ArmedResponse)},
        {87, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeVtolStateRequest)},
        {95, -1, -1, sizeof(::mavsdk::rpc::telemetry::VtolStateResponse)},
        {104, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest)},
        {112, 121, -1, sizeof(::mavsdk::rpc::telemetry::AttitudeQuaternionResponse)},
        {122, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest)},
        {130, 139, -1, sizeof(::mavsdk::rpc::telemetry::AttitudeEulerResponse)},
        {140, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest)},
        {148, 157, -1, sizeof(::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse)},
        {158, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest)},
        {166, 175, -1, sizeof(::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse)},
        {176, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest)},
        {184, 193, -1, sizeof(::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse)},
        {194, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeVelocityNedRequest)},
        {202, 211, -1, sizeof(::mavsdk::rpc::telemetry::VelocityNedResponse)},
        {212, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest)},
        {220, 229, -1, sizeof(::mavsdk::rpc::telemetry::GpsInfoResponse)},
        {230, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeRawGpsRequest)},
        {238, 247, -1, sizeof(::mavsdk::rpc::telemetry::RawGpsResponse)},
        {248, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeBatteryRequest)},
        {256, 265, -1, sizeof(::mavsdk::rpc::telemetry::BatteryResponse)},
        {266, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeFlightModeRequest)},
        {274, -1, -1, sizeof(::mavsdk::rpc::telemetry::FlightModeResponse)},
        {283, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeHealthRequest)},
        {291, 300, -1, sizeof(::mavsdk::rpc::telemetry::HealthResponse)},
        {301, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeRcStatusRequest)},
        {309, 318, -1, sizeof(::mavsdk::rpc::telemetry::RcStatusResponse)},
        {319, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeStatusTextRequest)},
        {327, 336, -1, sizeof(::mavsdk::rpc::telemetry::StatusTextResponse)},
        {337, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest)},
        {345, 354, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorControlTargetResponse)},
        {355, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest)},
        {363, 372, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse)},
        {373, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeOdometryRequest)},
        {381, 390, -1, sizeof(::mavsdk::rpc::telemetry::OdometryResponse)},
        {391, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest)},
        {399, 408, -1, sizeof(::mavsdk::rpc::telemetry::PositionVelocityNedResponse)},
        {409, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest)},
        {417, 426, -1, sizeof(::mavsdk::rpc::telemetry::GroundTruthResponse)},
        {427, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest)},
        {435, 444, -1, sizeof(::mavsdk::rpc::telemetry::FixedwingMetricsResponse)},
        {445, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeImuRequest)},
        {453, 462, -1, sizeof(::mavsdk::rpc::telemetry::ImuResponse)},
        {463, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeScaledImuRequest)},
        {471, 480, -1, sizeof(::mavsdk::rpc::telemetry::ScaledImuResponse)},
        {481, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeRawImuRequest)},
        {489, 498, -1, sizeof(::mavsdk::rpc::telemetry::RawImuResponse)},
        {499, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest)},
        {507, -1, -1, sizeof(::mavsdk::rpc::telemetry::HealthAllOkResponse)},
        {516, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest)},
        {524, -1, -1, sizeof(::mavsdk::rpc::telemetry::UnixEpochTimeResponse)},
        {533, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeDistanceSensorRequest)},
        {541, 550, -1, sizeof(::mavsdk::rpc::telemetry::DistanceSensorResponse)},
        {551, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeScaledPressureRequest)},
        {559, 568, -1, sizeof(::mavsdk::rpc::telemetry::ScaledPressureResponse)},
        {569, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeHeadingRequest)},
        {577, 586, -1, sizeof(::mavsdk::rpc::telemetry::HeadingResponse)},
        {587, -1, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeAltitudeRequest)},
        {595, 604, -1, sizeof(::mavsdk::rpc::telemetry::AltitudeResponse)},
        {605, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionRequest)},
        {614, 623, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionResponse)},
        {624, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateHomeRequest)},
        {633, 642, -1, sizeof(::mavsdk::rpc::telemetry::SetRateHomeResponse)},
        {643, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateInAirRequest)},
        {652, 661, -1, sizeof(::mavsdk::rpc::telemetry::SetRateInAirResponse)},
        {662, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateLandedStateRequest)},
        {671, 680, -1, sizeof(::mavsdk::rpc::telemetry::SetRateLandedStateResponse)},
        {681, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateVtolStateRequest)},
        {690, 699, -1, sizeof(::mavsdk::rpc::telemetry::SetRateVtolStateResponse)},
        {700, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeEulerRequest)},
        {709, 718, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeEulerResponse)},
        {719, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeQuaternionRequest)},
        {728, 737, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeQuaternionResponse)},
        {738, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest)},
        {747, 756, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse)},
        {757, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest)},
        {766, 775, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse)},
        {776, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest)},
        {785, 794, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse)},
        {795, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateVelocityNedRequest)},
        {804, 813, -1, sizeof(::mavsdk::rpc::telemetry::SetRateVelocityNedResponse)},
        {814, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGpsInfoRequest)},
        {823, 832, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGpsInfoResponse)},
        {833, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRawGpsRequest)},
        {842, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateBatteryRequest)},
        {851, 860, -1, sizeof(::mavsdk::rpc::telemetry::SetRateBatteryResponse)},
        {861, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRcStatusRequest)},
        {870, 879, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRcStatusResponse)},
        {880, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest)},
        {889, 898, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse)},
        {899, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest)},
        {908, 917, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse)},
        {918, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateOdometryRequest)},
        {927, 936, -1, sizeof(::mavsdk::rpc::telemetry::SetRateOdometryResponse)},
        {937, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest)},
        {946, 955, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse)},
        {956, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGroundTruthRequest)},
        {965, 974, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGroundTruthResponse)},
        {975, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest)},
        {984, 993, -1, sizeof(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse)},
        {994, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateImuRequest)},
        {1003, 1012, -1, sizeof(::mavsdk::rpc::telemetry::SetRateImuResponse)},
        {1013, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateScaledImuRequest)},
        {1022, 1031, -1, sizeof(::mavsdk::rpc::telemetry::SetRateScaledImuResponse)},
        {1032, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRawImuRequest)},
        {1041, 1050, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRawImuResponse)},
        {1051, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest)},
        {1060, 1069, -1, sizeof(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse)},
        {1070, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateDistanceSensorRequest)},
        {1079, 1088, -1, sizeof(::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse)},
        {1089, -1, -1, sizeof(::mavsdk::rpc::telemetry::GetGpsGlobalOriginRequest)},
        {1097, 1107, -1, sizeof(::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse)},
        {1109, -1, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAltitudeRequest)},
        {1118, 1127, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAltitudeResponse)},
        {1128, -1, -1, sizeof(::mavsdk::rpc::telemetry::Position)},
        {1140, -1, -1, sizeof(::mavsdk::rpc::telemetry::Heading)},
        {1149, -1, -1, sizeof(::mavsdk::rpc::telemetry::Quaternion)},
        {1162, -1, -1, sizeof(::mavsdk::rpc::telemetry::EulerAngle)},
        {1174, -1, -1, sizeof(::mavsdk::rpc::telemetry::AngularVelocityBody)},
        {1185, -1, -1, sizeof(::mavsdk::rpc::telemetry::GpsInfo)},
        {1195, -1, -1, sizeof(::mavsdk::rpc::telemetry::RawGps)},
        {1217, -1, -1, sizeof(::mavsdk::rpc::telemetry::Battery)},
        {1231, -1, -1, sizeof(::mavsdk::rpc::telemetry::Health)},
        {1246, -1, -1, sizeof(::mavsdk::rpc::telemetry::RcStatus)},
        {1257, -1, -1, sizeof(::mavsdk::rpc::telemetry::StatusText)},
        {1267, -1, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorControlTarget)},
        {1277, -1, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorOutputStatus)},
        {1287, -1, -1, sizeof(::mavsdk::rpc::telemetry::Covariance)},
        {1296, -1, -1, sizeof(::mavsdk::rpc::telemetry::VelocityBody)},
        {1307, -1, -1, sizeof(::mavsdk::rpc::telemetry::PositionBody)},
        {1318, 1335, -1, sizeof(::mavsdk::rpc::telemetry::Odometry)},
        {1344, 1356, -1, sizeof(::mavsdk::rpc::telemetry::DistanceSensor)},
        {1360, -1, -1, sizeof(::mavsdk::rpc::telemetry::ScaledPressure)},
        {1373, -1, -1, sizeof(::mavsdk::rpc::telemetry::PositionNed)},
        {1384, -1, -1, sizeof(::mavsdk::rpc::telemetry::VelocityNed)},
        {1395, 1405, -1, sizeof(::mavsdk::rpc::telemetry::PositionVelocityNed)},
        {1407, -1, -1, sizeof(::mavsdk::rpc::telemetry::GroundTruth)},
        {1418, -1, -1, sizeof(::mavsdk::rpc::telemetry::FixedwingMetrics)},
        {1429, -1, -1, sizeof(::mavsdk::rpc::telemetry::AccelerationFrd)},
        {1440, -1, -1, sizeof(::mavsdk::rpc::telemetry::AngularVelocityFrd)},
        {1451, -1, -1, sizeof(::mavsdk::rpc::telemetry::MagneticFieldFrd)},
        {1462, 1475, -1, sizeof(::mavsdk::rpc::telemetry::Imu)},
        {1480, -1, -1, sizeof(::mavsdk::rpc::telemetry::GpsGlobalOrigin)},
        {1491, -1, -1, sizeof(::mavsdk::rpc::telemetry::Altitude)},
        {1505, -1, -1, sizeof(::mavsdk::rpc::telemetry::TelemetryResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mavsdk::rpc::telemetry::_SubscribePositionRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_PositionResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeHomeRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_HomeResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeInAirRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_InAirResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeLandedStateRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_LandedStateResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeArmedRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_ArmedResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeVtolStateRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_VtolStateResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeAttitudeQuaternionRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_AttitudeQuaternionResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeAttitudeEulerRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_AttitudeEulerResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeAttitudeAngularVelocityBodyRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_AttitudeAngularVelocityBodyResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeCameraAttitudeQuaternionRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_CameraAttitudeQuaternionResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeCameraAttitudeEulerRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_CameraAttitudeEulerResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeVelocityNedRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_VelocityNedResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeGpsInfoRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_GpsInfoResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeRawGpsRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_RawGpsResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeBatteryRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_BatteryResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeFlightModeRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_FlightModeResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeHealthRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_HealthResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeRcStatusRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_RcStatusResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeStatusTextRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_StatusTextResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeActuatorControlTargetRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_ActuatorControlTargetResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeActuatorOutputStatusRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_ActuatorOutputStatusResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeOdometryRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_OdometryResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribePositionVelocityNedRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_PositionVelocityNedResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeGroundTruthRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_GroundTruthResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeFixedwingMetricsRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_FixedwingMetricsResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeImuRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_ImuResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeScaledImuRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_ScaledImuResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeRawImuRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_RawImuResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeHealthAllOkRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_HealthAllOkResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeUnixEpochTimeRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_UnixEpochTimeResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeDistanceSensorRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_DistanceSensorResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeScaledPressureRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_ScaledPressureResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeHeadingRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_HeadingResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SubscribeAltitudeRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_AltitudeResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRatePositionRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRatePositionResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateHomeRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateHomeResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateInAirRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateInAirResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateLandedStateRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateLandedStateResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateVtolStateRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateVtolStateResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateAttitudeEulerRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateAttitudeEulerResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateAttitudeQuaternionRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateAttitudeQuaternionResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateAttitudeAngularVelocityBodyRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateAttitudeAngularVelocityBodyResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateCameraAttitudeQuaternionRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateCameraAttitudeQuaternionResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateCameraAttitudeRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateCameraAttitudeResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateVelocityNedRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateVelocityNedResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateGpsInfoRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateGpsInfoResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateRawGpsRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateBatteryRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateBatteryResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateRcStatusRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateRcStatusResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateActuatorControlTargetRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateActuatorControlTargetResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateActuatorOutputStatusRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateActuatorOutputStatusResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateOdometryRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateOdometryResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRatePositionVelocityNedRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRatePositionVelocityNedResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateGroundTruthRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateGroundTruthResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateFixedwingMetricsRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateFixedwingMetricsResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateImuRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateImuResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateScaledImuRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateScaledImuResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateRawImuRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateRawImuResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateUnixEpochTimeRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateUnixEpochTimeResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateDistanceSensorRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateDistanceSensorResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_GetGpsGlobalOriginRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_GetGpsGlobalOriginResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateAltitudeRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_SetRateAltitudeResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_Position_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_Heading_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_Quaternion_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_EulerAngle_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_AngularVelocityBody_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_GpsInfo_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_RawGps_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_Battery_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_Health_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_RcStatus_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_StatusText_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_ActuatorControlTarget_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_ActuatorOutputStatus_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_Covariance_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_VelocityBody_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_PositionBody_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_Odometry_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_DistanceSensor_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_ScaledPressure_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_PositionNed_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_VelocityNed_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_PositionVelocityNed_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_GroundTruth_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_FixedwingMetrics_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_AccelerationFrd_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_AngularVelocityFrd_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_MagneticFieldFrd_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_Imu_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_GpsGlobalOrigin_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_Altitude_default_instance_._instance,
    &::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_._instance,
};
const char descriptor_table_protodef_telemetry_2ftelemetry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\031telemetry/telemetry.proto\022\024mavsdk.rpc."
    "telemetry\032\024mavsdk_options.proto\"\032\n\030Subsc"
    "ribePositionRequest\"D\n\020PositionResponse\022"
    "0\n\010position\030\001 \001(\0132\036.mavsdk.rpc.telemetry"
    ".Position\"\026\n\024SubscribeHomeRequest\"<\n\014Hom"
    "eResponse\022,\n\004home\030\001 \001(\0132\036.mavsdk.rpc.tel"
    "emetry.Position\"\027\n\025SubscribeInAirRequest"
    "\"\"\n\rInAirResponse\022\021\n\tis_in_air\030\001 \001(\010\"\035\n\033"
    "SubscribeLandedStateRequest\"N\n\023LandedSta"
    "teResponse\0227\n\014landed_state\030\001 \001(\0162!.mavsd"
    "k.rpc.telemetry.LandedState\"\027\n\025Subscribe"
    "ArmedRequest\"!\n\rArmedResponse\022\020\n\010is_arme"
    "d\030\001 \001(\010\"\033\n\031SubscribeVtolStateRequest\"H\n\021"
    "VtolStateResponse\0223\n\nvtol_state\030\001 \001(\0162\037."
    "mavsdk.rpc.telemetry.VtolState\"$\n\"Subscr"
    "ibeAttitudeQuaternionRequest\"[\n\032Attitude"
    "QuaternionResponse\022=\n\023attitude_quaternio"
    "n\030\001 \001(\0132 .mavsdk.rpc.telemetry.Quaternio"
    "n\"\037\n\035SubscribeAttitudeEulerRequest\"Q\n\025At"
    "titudeEulerResponse\0228\n\016attitude_euler\030\001 "
    "\001(\0132 .mavsdk.rpc.telemetry.EulerAngle\"-\n"
    "+SubscribeAttitudeAngularVelocityBodyReq"
    "uest\"x\n#AttitudeAngularVelocityBodyRespo"
    "nse\022Q\n\036attitude_angular_velocity_body\030\001 "
    "\001(\0132).mavsdk.rpc.telemetry.AngularVeloci"
    "tyBody\"*\n(SubscribeCameraAttitudeQuatern"
    "ionRequest\"a\n CameraAttitudeQuaternionRe"
    "sponse\022=\n\023attitude_quaternion\030\001 \001(\0132 .ma"
    "vsdk.rpc.telemetry.Quaternion\"%\n#Subscri"
    "beCameraAttitudeEulerRequest\"W\n\033CameraAt"
    "titudeEulerResponse\0228\n\016attitude_euler\030\001 "
    "\001(\0132 .mavsdk.rpc.telemetry.EulerAngle\"\035\n"
    "\033SubscribeVelocityNedRequest\"N\n\023Velocity"
    "NedResponse\0227\n\014velocity_ned\030\001 \001(\0132!.mavs"
    "dk.rpc.telemetry.VelocityNed\"\031\n\027Subscrib"
    "eGpsInfoRequest\"B\n\017GpsInfoResponse\022/\n\010gp"
    "s_info\030\001 \001(\0132\035.mavsdk.rpc.telemetry.GpsI"
    "nfo\"\030\n\026SubscribeRawGpsRequest\"\?\n\016RawGpsR"
    "esponse\022-\n\007raw_gps\030\001 \001(\0132\034.mavsdk.rpc.te"
    "lemetry.RawGps\"\031\n\027SubscribeBatteryReques"
    "t\"A\n\017BatteryResponse\022.\n\007battery\030\001 \001(\0132\035."
    "mavsdk.rpc.telemetry.Battery\"\034\n\032Subscrib"
    "eFlightModeRequest\"K\n\022FlightModeResponse"
    "\0225\n\013flight_mode\030\001 \001(\0162 .mavsdk.rpc.telem"
    "etry.FlightMode\"\030\n\026SubscribeHealthReques"
    "t\">\n\016HealthResponse\022,\n\006health\030\001 \001(\0132\034.ma"
    "vsdk.rpc.telemetry.Health\"\032\n\030SubscribeRc"
    "StatusRequest\"E\n\020RcStatusResponse\0221\n\trc_"
    "status\030\001 \001(\0132\036.mavsdk.rpc.telemetry.RcSt"
    "atus\"\034\n\032SubscribeStatusTextRequest\"K\n\022St"
    "atusTextResponse\0225\n\013status_text\030\001 \001(\0132 ."
    "mavsdk.rpc.telemetry.StatusText\"\'\n%Subsc"
    "ribeActuatorControlTargetRequest\"m\n\035Actu"
    "atorControlTargetResponse\022L\n\027actuator_co"
    "ntrol_target\030\001 \001(\0132+.mavsdk.rpc.telemetr"
    "y.ActuatorControlTarget\"&\n$SubscribeActu"
    "atorOutputStatusRequest\"j\n\034ActuatorOutpu"
    "tStatusResponse\022J\n\026actuator_output_statu"
    "s\030\001 \001(\0132*.mavsdk.rpc.telemetry.ActuatorO"
    "utputStatus\"\032\n\030SubscribeOdometryRequest\""
    "D\n\020OdometryResponse\0220\n\010odometry\030\001 \001(\0132\036."
    "mavsdk.rpc.telemetry.Odometry\"%\n#Subscri"
    "bePositionVelocityNedRequest\"g\n\033Position"
    "VelocityNedResponse\022H\n\025position_velocity"
    "_ned\030\001 \001(\0132).mavsdk.rpc.telemetry.Positi"
    "onVelocityNed\"\035\n\033SubscribeGroundTruthReq"
    "uest\"N\n\023GroundTruthResponse\0227\n\014ground_tr"
    "uth\030\001 \001(\0132!.mavsdk.rpc.telemetry.GroundT"
    "ruth\"\"\n SubscribeFixedwingMetricsRequest"
    "\"]\n\030FixedwingMetricsResponse\022A\n\021fixedwin"
    "g_metrics\030\001 \001(\0132&.mavsdk.rpc.telemetry.F"
    "ixedwingMetrics\"\025\n\023SubscribeImuRequest\"5"
    "\n\013ImuResponse\022&\n\003imu\030\001 \001(\0132\031.mavsdk.rpc."
    "telemetry.Imu\"\033\n\031SubscribeScaledImuReque"
    "st\";\n\021ScaledImuResponse\022&\n\003imu\030\001 \001(\0132\031.m"
    "avsdk.rpc.telemetry.Imu\"\030\n\026SubscribeRawI"
    "muRequest\"8\n\016RawImuResponse\022&\n\003imu\030\001 \001(\013"
    "2\031.mavsdk.rpc.telemetry.Imu\"\035\n\033Subscribe"
    "HealthAllOkRequest\"/\n\023HealthAllOkRespons"
    "e\022\030\n\020is_health_all_ok\030\001 \001(\010\"\037\n\035Subscribe"
    "UnixEpochTimeRequest\"(\n\025UnixEpochTimeRes"
    "ponse\022\017\n\007time_us\030\001 \001(\004\" \n\036SubscribeDista"
    "nceSensorRequest\"W\n\026DistanceSensorRespon"
    "se\022=\n\017distance_sensor\030\001 \001(\0132$.mavsdk.rpc"
    ".telemetry.DistanceSensor\" \n\036SubscribeSc"
    "aledPressureRequest\"W\n\026ScaledPressureRes"
    "ponse\022=\n\017scaled_pressure\030\001 \001(\0132$.mavsdk."
    "rpc.telemetry.ScaledPressure\"\031\n\027Subscrib"
    "eHeadingRequest\"E\n\017HeadingResponse\0222\n\013he"
    "ading_deg\030\001 \001(\0132\035.mavsdk.rpc.telemetry.H"
    "eading\"\032\n\030SubscribeAltitudeRequest\"D\n\020Al"
    "titudeResponse\0220\n\010altitude\030\001 \001(\0132\036.mavsd"
    "k.rpc.telemetry.Altitude\")\n\026SetRatePosit"
    "ionRequest\022\017\n\007rate_hz\030\001 \001(\001\"Z\n\027SetRatePo"
    "sitionResponse\022\?\n\020telemetry_result\030\001 \001(\013"
    "2%.mavsdk.rpc.telemetry.TelemetryResult\""
    "%\n\022SetRateHomeRequest\022\017\n\007rate_hz\030\001 \001(\001\"V"
    "\n\023SetRateHomeResponse\022\?\n\020telemetry_resul"
    "t\030\001 \001(\0132%.mavsdk.rpc.telemetry.Telemetry"
    "Result\"&\n\023SetRateInAirRequest\022\017\n\007rate_hz"
    "\030\001 \001(\001\"W\n\024SetRateInAirResponse\022\?\n\020teleme"
    "try_result\030\001 \001(\0132%.mavsdk.rpc.telemetry."
    "TelemetryResult\",\n\031SetRateLandedStateReq"
    "uest\022\017\n\007rate_hz\030\001 \001(\001\"]\n\032SetRateLandedSt"
    "ateResponse\022\?\n\020telemetry_result\030\001 \001(\0132%."
    "mavsdk.rpc.telemetry.TelemetryResult\"*\n\027"
    "SetRateVtolStateRequest\022\017\n\007rate_hz\030\001 \001(\001"
    "\"[\n\030SetRateVtolStateResponse\022\?\n\020telemetr"
    "y_result\030\001 \001(\0132%.mavsdk.rpc.telemetry.Te"
    "lemetryResult\".\n\033SetRateAttitudeEulerReq"
    "uest\022\017\n\007rate_hz\030\001 \001(\001\"_\n\034SetRateAttitude"
    "EulerResponse\022\?\n\020telemetry_result\030\001 \001(\0132"
    "%.mavsdk.rpc.telemetry.TelemetryResult\"3"
    "\n SetRateAttitudeQuaternionRequest\022\017\n\007ra"
    "te_hz\030\001 \001(\001\"d\n!SetRateAttitudeQuaternion"
    "Response\022\?\n\020telemetry_result\030\001 \001(\0132%.mav"
    "sdk.rpc.telemetry.TelemetryResult\"<\n)Set"
    "RateAttitudeAngularVelocityBodyRequest\022\017"
    "\n\007rate_hz\030\001 \001(\001\"m\n*SetRateAttitudeAngula"
    "rVelocityBodyResponse\022\?\n\020telemetry_resul"
    "t\030\001 \001(\0132%.mavsdk.rpc.telemetry.Telemetry"
    "Result\"9\n&SetRateCameraAttitudeQuaternio"
    "nRequest\022\017\n\007rate_hz\030\001 \001(\001\"j\n\'SetRateCame"
    "raAttitudeQuaternionResponse\022\?\n\020telemetr"
    "y_result\030\001 \001(\0132%.mavsdk.rpc.telemetry.Te"
    "lemetryResult\"/\n\034SetRateCameraAttitudeRe"
    "quest\022\017\n\007rate_hz\030\001 \001(\001\"`\n\035SetRateCameraA"
    "ttitudeResponse\022\?\n\020telemetry_result\030\001 \001("
    "\0132%.mavsdk.rpc.telemetry.TelemetryResult"
    "\",\n\031SetRateVelocityNedRequest\022\017\n\007rate_hz"
    "\030\001 \001(\001\"]\n\032SetRateVelocityNedResponse\022\?\n\020"
    "telemetry_result\030\001 \001(\0132%.mavsdk.rpc.tele"
    "metry.TelemetryResult\"(\n\025SetRateGpsInfoR"
    "equest\022\017\n\007rate_hz\030\001 \001(\001\"Y\n\026SetRateGpsInf"
    "oResponse\022\?\n\020telemetry_result\030\001 \001(\0132%.ma"
    "vsdk.rpc.telemetry.TelemetryResult\"\'\n\024Se"
    "tRateRawGpsRequest\022\017\n\007rate_hz\030\001 \001(\001\"(\n\025S"
    "etRateBatteryRequest\022\017\n\007rate_hz\030\001 \001(\001\"Y\n"
    "\026SetRateBatteryResponse\022\?\n\020telemetry_res"
    "ult\030\001 \001(\0132%.mavsdk.rpc.telemetry.Telemet"
    "ryResult\")\n\026SetRateRcStatusRequest\022\017\n\007ra"
    "te_hz\030\001 \001(\001\"Z\n\027SetRateRcStatusResponse\022\?"
    "\n\020telemetry_result\030\001 \001(\0132%.mavsdk.rpc.te"
    "lemetry.TelemetryResult\"6\n#SetRateActuat"
    "orControlTargetRequest\022\017\n\007rate_hz\030\001 \001(\001\""
    "g\n$SetRateActuatorControlTargetResponse\022"
    "\?\n\020telemetry_result\030\001 \001(\0132%.mavsdk.rpc.t"
    "elemetry.TelemetryResult\"5\n\"SetRateActua"
    "torOutputStatusRequest\022\017\n\007rate_hz\030\001 \001(\001\""
    "f\n#SetRateActuatorOutputStatusResponse\022\?"
    "\n\020telemetry_result\030\001 \001(\0132%.mavsdk.rpc.te"
    "lemetry.TelemetryResult\")\n\026SetRateOdomet"
    "ryRequest\022\017\n\007rate_hz\030\001 \001(\001\"Z\n\027SetRateOdo"
    "metryResponse\022\?\n\020telemetry_result\030\001 \001(\0132"
    "%.mavsdk.rpc.telemetry.TelemetryResult\"4"
    "\n!SetRatePositionVelocityNedRequest\022\017\n\007r"
    "ate_hz\030\001 \001(\001\"e\n\"SetRatePositionVelocityN"
    "edResponse\022\?\n\020telemetry_result\030\001 \001(\0132%.m"
    "avsdk.rpc.telemetry.TelemetryResult\",\n\031S"
    "etRateGroundTruthRequest\022\017\n\007rate_hz\030\001 \001("
    "\001\"]\n\032SetRateGroundTruthResponse\022\?\n\020telem"
    "etry_result\030\001 \001(\0132%.mavsdk.rpc.telemetry"
    ".TelemetryResult\"1\n\036SetRateFixedwingMetr"
    "icsRequest\022\017\n\007rate_hz\030\001 \001(\001\"b\n\037SetRateFi"
    "xedwingMetricsResponse\022\?\n\020telemetry_resu"
    "lt\030\001 \001(\0132%.mavsdk.rpc.telemetry.Telemetr"
    "yResult\"$\n\021SetRateImuRequest\022\017\n\007rate_hz\030"
    "\001 \001(\001\"U\n\022SetRateImuResponse\022\?\n\020telemetry"
    "_result\030\001 \001(\0132%.mavsdk.rpc.telemetry.Tel"
    "emetryResult\"*\n\027SetRateScaledImuRequest\022"
    "\017\n\007rate_hz\030\001 \001(\001\"[\n\030SetRateScaledImuResp"
    "onse\022\?\n\020telemetry_result\030\001 \001(\0132%.mavsdk."
    "rpc.telemetry.TelemetryResult\"\'\n\024SetRate"
    "RawImuRequest\022\017\n\007rate_hz\030\001 \001(\001\"X\n\025SetRat"
    "eRawImuResponse\022\?\n\020telemetry_result\030\001 \001("
    "\0132%.mavsdk.rpc.telemetry.TelemetryResult"
    "\".\n\033SetRateUnixEpochTimeRequest\022\017\n\007rate_"
    "hz\030\001 \001(\001\"_\n\034SetRateUnixEpochTimeResponse"
    "\022\?\n\020telemetry_result\030\001 \001(\0132%.mavsdk.rpc."
    "telemetry.TelemetryResult\"/\n\034SetRateDist"
    "anceSensorRequest\022\017\n\007rate_hz\030\001 \001(\001\"`\n\035Se"
    "tRateDistanceSensorResponse\022\?\n\020telemetry"
    "_result\030\001 \001(\0132%.mavsdk.rpc.telemetry.Tel"
    "emetryResult\"\033\n\031GetGpsGlobalOriginReques"
    "t\"\237\001\n\032GetGpsGlobalOriginResponse\022\?\n\020tele"
    "metry_result\030\001 \001(\0132%.mavsdk.rpc.telemetr"
    "y.TelemetryResult\022@\n\021gps_global_origin\030\002"
    " \001(\0132%.mavsdk.rpc.telemetry.GpsGlobalOri"
    "gin\")\n\026SetRateAltitudeRequest\022\017\n\007rate_hz"
    "\030\001 \001(\001\"Z\n\027SetRateAltitudeResponse\022\?\n\020tel"
    "emetry_result\030\001 \001(\0132%.mavsdk.rpc.telemet"
    "ry.TelemetryResult\"\225\001\n\010Position\022\035\n\014latit"
    "ude_deg\030\001 \001(\001B\007\202\265\030\003NaN\022\036\n\rlongitude_deg\030"
    "\002 \001(\001B\007\202\265\030\003NaN\022$\n\023absolute_altitude_m\030\003 "
    "\001(\002B\007\202\265\030\003NaN\022$\n\023relative_altitude_m\030\004 \001("
    "\002B\007\202\265\030\003NaN\"\'\n\007Heading\022\034\n\013heading_deg\030\001 \001"
    "(\001B\007\202\265\030\003NaN\"r\n\nQuaternion\022\022\n\001w\030\001 \001(\002B\007\202\265"
    "\030\003NaN\022\022\n\001x\030\002 \001(\002B\007\202\265\030\003NaN\022\022\n\001y\030\003 \001(\002B\007\202\265"
    "\030\003NaN\022\022\n\001z\030\004 \001(\002B\007\202\265\030\003NaN\022\024\n\014timestamp_u"
    "s\030\005 \001(\004\"s\n\nEulerAngle\022\031\n\010roll_deg\030\001 \001(\002B"
    "\007\202\265\030\003NaN\022\032\n\tpitch_deg\030\002 \001(\002B\007\202\265\030\003NaN\022\030\n\007"
    "yaw_deg\030\003 \001(\002B\007\202\265\030\003NaN\022\024\n\014timestamp_us\030\004"
    " \001(\004\"l\n\023AngularVelocityBody\022\033\n\nroll_rad_"
    "s\030\001 \001(\002B\007\202\265\030\003NaN\022\034\n\013pitch_rad_s\030\002 \001(\002B\007\202"
    "\265\030\003NaN\022\032\n\tyaw_rad_s\030\003 \001(\002B\007\202\265\030\003NaN\"Y\n\007Gp"
    "sInfo\022\035\n\016num_satellites\030\001 \001(\005B\005\202\265\030\0010\022/\n\010"
    "fix_type\030\002 \001(\0162\035.mavsdk.rpc.telemetry.Fi"
    "xType\"\337\002\n\006RawGps\022\024\n\014timestamp_us\030\001 \001(\004\022\024"
    "\n\014latitude_deg\030\002 \001(\001\022\025\n\rlongitude_deg\030\003 "
    "\001(\001\022\033\n\023absolute_altitude_m\030\004 \001(\002\022\014\n\004hdop"
    "\030\005 \001(\002\022\014\n\004vdop\030\006 \001(\002\022\024\n\014velocity_m_s\030\007 \001"
    "(\002\022\017\n\007cog_deg\030\010 \001(\002\022\034\n\024altitude_ellipsoi"
    "d_m\030\t \001(\002\022 \n\030horizontal_uncertainty_m\030\n "
    "\001(\002\022\036\n\026vertical_uncertainty_m\030\013 \001(\002\022 \n\030v"
    "elocity_uncertainty_m_s\030\014 \001(\002\022\037\n\027heading"
    "_uncertainty_deg\030\r \001(\002\022\017\n\007yaw_deg\030\016 \001(\002\""
    "\312\001\n\007Battery\022\021\n\002id\030\001 \001(\rB\005\202\265\030\0010\022!\n\020temper"
    "ature_degc\030\002 \001(\002B\007\202\265\030\003NaN\022\032\n\tvoltage_v\030\003"
    " \001(\002B\007\202\265\030\003NaN\022\"\n\021current_battery_a\030\004 \001(\002"
    "B\007\202\265\030\003NaN\022%\n\024capacity_consumed_ah\030\005 \001(\002B"
    "\007\202\265\030\003NaN\022\"\n\021remaining_percent\030\006 \001(\002B\007\202\265\030"
    "\003NaN\"\271\002\n\006Health\022.\n\033is_gyrometer_calibrat"
    "ion_ok\030\001 \001(\010B\t\202\265\030\005false\0222\n\037is_accelerome"
    "ter_calibration_ok\030\002 \001(\010B\t\202\265\030\005false\0221\n\036i"
    "s_magnetometer_calibration_ok\030\003 \001(\010B\t\202\265\030"
    "\005false\022\'\n\024is_local_position_ok\030\005 \001(\010B\t\202\265"
    "\030\005false\022(\n\025is_global_position_ok\030\006 \001(\010B\t"
    "\202\265\030\005false\022&\n\023is_home_position_ok\030\007 \001(\010B\t"
    "\202\265\030\005false\022\035\n\nis_armable\030\010 \001(\010B\t\202\265\030\005false"
    "\"|\n\010RcStatus\022%\n\022was_available_once\030\001 \001(\010"
    "B\t\202\265\030\005false\022\037\n\014is_available\030\002 \001(\010B\t\202\265\030\005f"
    "alse\022(\n\027signal_strength_percent\030\003 \001(\002B\007\202"
    "\265\030\003NaN\"N\n\nStatusText\0222\n\004type\030\001 \001(\0162$.mav"
    "sdk.rpc.telemetry.StatusTextType\022\014\n\004text"
    "\030\002 \001(\t\"\?\n\025ActuatorControlTarget\022\024\n\005group"
    "\030\001 \001(\005B\005\202\265\030\0010\022\020\n\010controls\030\002 \003(\002\"\?\n\024Actua"
    "torOutputStatus\022\025\n\006active\030\001 \001(\rB\005\202\265\030\0010\022\020"
    "\n\010actuator\030\002 \003(\002\"\'\n\nCovariance\022\031\n\021covari"
    "ance_matrix\030\001 \003(\002\";\n\014VelocityBody\022\r\n\005x_m"
    "_s\030\001 \001(\002\022\r\n\005y_m_s\030\002 \001(\002\022\r\n\005z_m_s\030\003 \001(\002\"5"
    "\n\014PositionBody\022\013\n\003x_m\030\001 \001(\002\022\013\n\003y_m\030\002 \001(\002"
    "\022\013\n\003z_m\030\003 \001(\002\"\354\004\n\010Odometry\022\021\n\ttime_usec\030"
    "\001 \001(\004\0229\n\010frame_id\030\002 \001(\0162\'.mavsdk.rpc.tel"
    "emetry.Odometry.MavFrame\022\?\n\016child_frame_"
    "id\030\003 \001(\0162\'.mavsdk.rpc.telemetry.Odometry"
    ".MavFrame\0229\n\rposition_body\030\004 \001(\0132\".mavsd"
    "k.rpc.telemetry.PositionBody\022+\n\001q\030\005 \001(\0132"
    " .mavsdk.rpc.telemetry.Quaternion\0229\n\rvel"
    "ocity_body\030\006 \001(\0132\".mavsdk.rpc.telemetry."
    "VelocityBody\022H\n\025angular_velocity_body\030\007 "
    "\001(\0132).mavsdk.rpc.telemetry.AngularVeloci"
    "tyBody\0229\n\017pose_covariance\030\010 \001(\0132 .mavsdk"
    ".rpc.telemetry.Covariance\022=\n\023velocity_co"
    "variance\030\t \001(\0132 .mavsdk.rpc.telemetry.Co"
    "variance\"j\n\010MavFrame\022\023\n\017MAV_FRAME_UNDEF\020"
    "\000\022\026\n\022MAV_FRAME_BODY_NED\020\010\022\030\n\024MAV_FRAME_V"
    "ISION_NED\020\020\022\027\n\023MAV_FRAME_ESTIM_NED\020\022\"\266\001\n"
    "\016DistanceSensor\022#\n\022minimum_distance_m\030\001 "
    "\001(\002B\007\202\265\030\003NaN\022#\n\022maximum_distance_m\030\002 \001(\002"
    "B\007\202\265\030\003NaN\022#\n\022current_distance_m\030\003 \001(\002B\007\202"
    "\265\030\003NaN\0225\n\013orientation\030\004 \001(\0132 .mavsdk.rpc"
    ".telemetry.EulerAngle\"\260\001\n\016ScaledPressure"
    "\022\024\n\014timestamp_us\030\001 \001(\004\022\035\n\025absolute_press"
    "ure_hpa\030\002 \001(\002\022!\n\031differential_pressure_h"
    "pa\030\003 \001(\002\022\027\n\017temperature_deg\030\004 \001(\002\022-\n%dif"
    "ferential_pressure_temperature_deg\030\005 \001(\002"
    "\"Y\n\013PositionNed\022\030\n\007north_m\030\001 \001(\002B\007\202\265\030\003Na"
    "N\022\027\n\006east_m\030\002 \001(\002B\007\202\265\030\003NaN\022\027\n\006down_m\030\003 \001"
    "(\002B\007\202\265\030\003NaN\"D\n\013VelocityNed\022\021\n\tnorth_m_s\030"
    "\001 \001(\002\022\020\n\010east_m_s\030\002 \001(\002\022\020\n\010down_m_s\030\003 \001("
    "\002\"\177\n\023PositionVelocityNed\0223\n\010position\030\001 \001"
    "(\0132!.mavsdk.rpc.telemetry.PositionNed\0223\n"
    "\010velocity\030\002 \001(\0132!.mavsdk.rpc.telemetry.V"
    "elocityNed\"r\n\013GroundTruth\022\035\n\014latitude_de"
    "g\030\001 \001(\001B\007\202\265\030\003NaN\022\036\n\rlongitude_deg\030\002 \001(\001B"
    "\007\202\265\030\003NaN\022$\n\023absolute_altitude_m\030\003 \001(\002B\007\202"
    "\265\030\003NaN\"x\n\020FixedwingMetrics\022\035\n\014airspeed_m"
    "_s\030\001 \001(\002B\007\202\265\030\003NaN\022$\n\023throttle_percentage"
    "\030\002 \001(\002B\007\202\265\030\003NaN\022\037\n\016climb_rate_m_s\030\003 \001(\002B"
    "\007\202\265\030\003NaN\"i\n\017AccelerationFrd\022\035\n\014forward_m"
    "_s2\030\001 \001(\002B\007\202\265\030\003NaN\022\033\n\nright_m_s2\030\002 \001(\002B\007"
    "\202\265\030\003NaN\022\032\n\tdown_m_s2\030\003 \001(\002B\007\202\265\030\003NaN\"o\n\022A"
    "ngularVelocityFrd\022\036\n\rforward_rad_s\030\001 \001(\002"
    "B\007\202\265\030\003NaN\022\034\n\013right_rad_s\030\002 \001(\002B\007\202\265\030\003NaN\022"
    "\033\n\ndown_rad_s\030\003 \001(\002B\007\202\265\030\003NaN\"m\n\020Magnetic"
    "FieldFrd\022\036\n\rforward_gauss\030\001 \001(\002B\007\202\265\030\003NaN"
    "\022\034\n\013right_gauss\030\002 \001(\002B\007\202\265\030\003NaN\022\033\n\ndown_g"
    "auss\030\003 \001(\002B\007\202\265\030\003NaN\"\213\002\n\003Imu\022\?\n\020accelerat"
    "ion_frd\030\001 \001(\0132%.mavsdk.rpc.telemetry.Acc"
    "elerationFrd\022F\n\024angular_velocity_frd\030\002 \001"
    "(\0132(.mavsdk.rpc.telemetry.AngularVelocit"
    "yFrd\022B\n\022magnetic_field_frd\030\003 \001(\0132&.mavsd"
    "k.rpc.telemetry.MagneticFieldFrd\022!\n\020temp"
    "erature_degc\030\004 \001(\002B\007\202\265\030\003NaN\022\024\n\014timestamp"
    "_us\030\005 \001(\004\"m\n\017GpsGlobalOrigin\022\035\n\014latitude"
    "_deg\030\001 \001(\001B\007\202\265\030\003NaN\022\036\n\rlongitude_deg\030\002 \001"
    "(\001B\007\202\265\030\003NaN\022\033\n\naltitude_m\030\003 \001(\002B\007\202\265\030\003NaN"
    "\"\346\001\n\010Altitude\022%\n\024altitude_monotonic_m\030\001 "
    "\001(\002B\007\202\265\030\003NaN\022 \n\017altitude_amsl_m\030\002 \001(\002B\007\202"
    "\265\030\003NaN\022!\n\020altitude_local_m\030\003 \001(\002B\007\202\265\030\003Na"
    "N\022$\n\023altitude_relative_m\030\004 \001(\002B\007\202\265\030\003NaN\022"
    "#\n\022altitude_terrain_m\030\005 \001(\002B\007\202\265\030\003NaN\022#\n\022"
    "bottom_clearance_m\030\006 \001(\002B\007\202\265\030\003NaN\"\241\002\n\017Te"
    "lemetryResult\022<\n\006result\030\001 \001(\0162,.mavsdk.r"
    "pc.telemetry.TelemetryResult.Result\022\022\n\nr"
    "esult_str\030\002 \001(\t\"\273\001\n\006Result\022\022\n\016RESULT_UNK"
    "NOWN\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\024\n\020RESULT_NO_"
    "SYSTEM\020\002\022\033\n\027RESULT_CONNECTION_ERROR\020\003\022\017\n"
    "\013RESULT_BUSY\020\004\022\031\n\025RESULT_COMMAND_DENIED\020"
    "\005\022\022\n\016RESULT_TIMEOUT\020\006\022\026\n\022RESULT_UNSUPPOR"
    "TED\020\007*\244\001\n\007FixType\022\023\n\017FIX_TYPE_NO_GPS\020\000\022\023"
    "\n\017FIX_TYPE_NO_FIX\020\001\022\023\n\017FIX_TYPE_FIX_2D\020\002"
    "\022\023\n\017FIX_TYPE_FIX_3D\020\003\022\025\n\021FIX_TYPE_FIX_DG"
    "PS\020\004\022\026\n\022FIX_TYPE_RTK_FLOAT\020\005\022\026\n\022FIX_TYPE"
    "_RTK_FIXED\020\006*\206\003\n\nFlightMode\022\027\n\023FLIGHT_MO"
    "DE_UNKNOWN\020\000\022\025\n\021FLIGHT_MODE_READY\020\001\022\027\n\023F"
    "LIGHT_MODE_TAKEOFF\020\002\022\024\n\020FLIGHT_MODE_HOLD"
    "\020\003\022\027\n\023FLIGHT_MODE_MISSION\020\004\022 \n\034FLIGHT_MO"
    "DE_RETURN_TO_LAUNCH\020\005\022\024\n\020FLIGHT_MODE_LAN"
    "D\020\006\022\030\n\024FLIGHT_MODE_OFFBOARD\020\007\022\031\n\025FLIGHT_"
    "MODE_FOLLOW_ME\020\010\022\026\n\022FLIGHT_MODE_MANUAL\020\t"
    "\022\026\n\022FLIGHT_MODE_ALTCTL\020\n\022\026\n\022FLIGHT_MODE_"
    "POSCTL\020\013\022\024\n\020FLIGHT_MODE_ACRO\020\014\022\032\n\026FLIGHT"
    "_MODE_STABILIZED\020\r\022\031\n\025FLIGHT_MODE_RATTIT"
    "UDE\020\016*\371\001\n\016StatusTextType\022\032\n\026STATUS_TEXT_"
    "TYPE_DEBUG\020\000\022\031\n\025STATUS_TEXT_TYPE_INFO\020\001\022"
    "\033\n\027STATUS_TEXT_TYPE_NOTICE\020\002\022\034\n\030STATUS_T"
    "EXT_TYPE_WARNING\020\003\022\032\n\026STATUS_TEXT_TYPE_E"
    "RROR\020\004\022\035\n\031STATUS_TEXT_TYPE_CRITICAL\020\005\022\032\n"
    "\026STATUS_TEXT_TYPE_ALERT\020\006\022\036\n\032STATUS_TEXT"
    "_TYPE_EMERGENCY\020\007*\223\001\n\013LandedState\022\030\n\024LAN"
    "DED_STATE_UNKNOWN\020\000\022\032\n\026LANDED_STATE_ON_G"
    "ROUND\020\001\022\027\n\023LANDED_STATE_IN_AIR\020\002\022\033\n\027LAND"
    "ED_STATE_TAKING_OFF\020\003\022\030\n\024LANDED_STATE_LA"
    "NDING\020\004*\215\001\n\tVtolState\022\030\n\024VTOL_STATE_UNDE"
    "FINED\020\000\022\037\n\033VTOL_STATE_TRANSITION_TO_FW\020\001"
    "\022\037\n\033VTOL_STATE_TRANSITION_TO_MC\020\002\022\021\n\rVTO"
    "L_STATE_MC\020\003\022\021\n\rVTOL_STATE_FW\020\0042\2019\n\020Tele"
    "metryService\022o\n\021SubscribePosition\022..mavs"
    "dk.rpc.telemetry.SubscribePositionReques"
    "t\032&.mavsdk.rpc.telemetry.PositionRespons"
    "e\"\0000\001\022c\n\rSubscribeHome\022*.mavsdk.rpc.tele"
    "metry.SubscribeHomeRequest\032\".mavsdk.rpc."
    "telemetry.HomeResponse\"\0000\001\022f\n\016SubscribeI"
    "nAir\022+.mavsdk.rpc.telemetry.SubscribeInA"
    "irRequest\032#.mavsdk.rpc.telemetry.InAirRe"
    "sponse\"\0000\001\022x\n\024SubscribeLandedState\0221.mav"
    "sdk.rpc.telemetry.SubscribeLandedStateRe"
    "quest\032).mavsdk.rpc.telemetry.LandedState"
    "Response\"\0000\001\022f\n\016SubscribeArmed\022+.mavsdk."
    "rpc.telemetry.SubscribeArmedRequest\032#.ma"
    "vsdk.rpc.telemetry.ArmedResponse\"\0000\001\022r\n\022"
    "SubscribeVtolState\022/.mavsdk.rpc.telemetr"
    "y.SubscribeVtolStateRequest\032\'.mavsdk.rpc"
    ".telemetry.VtolStateResponse\"\0000\001\022\215\001\n\033Sub"
    "scribeAttitudeQuaternion\0228.mavsdk.rpc.te"
    "lemetry.SubscribeAttitudeQuaternionReque"
    "st\0320.mavsdk.rpc.telemetry.AttitudeQuater"
    "nionResponse\"\0000\001\022~\n\026SubscribeAttitudeEul"
    "er\0223.mavsdk.rpc.telemetry.SubscribeAttit"
    "udeEulerRequest\032+.mavsdk.rpc.telemetry.A"
    "ttitudeEulerResponse\"\0000\001\022\250\001\n$SubscribeAt"
    "titudeAngularVelocityBody\022A.mavsdk.rpc.t"
    "elemetry.SubscribeAttitudeAngularVelocit"
    "yBodyRequest\0329.mavsdk.rpc.telemetry.Atti"
    "tudeAngularVelocityBodyResponse\"\0000\001\022\237\001\n!"
    "SubscribeCameraAttitudeQuaternion\022>.mavs"
    "dk.rpc.telemetry.SubscribeCameraAttitude"
    "QuaternionRequest\0326.mavsdk.rpc.telemetry"
    ".CameraAttitudeQuaternionResponse\"\0000\001\022\220\001"
    "\n\034SubscribeCameraAttitudeEuler\0229.mavsdk."
    "rpc.telemetry.SubscribeCameraAttitudeEul"
    "erRequest\0321.mavsdk.rpc.telemetry.CameraA"
    "ttitudeEulerResponse\"\0000\001\022x\n\024SubscribeVel"
    "ocityNed\0221.mavsdk.rpc.telemetry.Subscrib"
    "eVelocityNedRequest\032).mavsdk.rpc.telemet"
    "ry.VelocityNedResponse\"\0000\001\022l\n\020SubscribeG"
    "psInfo\022-.mavsdk.rpc.telemetry.SubscribeG"
    "psInfoRequest\032%.mavsdk.rpc.telemetry.Gps"
    "InfoResponse\"\0000\001\022i\n\017SubscribeRawGps\022,.ma"
    "vsdk.rpc.telemetry.SubscribeRawGpsReques"
    "t\032$.mavsdk.rpc.telemetry.RawGpsResponse\""
    "\0000\001\022l\n\020SubscribeBattery\022-.mavsdk.rpc.tel"
    "emetry.SubscribeBatteryRequest\032%.mavsdk."
    "rpc.telemetry.BatteryResponse\"\0000\001\022u\n\023Sub"
    "scribeFlightMode\0220.mavsdk.rpc.telemetry."
    "SubscribeFlightModeRequest\032(.mavsdk.rpc."
    "telemetry.FlightModeResponse\"\0000\001\022i\n\017Subs"
    "cribeHealth\022,.mavsdk.rpc.telemetry.Subsc"
    "ribeHealthRequest\032$.mavsdk.rpc.telemetry"
    ".HealthResponse\"\0000\001\022o\n\021SubscribeRcStatus"
    "\022..mavsdk.rpc.telemetry.SubscribeRcStatu"
    "sRequest\032&.mavsdk.rpc.telemetry.RcStatus"
    "Response\"\0000\001\022u\n\023SubscribeStatusText\0220.ma"
    "vsdk.rpc.telemetry.SubscribeStatusTextRe"
    "quest\032(.mavsdk.rpc.telemetry.StatusTextR"
    "esponse\"\0000\001\022\226\001\n\036SubscribeActuatorControl"
    "Target\022;.mavsdk.rpc.telemetry.SubscribeA"
    "ctuatorControlTargetRequest\0323.mavsdk.rpc"
    ".telemetry.ActuatorControlTargetResponse"
    "\"\0000\001\022\223\001\n\035SubscribeActuatorOutputStatus\022:"
    ".mavsdk.rpc.telemetry.SubscribeActuatorO"
    "utputStatusRequest\0322.mavsdk.rpc.telemetr"
    "y.ActuatorOutputStatusResponse\"\0000\001\022o\n\021Su"
    "bscribeOdometry\022..mavsdk.rpc.telemetry.S"
    "ubscribeOdometryRequest\032&.mavsdk.rpc.tel"
    "emetry.OdometryResponse\"\0000\001\022\220\001\n\034Subscrib"
    "ePositionVelocityNed\0229.mavsdk.rpc.teleme"
    "try.SubscribePositionVelocityNedRequest\032"
    "1.mavsdk.rpc.telemetry.PositionVelocityN"
    "edResponse\"\0000\001\022x\n\024SubscribeGroundTruth\0221"
    ".mavsdk.rpc.telemetry.SubscribeGroundTru"
    "thRequest\032).mavsdk.rpc.telemetry.GroundT"
    "ruthResponse\"\0000\001\022\207\001\n\031SubscribeFixedwingM"
    "etrics\0226.mavsdk.rpc.telemetry.SubscribeF"
    "ixedwingMetricsRequest\032..mavsdk.rpc.tele"
    "metry.FixedwingMetricsResponse\"\0000\001\022`\n\014Su"
    "bscribeImu\022).mavsdk.rpc.telemetry.Subscr"
    "ibeImuRequest\032!.mavsdk.rpc.telemetry.Imu"
    "Response\"\0000\001\022r\n\022SubscribeScaledImu\022/.mav"
    "sdk.rpc.telemetry.SubscribeScaledImuRequ"
    "est\032\'.mavsdk.rpc.telemetry.ScaledImuResp"
    "onse\"\0000\001\022i\n\017SubscribeRawImu\022,.mavsdk.rpc"
    ".telemetry.SubscribeRawImuRequest\032$.mavs"
    "dk.rpc.telemetry.RawImuResponse\"\0000\001\022x\n\024S"
    "ubscribeHealthAllOk\0221.mavsdk.rpc.telemet"
    "ry.SubscribeHealthAllOkRequest\032).mavsdk."
    "rpc.telemetry.HealthAllOkResponse\"\0000\001\022~\n"
    "\026SubscribeUnixEpochTime\0223.mavsdk.rpc.tel"
    "emetry.SubscribeUnixEpochTimeRequest\032+.m"
    "avsdk.rpc.telemetry.UnixEpochTimeRespons"
    "e\"\0000\001\022\201\001\n\027SubscribeDistanceSensor\0224.mavs"
    "dk.rpc.telemetry.SubscribeDistanceSensor"
    "Request\032,.mavsdk.rpc.telemetry.DistanceS"
    "ensorResponse\"\0000\001\022\201\001\n\027SubscribeScaledPre"
    "ssure\0224.mavsdk.rpc.telemetry.SubscribeSc"
    "aledPressureRequest\032,.mavsdk.rpc.telemet"
    "ry.ScaledPressureResponse\"\0000\001\022l\n\020Subscri"
    "beHeading\022-.mavsdk.rpc.telemetry.Subscri"
    "beHeadingRequest\032%.mavsdk.rpc.telemetry."
    "HeadingResponse\"\0000\001\022o\n\021SubscribeAltitude"
    "\022..mavsdk.rpc.telemetry.SubscribeAltitud"
    "eRequest\032&.mavsdk.rpc.telemetry.Altitude"
    "Response\"\0000\001\022p\n\017SetRatePosition\022,.mavsdk"
    ".rpc.telemetry.SetRatePositionRequest\032-."
    "mavsdk.rpc.telemetry.SetRatePositionResp"
    "onse\"\000\022d\n\013SetRateHome\022(.mavsdk.rpc.telem"
    "etry.SetRateHomeRequest\032).mavsdk.rpc.tel"
    "emetry.SetRateHomeResponse\"\000\022g\n\014SetRateI"
    "nAir\022).mavsdk.rpc.telemetry.SetRateInAir"
    "Request\032*.mavsdk.rpc.telemetry.SetRateIn"
    "AirResponse\"\000\022y\n\022SetRateLandedState\022/.ma"
    "vsdk.rpc.telemetry.SetRateLandedStateReq"
    "uest\0320.mavsdk.rpc.telemetry.SetRateLande"
    "dStateResponse\"\000\022s\n\020SetRateVtolState\022-.m"
    "avsdk.rpc.telemetry.SetRateVtolStateRequ"
    "est\032..mavsdk.rpc.telemetry.SetRateVtolSt"
    "ateResponse\"\000\022\216\001\n\031SetRateAttitudeQuatern"
    "ion\0226.mavsdk.rpc.telemetry.SetRateAttitu"
    "deQuaternionRequest\0327.mavsdk.rpc.telemet"
    "ry.SetRateAttitudeQuaternionResponse\"\000\022\177"
    "\n\024SetRateAttitudeEuler\0221.mavsdk.rpc.tele"
    "metry.SetRateAttitudeEulerRequest\0322.mavs"
    "dk.rpc.telemetry.SetRateAttitudeEulerRes"
    "ponse\"\000\022\202\001\n\025SetRateCameraAttitude\0222.mavs"
    "dk.rpc.telemetry.SetRateCameraAttitudeRe"
    "quest\0323.mavsdk.rpc.telemetry.SetRateCame"
    "raAttitudeResponse\"\000\022y\n\022SetRateVelocityN"
    "ed\022/.mavsdk.rpc.telemetry.SetRateVelocit"
    "yNedRequest\0320.mavsdk.rpc.telemetry.SetRa"
    "teVelocityNedResponse\"\000\022m\n\016SetRateGpsInf"
    "o\022+.mavsdk.rpc.telemetry.SetRateGpsInfoR"
    "equest\032,.mavsdk.rpc.telemetry.SetRateGps"
    "InfoResponse\"\000\022m\n\016SetRateBattery\022+.mavsd"
    "k.rpc.telemetry.SetRateBatteryRequest\032,."
    "mavsdk.rpc.telemetry.SetRateBatteryRespo"
    "nse\"\000\022p\n\017SetRateRcStatus\022,.mavsdk.rpc.te"
    "lemetry.SetRateRcStatusRequest\032-.mavsdk."
    "rpc.telemetry.SetRateRcStatusResponse\"\000\022"
    "\227\001\n\034SetRateActuatorControlTarget\0229.mavsd"
    "k.rpc.telemetry.SetRateActuatorControlTa"
    "rgetRequest\032:.mavsdk.rpc.telemetry.SetRa"
    "teActuatorControlTargetResponse\"\000\022\224\001\n\033Se"
    "tRateActuatorOutputStatus\0228.mavsdk.rpc.t"
    "elemetry.SetRateActuatorOutputStatusRequ"
    "est\0329.mavsdk.rpc.telemetry.SetRateActuat"
    "orOutputStatusResponse\"\000\022p\n\017SetRateOdome"
    "try\022,.mavsdk.rpc.telemetry.SetRateOdomet"
    "ryRequest\032-.mavsdk.rpc.telemetry.SetRate"
    "OdometryResponse\"\000\022\221\001\n\032SetRatePositionVe"
    "locityNed\0227.mavsdk.rpc.telemetry.SetRate"
    "PositionVelocityNedRequest\0328.mavsdk.rpc."
    "telemetry.SetRatePositionVelocityNedResp"
    "onse\"\000\022y\n\022SetRateGroundTruth\022/.mavsdk.rp"
    "c.telemetry.SetRateGroundTruthRequest\0320."
    "mavsdk.rpc.telemetry.SetRateGroundTruthR"
    "esponse\"\000\022\210\001\n\027SetRateFixedwingMetrics\0224."
    "mavsdk.rpc.telemetry.SetRateFixedwingMet"
    "ricsRequest\0325.mavsdk.rpc.telemetry.SetRa"
    "teFixedwingMetricsResponse\"\000\022a\n\nSetRateI"
    "mu\022\'.mavsdk.rpc.telemetry.SetRateImuRequ"
    "est\032(.mavsdk.rpc.telemetry.SetRateImuRes"
    "ponse\"\000\022s\n\020SetRateScaledImu\022-.mavsdk.rpc"
    ".telemetry.SetRateScaledImuRequest\032..mav"
    "sdk.rpc.telemetry.SetRateScaledImuRespon"
    "se\"\000\022j\n\rSetRateRawImu\022*.mavsdk.rpc.telem"
    "etry.SetRateRawImuRequest\032+.mavsdk.rpc.t"
    "elemetry.SetRateRawImuResponse\"\000\022\177\n\024SetR"
    "ateUnixEpochTime\0221.mavsdk.rpc.telemetry."
    "SetRateUnixEpochTimeRequest\0322.mavsdk.rpc"
    ".telemetry.SetRateUnixEpochTimeResponse\""
    "\000\022\202\001\n\025SetRateDistanceSensor\0222.mavsdk.rpc"
    ".telemetry.SetRateDistanceSensorRequest\032"
    "3.mavsdk.rpc.telemetry.SetRateDistanceSe"
    "nsorResponse\"\000\022p\n\017SetRateAltitude\022,.mavs"
    "dk.rpc.telemetry.SetRateAltitudeRequest\032"
    "-.mavsdk.rpc.telemetry.SetRateAltitudeRe"
    "sponse\"\000\022y\n\022GetGpsGlobalOrigin\022/.mavsdk."
    "rpc.telemetry.GetGpsGlobalOriginRequest\032"
    "0.mavsdk.rpc.telemetry.GetGpsGlobalOrigi"
    "nResponse\"\000B%\n\023io.mavsdk.telemetryB\016Tele"
    "metryProtob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_telemetry_2ftelemetry_2eproto_deps[1] =
    {
        &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::absl::once_flag descriptor_table_telemetry_2ftelemetry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_telemetry_2ftelemetry_2eproto = {
    false,
    false,
    20858,
    descriptor_table_protodef_telemetry_2ftelemetry_2eproto,
    "telemetry/telemetry.proto",
    &descriptor_table_telemetry_2ftelemetry_2eproto_once,
    descriptor_table_telemetry_2ftelemetry_2eproto_deps,
    1,
    154,
    schemas,
    file_default_instances,
    TableStruct_telemetry_2ftelemetry_2eproto::offsets,
    file_level_metadata_telemetry_2ftelemetry_2eproto,
    file_level_enum_descriptors_telemetry_2ftelemetry_2eproto,
    file_level_service_descriptors_telemetry_2ftelemetry_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_telemetry_2ftelemetry_2eproto_getter() {
  return &descriptor_table_telemetry_2ftelemetry_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_telemetry_2ftelemetry_2eproto(&descriptor_table_telemetry_2ftelemetry_2eproto);
namespace mavsdk {
namespace rpc {
namespace telemetry {
const ::google::protobuf::EnumDescriptor* Odometry_MavFrame_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Odometry_MavFrame_internal_data_[] = {
    65536u, 32u, 163968u, };
bool Odometry_MavFrame_IsValid(int value) {
  return 0 <= value && value <= 18 && ((327937u >> value) & 1) != 0;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Odometry_MavFrame Odometry::MAV_FRAME_UNDEF;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_BODY_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_VISION_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_ESTIM_NED;
constexpr Odometry_MavFrame Odometry::MavFrame_MIN;
constexpr Odometry_MavFrame Odometry::MavFrame_MAX;
constexpr int Odometry::MavFrame_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TelemetryResult_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t TelemetryResult_Result_internal_data_[] = {
    524288u, 0u, };
bool TelemetryResult_Result_IsValid(int value) {
  return 0 <= value && value <= 7;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TelemetryResult_Result TelemetryResult::RESULT_UNKNOWN;
constexpr TelemetryResult_Result TelemetryResult::RESULT_SUCCESS;
constexpr TelemetryResult_Result TelemetryResult::RESULT_NO_SYSTEM;
constexpr TelemetryResult_Result TelemetryResult::RESULT_CONNECTION_ERROR;
constexpr TelemetryResult_Result TelemetryResult::RESULT_BUSY;
constexpr TelemetryResult_Result TelemetryResult::RESULT_COMMAND_DENIED;
constexpr TelemetryResult_Result TelemetryResult::RESULT_TIMEOUT;
constexpr TelemetryResult_Result TelemetryResult::RESULT_UNSUPPORTED;
constexpr TelemetryResult_Result TelemetryResult::Result_MIN;
constexpr TelemetryResult_Result TelemetryResult::Result_MAX;
constexpr int TelemetryResult::Result_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* FixType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t FixType_internal_data_[] = {
    458752u, 0u, };
bool FixType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
const ::google::protobuf::EnumDescriptor* FlightMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t FlightMode_internal_data_[] = {
    983040u, 0u, };
bool FlightMode_IsValid(int value) {
  return 0 <= value && value <= 14;
}
const ::google::protobuf::EnumDescriptor* StatusTextType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t StatusTextType_internal_data_[] = {
    524288u, 0u, };
bool StatusTextType_IsValid(int value) {
  return 0 <= value && value <= 7;
}
const ::google::protobuf::EnumDescriptor* LandedState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t LandedState_internal_data_[] = {
    327680u, 0u, };
bool LandedState_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* VtolState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t VtolState_internal_data_[] = {
    327680u, 0u, };
bool VtolState_IsValid(int value) {
  return 0 <= value && value <= 4;
}
// ===================================================================

class SubscribePositionRequest::_Internal {
 public:
};

SubscribePositionRequest::SubscribePositionRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribePositionRequest)
}
SubscribePositionRequest::SubscribePositionRequest(
    ::google::protobuf::Arena* arena,
    const SubscribePositionRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribePositionRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribePositionRequest)
}









::google::protobuf::Metadata SubscribePositionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[0]);
}
// ===================================================================

class PositionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PositionResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Position& position(const PositionResponse* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Position& PositionResponse::_Internal::position(const PositionResponse* msg) {
  return *msg->_impl_.position_;
}
PositionResponse::PositionResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.PositionResponse)
}
inline PROTOBUF_NDEBUG_INLINE PositionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PositionResponse::PositionResponse(
    ::google::protobuf::Arena* arena,
    const PositionResponse& from)
    : ::google::protobuf::Message(arena) {
  PositionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Position>(arena, *from._impl_.position_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionResponse)
}
inline PROTOBUF_NDEBUG_INLINE PositionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PositionResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.position_ = {};
}
PositionResponse::~PositionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PositionResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PositionResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PositionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PositionResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PositionResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Position position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PositionResponse, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Position position = 1;
    {PROTOBUF_FIELD_OFFSET(PositionResponse, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Position>()},
  }}, {{
  }},
};

::uint8_t* PositionResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Position position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionResponse)
  return target;
}

::size_t PositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Position position = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PositionResponse::_class_data_ = {
    PositionResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PositionResponse::GetClassData() const {
  return &_class_data_;
}

void PositionResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PositionResponse*>(&to_msg);
  auto& from = static_cast<const PositionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_position()->::mavsdk::rpc::telemetry::Position::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionResponse::CopyFrom(const PositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PositionResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PositionResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PositionResponse::InternalSwap(PositionResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.position_, other->_impl_.position_);
}

::google::protobuf::Metadata PositionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[1]);
}
// ===================================================================

class SubscribeHomeRequest::_Internal {
 public:
};

SubscribeHomeRequest::SubscribeHomeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeHomeRequest)
}
SubscribeHomeRequest::SubscribeHomeRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeHomeRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeHomeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeHomeRequest)
}









::google::protobuf::Metadata SubscribeHomeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[2]);
}
// ===================================================================

class HomeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<HomeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HomeResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Position& home(const HomeResponse* msg);
  static void set_has_home(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Position& HomeResponse::_Internal::home(const HomeResponse* msg) {
  return *msg->_impl_.home_;
}
HomeResponse::HomeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.HomeResponse)
}
inline PROTOBUF_NDEBUG_INLINE HomeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HomeResponse::HomeResponse(
    ::google::protobuf::Arena* arena,
    const HomeResponse& from)
    : ::google::protobuf::Message(arena) {
  HomeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.home_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Position>(arena, *from._impl_.home_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.HomeResponse)
}
inline PROTOBUF_NDEBUG_INLINE HomeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HomeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.home_ = {};
}
HomeResponse::~HomeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.HomeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HomeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.home_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HomeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.HomeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.home_ != nullptr);
    _impl_.home_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HomeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> HomeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HomeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HomeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Position home = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HomeResponse, _impl_.home_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Position home = 1;
    {PROTOBUF_FIELD_OFFSET(HomeResponse, _impl_.home_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Position>()},
  }}, {{
  }},
};

::uint8_t* HomeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.HomeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Position home = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::home(this),
        _Internal::home(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.HomeResponse)
  return target;
}

::size_t HomeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.HomeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Position home = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.home_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HomeResponse::_class_data_ = {
    HomeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HomeResponse::GetClassData() const {
  return &_class_data_;
}

void HomeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HomeResponse*>(&to_msg);
  auto& from = static_cast<const HomeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.HomeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_home()->::mavsdk::rpc::telemetry::Position::MergeFrom(
        from._internal_home());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HomeResponse::CopyFrom(const HomeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.HomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HomeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HomeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HomeResponse::InternalSwap(HomeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.home_, other->_impl_.home_);
}

::google::protobuf::Metadata HomeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[3]);
}
// ===================================================================

class SubscribeInAirRequest::_Internal {
 public:
};

SubscribeInAirRequest::SubscribeInAirRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeInAirRequest)
}
SubscribeInAirRequest::SubscribeInAirRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeInAirRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeInAirRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeInAirRequest)
}









::google::protobuf::Metadata SubscribeInAirRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[4]);
}
// ===================================================================

class InAirResponse::_Internal {
 public:
};

InAirResponse::InAirResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.InAirResponse)
}
InAirResponse::InAirResponse(
    ::google::protobuf::Arena* arena, const InAirResponse& from)
    : InAirResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE InAirResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void InAirResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.is_in_air_ = {};
}
InAirResponse::~InAirResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.InAirResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InAirResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InAirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.InAirResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.is_in_air_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InAirResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> InAirResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_InAirResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool is_in_air = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(InAirResponse, _impl_.is_in_air_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(InAirResponse, _impl_.is_in_air_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_in_air = 1;
    {PROTOBUF_FIELD_OFFSET(InAirResponse, _impl_.is_in_air_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* InAirResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.InAirResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool is_in_air = 1;
  if (this->_internal_is_in_air() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_in_air(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.InAirResponse)
  return target;
}

::size_t InAirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.InAirResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_in_air = 1;
  if (this->_internal_is_in_air() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InAirResponse::_class_data_ = {
    InAirResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InAirResponse::GetClassData() const {
  return &_class_data_;
}

void InAirResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InAirResponse*>(&to_msg);
  auto& from = static_cast<const InAirResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.InAirResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_in_air() != 0) {
    _this->_internal_set_is_in_air(from._internal_is_in_air());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InAirResponse::CopyFrom(const InAirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.InAirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InAirResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InAirResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InAirResponse::InternalSwap(InAirResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.is_in_air_, other->_impl_.is_in_air_);
}

::google::protobuf::Metadata InAirResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[5]);
}
// ===================================================================

class SubscribeLandedStateRequest::_Internal {
 public:
};

SubscribeLandedStateRequest::SubscribeLandedStateRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
}
SubscribeLandedStateRequest::SubscribeLandedStateRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeLandedStateRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeLandedStateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
}









::google::protobuf::Metadata SubscribeLandedStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[6]);
}
// ===================================================================

class LandedStateResponse::_Internal {
 public:
};

LandedStateResponse::LandedStateResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.LandedStateResponse)
}
LandedStateResponse::LandedStateResponse(
    ::google::protobuf::Arena* arena, const LandedStateResponse& from)
    : LandedStateResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE LandedStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LandedStateResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.landed_state_ = {};
}
LandedStateResponse::~LandedStateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.LandedStateResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LandedStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LandedStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.LandedStateResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.landed_state_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LandedStateResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> LandedStateResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LandedStateResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LandedStateResponse, _impl_.landed_state_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LandedStateResponse, _impl_.landed_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
    {PROTOBUF_FIELD_OFFSET(LandedStateResponse, _impl_.landed_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* LandedStateResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.LandedStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
  if (this->_internal_landed_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_landed_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.LandedStateResponse)
  return target;
}

::size_t LandedStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.LandedStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
  if (this->_internal_landed_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_landed_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LandedStateResponse::_class_data_ = {
    LandedStateResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LandedStateResponse::GetClassData() const {
  return &_class_data_;
}

void LandedStateResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LandedStateResponse*>(&to_msg);
  auto& from = static_cast<const LandedStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.LandedStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_landed_state() != 0) {
    _this->_internal_set_landed_state(from._internal_landed_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LandedStateResponse::CopyFrom(const LandedStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.LandedStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LandedStateResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LandedStateResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LandedStateResponse::InternalSwap(LandedStateResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.landed_state_, other->_impl_.landed_state_);
}

::google::protobuf::Metadata LandedStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[7]);
}
// ===================================================================

class SubscribeArmedRequest::_Internal {
 public:
};

SubscribeArmedRequest::SubscribeArmedRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeArmedRequest)
}
SubscribeArmedRequest::SubscribeArmedRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeArmedRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeArmedRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeArmedRequest)
}









::google::protobuf::Metadata SubscribeArmedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[8]);
}
// ===================================================================

class ArmedResponse::_Internal {
 public:
};

ArmedResponse::ArmedResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ArmedResponse)
}
ArmedResponse::ArmedResponse(
    ::google::protobuf::Arena* arena, const ArmedResponse& from)
    : ArmedResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ArmedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ArmedResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.is_armed_ = {};
}
ArmedResponse::~ArmedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ArmedResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ArmedResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ArmedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ArmedResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.is_armed_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ArmedResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ArmedResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ArmedResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool is_armed = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ArmedResponse, _impl_.is_armed_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ArmedResponse, _impl_.is_armed_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_armed = 1;
    {PROTOBUF_FIELD_OFFSET(ArmedResponse, _impl_.is_armed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ArmedResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ArmedResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool is_armed = 1;
  if (this->_internal_is_armed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_armed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ArmedResponse)
  return target;
}

::size_t ArmedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ArmedResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_armed = 1;
  if (this->_internal_is_armed() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ArmedResponse::_class_data_ = {
    ArmedResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ArmedResponse::GetClassData() const {
  return &_class_data_;
}

void ArmedResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ArmedResponse*>(&to_msg);
  auto& from = static_cast<const ArmedResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ArmedResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_armed() != 0) {
    _this->_internal_set_is_armed(from._internal_is_armed());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ArmedResponse::CopyFrom(const ArmedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ArmedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ArmedResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ArmedResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ArmedResponse::InternalSwap(ArmedResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.is_armed_, other->_impl_.is_armed_);
}

::google::protobuf::Metadata ArmedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[9]);
}
// ===================================================================

class SubscribeVtolStateRequest::_Internal {
 public:
};

SubscribeVtolStateRequest::SubscribeVtolStateRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeVtolStateRequest)
}
SubscribeVtolStateRequest::SubscribeVtolStateRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeVtolStateRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeVtolStateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeVtolStateRequest)
}









::google::protobuf::Metadata SubscribeVtolStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[10]);
}
// ===================================================================

class VtolStateResponse::_Internal {
 public:
};

VtolStateResponse::VtolStateResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.VtolStateResponse)
}
VtolStateResponse::VtolStateResponse(
    ::google::protobuf::Arena* arena, const VtolStateResponse& from)
    : VtolStateResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VtolStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VtolStateResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.vtol_state_ = {};
}
VtolStateResponse::~VtolStateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.VtolStateResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VtolStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VtolStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.VtolStateResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vtol_state_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VtolStateResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> VtolStateResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VtolStateResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.VtolState vtol_state = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VtolStateResponse, _impl_.vtol_state_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VtolStateResponse, _impl_.vtol_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.VtolState vtol_state = 1;
    {PROTOBUF_FIELD_OFFSET(VtolStateResponse, _impl_.vtol_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* VtolStateResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.VtolStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mavsdk.rpc.telemetry.VtolState vtol_state = 1;
  if (this->_internal_vtol_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_vtol_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.VtolStateResponse)
  return target;
}

::size_t VtolStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.VtolStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.VtolState vtol_state = 1;
  if (this->_internal_vtol_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_vtol_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VtolStateResponse::_class_data_ = {
    VtolStateResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VtolStateResponse::GetClassData() const {
  return &_class_data_;
}

void VtolStateResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VtolStateResponse*>(&to_msg);
  auto& from = static_cast<const VtolStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.VtolStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vtol_state() != 0) {
    _this->_internal_set_vtol_state(from._internal_vtol_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VtolStateResponse::CopyFrom(const VtolStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.VtolStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VtolStateResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VtolStateResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VtolStateResponse::InternalSwap(VtolStateResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vtol_state_, other->_impl_.vtol_state_);
}

::google::protobuf::Metadata VtolStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[11]);
}
// ===================================================================

class SubscribeAttitudeQuaternionRequest::_Internal {
 public:
};

SubscribeAttitudeQuaternionRequest::SubscribeAttitudeQuaternionRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
}
SubscribeAttitudeQuaternionRequest::SubscribeAttitudeQuaternionRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeAttitudeQuaternionRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeAttitudeQuaternionRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
}









::google::protobuf::Metadata SubscribeAttitudeQuaternionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[12]);
}
// ===================================================================

class AttitudeQuaternionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AttitudeQuaternionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AttitudeQuaternionResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Quaternion& attitude_quaternion(const AttitudeQuaternionResponse* msg);
  static void set_has_attitude_quaternion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Quaternion& AttitudeQuaternionResponse::_Internal::attitude_quaternion(const AttitudeQuaternionResponse* msg) {
  return *msg->_impl_.attitude_quaternion_;
}
AttitudeQuaternionResponse::AttitudeQuaternionResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
}
inline PROTOBUF_NDEBUG_INLINE AttitudeQuaternionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AttitudeQuaternionResponse::AttitudeQuaternionResponse(
    ::google::protobuf::Arena* arena,
    const AttitudeQuaternionResponse& from)
    : ::google::protobuf::Message(arena) {
  AttitudeQuaternionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.attitude_quaternion_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Quaternion>(arena, *from._impl_.attitude_quaternion_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
}
inline PROTOBUF_NDEBUG_INLINE AttitudeQuaternionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AttitudeQuaternionResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.attitude_quaternion_ = {};
}
AttitudeQuaternionResponse::~AttitudeQuaternionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AttitudeQuaternionResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.attitude_quaternion_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AttitudeQuaternionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.attitude_quaternion_ != nullptr);
    _impl_.attitude_quaternion_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AttitudeQuaternionResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AttitudeQuaternionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AttitudeQuaternionResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AttitudeQuaternionResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AttitudeQuaternionResponse, _impl_.attitude_quaternion_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
    {PROTOBUF_FIELD_OFFSET(AttitudeQuaternionResponse, _impl_.attitude_quaternion_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Quaternion>()},
  }}, {{
  }},
};

::uint8_t* AttitudeQuaternionResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::attitude_quaternion(this),
        _Internal::attitude_quaternion(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  return target;
}

::size_t AttitudeQuaternionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.attitude_quaternion_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AttitudeQuaternionResponse::_class_data_ = {
    AttitudeQuaternionResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AttitudeQuaternionResponse::GetClassData() const {
  return &_class_data_;
}

void AttitudeQuaternionResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AttitudeQuaternionResponse*>(&to_msg);
  auto& from = static_cast<const AttitudeQuaternionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_attitude_quaternion()->::mavsdk::rpc::telemetry::Quaternion::MergeFrom(
        from._internal_attitude_quaternion());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AttitudeQuaternionResponse::CopyFrom(const AttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AttitudeQuaternionResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AttitudeQuaternionResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AttitudeQuaternionResponse::InternalSwap(AttitudeQuaternionResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.attitude_quaternion_, other->_impl_.attitude_quaternion_);
}

::google::protobuf::Metadata AttitudeQuaternionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[13]);
}
// ===================================================================

class SubscribeAttitudeEulerRequest::_Internal {
 public:
};

SubscribeAttitudeEulerRequest::SubscribeAttitudeEulerRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
}
SubscribeAttitudeEulerRequest::SubscribeAttitudeEulerRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeAttitudeEulerRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeAttitudeEulerRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
}









::google::protobuf::Metadata SubscribeAttitudeEulerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[14]);
}
// ===================================================================

class AttitudeEulerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AttitudeEulerResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AttitudeEulerResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::EulerAngle& attitude_euler(const AttitudeEulerResponse* msg);
  static void set_has_attitude_euler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::EulerAngle& AttitudeEulerResponse::_Internal::attitude_euler(const AttitudeEulerResponse* msg) {
  return *msg->_impl_.attitude_euler_;
}
AttitudeEulerResponse::AttitudeEulerResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AttitudeEulerResponse)
}
inline PROTOBUF_NDEBUG_INLINE AttitudeEulerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AttitudeEulerResponse::AttitudeEulerResponse(
    ::google::protobuf::Arena* arena,
    const AttitudeEulerResponse& from)
    : ::google::protobuf::Message(arena) {
  AttitudeEulerResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.attitude_euler_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::EulerAngle>(arena, *from._impl_.attitude_euler_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AttitudeEulerResponse)
}
inline PROTOBUF_NDEBUG_INLINE AttitudeEulerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AttitudeEulerResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.attitude_euler_ = {};
}
AttitudeEulerResponse::~AttitudeEulerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AttitudeEulerResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.attitude_euler_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AttitudeEulerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.attitude_euler_ != nullptr);
    _impl_.attitude_euler_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AttitudeEulerResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AttitudeEulerResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AttitudeEulerResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AttitudeEulerResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AttitudeEulerResponse, _impl_.attitude_euler_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
    {PROTOBUF_FIELD_OFFSET(AttitudeEulerResponse, _impl_.attitude_euler_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::EulerAngle>()},
  }}, {{
  }},
};

::uint8_t* AttitudeEulerResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::attitude_euler(this),
        _Internal::attitude_euler(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  return target;
}

::size_t AttitudeEulerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.attitude_euler_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AttitudeEulerResponse::_class_data_ = {
    AttitudeEulerResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AttitudeEulerResponse::GetClassData() const {
  return &_class_data_;
}

void AttitudeEulerResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AttitudeEulerResponse*>(&to_msg);
  auto& from = static_cast<const AttitudeEulerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_attitude_euler()->::mavsdk::rpc::telemetry::EulerAngle::MergeFrom(
        from._internal_attitude_euler());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AttitudeEulerResponse::CopyFrom(const AttitudeEulerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AttitudeEulerResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AttitudeEulerResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AttitudeEulerResponse::InternalSwap(AttitudeEulerResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.attitude_euler_, other->_impl_.attitude_euler_);
}

::google::protobuf::Metadata AttitudeEulerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[15]);
}
// ===================================================================

class SubscribeAttitudeAngularVelocityBodyRequest::_Internal {
 public:
};

SubscribeAttitudeAngularVelocityBodyRequest::SubscribeAttitudeAngularVelocityBodyRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
}
SubscribeAttitudeAngularVelocityBodyRequest::SubscribeAttitudeAngularVelocityBodyRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeAttitudeAngularVelocityBodyRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeAttitudeAngularVelocityBodyRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
}









::google::protobuf::Metadata SubscribeAttitudeAngularVelocityBodyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[16]);
}
// ===================================================================

class AttitudeAngularVelocityBodyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AttitudeAngularVelocityBodyResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AttitudeAngularVelocityBodyResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::AngularVelocityBody& attitude_angular_velocity_body(const AttitudeAngularVelocityBodyResponse* msg);
  static void set_has_attitude_angular_velocity_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::AngularVelocityBody& AttitudeAngularVelocityBodyResponse::_Internal::attitude_angular_velocity_body(const AttitudeAngularVelocityBodyResponse* msg) {
  return *msg->_impl_.attitude_angular_velocity_body_;
}
AttitudeAngularVelocityBodyResponse::AttitudeAngularVelocityBodyResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
}
inline PROTOBUF_NDEBUG_INLINE AttitudeAngularVelocityBodyResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AttitudeAngularVelocityBodyResponse::AttitudeAngularVelocityBodyResponse(
    ::google::protobuf::Arena* arena,
    const AttitudeAngularVelocityBodyResponse& from)
    : ::google::protobuf::Message(arena) {
  AttitudeAngularVelocityBodyResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.attitude_angular_velocity_body_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::AngularVelocityBody>(arena, *from._impl_.attitude_angular_velocity_body_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
}
inline PROTOBUF_NDEBUG_INLINE AttitudeAngularVelocityBodyResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AttitudeAngularVelocityBodyResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.attitude_angular_velocity_body_ = {};
}
AttitudeAngularVelocityBodyResponse::~AttitudeAngularVelocityBodyResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AttitudeAngularVelocityBodyResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.attitude_angular_velocity_body_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AttitudeAngularVelocityBodyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.attitude_angular_velocity_body_ != nullptr);
    _impl_.attitude_angular_velocity_body_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AttitudeAngularVelocityBodyResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AttitudeAngularVelocityBodyResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AttitudeAngularVelocityBodyResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AttitudeAngularVelocityBodyResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AttitudeAngularVelocityBodyResponse, _impl_.attitude_angular_velocity_body_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
    {PROTOBUF_FIELD_OFFSET(AttitudeAngularVelocityBodyResponse, _impl_.attitude_angular_velocity_body_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::AngularVelocityBody>()},
  }}, {{
  }},
};

::uint8_t* AttitudeAngularVelocityBodyResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::attitude_angular_velocity_body(this),
        _Internal::attitude_angular_velocity_body(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  return target;
}

::size_t AttitudeAngularVelocityBodyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.attitude_angular_velocity_body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AttitudeAngularVelocityBodyResponse::_class_data_ = {
    AttitudeAngularVelocityBodyResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AttitudeAngularVelocityBodyResponse::GetClassData() const {
  return &_class_data_;
}

void AttitudeAngularVelocityBodyResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AttitudeAngularVelocityBodyResponse*>(&to_msg);
  auto& from = static_cast<const AttitudeAngularVelocityBodyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_attitude_angular_velocity_body()->::mavsdk::rpc::telemetry::AngularVelocityBody::MergeFrom(
        from._internal_attitude_angular_velocity_body());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AttitudeAngularVelocityBodyResponse::CopyFrom(const AttitudeAngularVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AttitudeAngularVelocityBodyResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AttitudeAngularVelocityBodyResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AttitudeAngularVelocityBodyResponse::InternalSwap(AttitudeAngularVelocityBodyResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.attitude_angular_velocity_body_, other->_impl_.attitude_angular_velocity_body_);
}

::google::protobuf::Metadata AttitudeAngularVelocityBodyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[17]);
}
// ===================================================================

class SubscribeCameraAttitudeQuaternionRequest::_Internal {
 public:
};

SubscribeCameraAttitudeQuaternionRequest::SubscribeCameraAttitudeQuaternionRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
}
SubscribeCameraAttitudeQuaternionRequest::SubscribeCameraAttitudeQuaternionRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeCameraAttitudeQuaternionRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeCameraAttitudeQuaternionRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
}









::google::protobuf::Metadata SubscribeCameraAttitudeQuaternionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[18]);
}
// ===================================================================

class CameraAttitudeQuaternionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraAttitudeQuaternionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CameraAttitudeQuaternionResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Quaternion& attitude_quaternion(const CameraAttitudeQuaternionResponse* msg);
  static void set_has_attitude_quaternion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Quaternion& CameraAttitudeQuaternionResponse::_Internal::attitude_quaternion(const CameraAttitudeQuaternionResponse* msg) {
  return *msg->_impl_.attitude_quaternion_;
}
CameraAttitudeQuaternionResponse::CameraAttitudeQuaternionResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
}
inline PROTOBUF_NDEBUG_INLINE CameraAttitudeQuaternionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CameraAttitudeQuaternionResponse::CameraAttitudeQuaternionResponse(
    ::google::protobuf::Arena* arena,
    const CameraAttitudeQuaternionResponse& from)
    : ::google::protobuf::Message(arena) {
  CameraAttitudeQuaternionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.attitude_quaternion_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Quaternion>(arena, *from._impl_.attitude_quaternion_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
}
inline PROTOBUF_NDEBUG_INLINE CameraAttitudeQuaternionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CameraAttitudeQuaternionResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.attitude_quaternion_ = {};
}
CameraAttitudeQuaternionResponse::~CameraAttitudeQuaternionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CameraAttitudeQuaternionResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.attitude_quaternion_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CameraAttitudeQuaternionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.attitude_quaternion_ != nullptr);
    _impl_.attitude_quaternion_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CameraAttitudeQuaternionResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CameraAttitudeQuaternionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CameraAttitudeQuaternionResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CameraAttitudeQuaternionResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CameraAttitudeQuaternionResponse, _impl_.attitude_quaternion_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
    {PROTOBUF_FIELD_OFFSET(CameraAttitudeQuaternionResponse, _impl_.attitude_quaternion_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Quaternion>()},
  }}, {{
  }},
};

::uint8_t* CameraAttitudeQuaternionResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::attitude_quaternion(this),
        _Internal::attitude_quaternion(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  return target;
}

::size_t CameraAttitudeQuaternionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.attitude_quaternion_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CameraAttitudeQuaternionResponse::_class_data_ = {
    CameraAttitudeQuaternionResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CameraAttitudeQuaternionResponse::GetClassData() const {
  return &_class_data_;
}

void CameraAttitudeQuaternionResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CameraAttitudeQuaternionResponse*>(&to_msg);
  auto& from = static_cast<const CameraAttitudeQuaternionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_attitude_quaternion()->::mavsdk::rpc::telemetry::Quaternion::MergeFrom(
        from._internal_attitude_quaternion());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CameraAttitudeQuaternionResponse::CopyFrom(const CameraAttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CameraAttitudeQuaternionResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CameraAttitudeQuaternionResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CameraAttitudeQuaternionResponse::InternalSwap(CameraAttitudeQuaternionResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.attitude_quaternion_, other->_impl_.attitude_quaternion_);
}

::google::protobuf::Metadata CameraAttitudeQuaternionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[19]);
}
// ===================================================================

class SubscribeCameraAttitudeEulerRequest::_Internal {
 public:
};

SubscribeCameraAttitudeEulerRequest::SubscribeCameraAttitudeEulerRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
}
SubscribeCameraAttitudeEulerRequest::SubscribeCameraAttitudeEulerRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeCameraAttitudeEulerRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeCameraAttitudeEulerRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
}









::google::protobuf::Metadata SubscribeCameraAttitudeEulerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[20]);
}
// ===================================================================

class CameraAttitudeEulerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraAttitudeEulerResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CameraAttitudeEulerResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::EulerAngle& attitude_euler(const CameraAttitudeEulerResponse* msg);
  static void set_has_attitude_euler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::EulerAngle& CameraAttitudeEulerResponse::_Internal::attitude_euler(const CameraAttitudeEulerResponse* msg) {
  return *msg->_impl_.attitude_euler_;
}
CameraAttitudeEulerResponse::CameraAttitudeEulerResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
}
inline PROTOBUF_NDEBUG_INLINE CameraAttitudeEulerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CameraAttitudeEulerResponse::CameraAttitudeEulerResponse(
    ::google::protobuf::Arena* arena,
    const CameraAttitudeEulerResponse& from)
    : ::google::protobuf::Message(arena) {
  CameraAttitudeEulerResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.attitude_euler_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::EulerAngle>(arena, *from._impl_.attitude_euler_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
}
inline PROTOBUF_NDEBUG_INLINE CameraAttitudeEulerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CameraAttitudeEulerResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.attitude_euler_ = {};
}
CameraAttitudeEulerResponse::~CameraAttitudeEulerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CameraAttitudeEulerResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.attitude_euler_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CameraAttitudeEulerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.attitude_euler_ != nullptr);
    _impl_.attitude_euler_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CameraAttitudeEulerResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CameraAttitudeEulerResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CameraAttitudeEulerResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CameraAttitudeEulerResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CameraAttitudeEulerResponse, _impl_.attitude_euler_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
    {PROTOBUF_FIELD_OFFSET(CameraAttitudeEulerResponse, _impl_.attitude_euler_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::EulerAngle>()},
  }}, {{
  }},
};

::uint8_t* CameraAttitudeEulerResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::attitude_euler(this),
        _Internal::attitude_euler(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  return target;
}

::size_t CameraAttitudeEulerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.attitude_euler_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CameraAttitudeEulerResponse::_class_data_ = {
    CameraAttitudeEulerResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CameraAttitudeEulerResponse::GetClassData() const {
  return &_class_data_;
}

void CameraAttitudeEulerResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CameraAttitudeEulerResponse*>(&to_msg);
  auto& from = static_cast<const CameraAttitudeEulerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_attitude_euler()->::mavsdk::rpc::telemetry::EulerAngle::MergeFrom(
        from._internal_attitude_euler());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CameraAttitudeEulerResponse::CopyFrom(const CameraAttitudeEulerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CameraAttitudeEulerResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CameraAttitudeEulerResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CameraAttitudeEulerResponse::InternalSwap(CameraAttitudeEulerResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.attitude_euler_, other->_impl_.attitude_euler_);
}

::google::protobuf::Metadata CameraAttitudeEulerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[21]);
}
// ===================================================================

class SubscribeVelocityNedRequest::_Internal {
 public:
};

SubscribeVelocityNedRequest::SubscribeVelocityNedRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
}
SubscribeVelocityNedRequest::SubscribeVelocityNedRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeVelocityNedRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeVelocityNedRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
}









::google::protobuf::Metadata SubscribeVelocityNedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[22]);
}
// ===================================================================

class VelocityNedResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<VelocityNedResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VelocityNedResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::VelocityNed& velocity_ned(const VelocityNedResponse* msg);
  static void set_has_velocity_ned(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::VelocityNed& VelocityNedResponse::_Internal::velocity_ned(const VelocityNedResponse* msg) {
  return *msg->_impl_.velocity_ned_;
}
VelocityNedResponse::VelocityNedResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.VelocityNedResponse)
}
inline PROTOBUF_NDEBUG_INLINE VelocityNedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

VelocityNedResponse::VelocityNedResponse(
    ::google::protobuf::Arena* arena,
    const VelocityNedResponse& from)
    : ::google::protobuf::Message(arena) {
  VelocityNedResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.velocity_ned_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::VelocityNed>(arena, *from._impl_.velocity_ned_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.VelocityNedResponse)
}
inline PROTOBUF_NDEBUG_INLINE VelocityNedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VelocityNedResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.velocity_ned_ = {};
}
VelocityNedResponse::~VelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.VelocityNedResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VelocityNedResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.velocity_ned_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.velocity_ned_ != nullptr);
    _impl_.velocity_ned_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VelocityNedResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> VelocityNedResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VelocityNedResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VelocityNedResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.VelocityNed velocity_ned = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(VelocityNedResponse, _impl_.velocity_ned_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.VelocityNed velocity_ned = 1;
    {PROTOBUF_FIELD_OFFSET(VelocityNedResponse, _impl_.velocity_ned_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::VelocityNed>()},
  }}, {{
  }},
};

::uint8_t* VelocityNedResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.VelocityNed velocity_ned = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::velocity_ned(this),
        _Internal::velocity_ned(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.VelocityNedResponse)
  return target;
}

::size_t VelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.VelocityNed velocity_ned = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_ned_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VelocityNedResponse::_class_data_ = {
    VelocityNedResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VelocityNedResponse::GetClassData() const {
  return &_class_data_;
}

void VelocityNedResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VelocityNedResponse*>(&to_msg);
  auto& from = static_cast<const VelocityNedResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_velocity_ned()->::mavsdk::rpc::telemetry::VelocityNed::MergeFrom(
        from._internal_velocity_ned());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VelocityNedResponse::CopyFrom(const VelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VelocityNedResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VelocityNedResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VelocityNedResponse::InternalSwap(VelocityNedResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.velocity_ned_, other->_impl_.velocity_ned_);
}

::google::protobuf::Metadata VelocityNedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[23]);
}
// ===================================================================

class SubscribeGpsInfoRequest::_Internal {
 public:
};

SubscribeGpsInfoRequest::SubscribeGpsInfoRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
}
SubscribeGpsInfoRequest::SubscribeGpsInfoRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeGpsInfoRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeGpsInfoRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
}









::google::protobuf::Metadata SubscribeGpsInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[24]);
}
// ===================================================================

class GpsInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GpsInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GpsInfoResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::GpsInfo& gps_info(const GpsInfoResponse* msg);
  static void set_has_gps_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::GpsInfo& GpsInfoResponse::_Internal::gps_info(const GpsInfoResponse* msg) {
  return *msg->_impl_.gps_info_;
}
GpsInfoResponse::GpsInfoResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GpsInfoResponse)
}
inline PROTOBUF_NDEBUG_INLINE GpsInfoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GpsInfoResponse::GpsInfoResponse(
    ::google::protobuf::Arena* arena,
    const GpsInfoResponse& from)
    : ::google::protobuf::Message(arena) {
  GpsInfoResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.gps_info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::GpsInfo>(arena, *from._impl_.gps_info_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GpsInfoResponse)
}
inline PROTOBUF_NDEBUG_INLINE GpsInfoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GpsInfoResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gps_info_ = {};
}
GpsInfoResponse::~GpsInfoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GpsInfoResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GpsInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.gps_info_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GpsInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gps_info_ != nullptr);
    _impl_.gps_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GpsInfoResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GpsInfoResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GpsInfoResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GpsInfoResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GpsInfoResponse, _impl_.gps_info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
    {PROTOBUF_FIELD_OFFSET(GpsInfoResponse, _impl_.gps_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::GpsInfo>()},
  }}, {{
  }},
};

::uint8_t* GpsInfoResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::gps_info(this),
        _Internal::gps_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GpsInfoResponse)
  return target;
}

::size_t GpsInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gps_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GpsInfoResponse::_class_data_ = {
    GpsInfoResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GpsInfoResponse::GetClassData() const {
  return &_class_data_;
}

void GpsInfoResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GpsInfoResponse*>(&to_msg);
  auto& from = static_cast<const GpsInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gps_info()->::mavsdk::rpc::telemetry::GpsInfo::MergeFrom(
        from._internal_gps_info());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GpsInfoResponse::CopyFrom(const GpsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GpsInfoResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GpsInfoResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GpsInfoResponse::InternalSwap(GpsInfoResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gps_info_, other->_impl_.gps_info_);
}

::google::protobuf::Metadata GpsInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[25]);
}
// ===================================================================

class SubscribeRawGpsRequest::_Internal {
 public:
};

SubscribeRawGpsRequest::SubscribeRawGpsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
}
SubscribeRawGpsRequest::SubscribeRawGpsRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeRawGpsRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeRawGpsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
}









::google::protobuf::Metadata SubscribeRawGpsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[26]);
}
// ===================================================================

class RawGpsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RawGpsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RawGpsResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::RawGps& raw_gps(const RawGpsResponse* msg);
  static void set_has_raw_gps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::RawGps& RawGpsResponse::_Internal::raw_gps(const RawGpsResponse* msg) {
  return *msg->_impl_.raw_gps_;
}
RawGpsResponse::RawGpsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.RawGpsResponse)
}
inline PROTOBUF_NDEBUG_INLINE RawGpsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RawGpsResponse::RawGpsResponse(
    ::google::protobuf::Arena* arena,
    const RawGpsResponse& from)
    : ::google::protobuf::Message(arena) {
  RawGpsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.raw_gps_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::RawGps>(arena, *from._impl_.raw_gps_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.RawGpsResponse)
}
inline PROTOBUF_NDEBUG_INLINE RawGpsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RawGpsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.raw_gps_ = {};
}
RawGpsResponse::~RawGpsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RawGpsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RawGpsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.raw_gps_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RawGpsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RawGpsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.raw_gps_ != nullptr);
    _impl_.raw_gps_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RawGpsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> RawGpsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RawGpsResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RawGpsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.RawGps raw_gps = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RawGpsResponse, _impl_.raw_gps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.RawGps raw_gps = 1;
    {PROTOBUF_FIELD_OFFSET(RawGpsResponse, _impl_.raw_gps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::RawGps>()},
  }}, {{
  }},
};

::uint8_t* RawGpsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RawGpsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.RawGps raw_gps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::raw_gps(this),
        _Internal::raw_gps(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RawGpsResponse)
  return target;
}

::size_t RawGpsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RawGpsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.RawGps raw_gps = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.raw_gps_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RawGpsResponse::_class_data_ = {
    RawGpsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RawGpsResponse::GetClassData() const {
  return &_class_data_;
}

void RawGpsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RawGpsResponse*>(&to_msg);
  auto& from = static_cast<const RawGpsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RawGpsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_raw_gps()->::mavsdk::rpc::telemetry::RawGps::MergeFrom(
        from._internal_raw_gps());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RawGpsResponse::CopyFrom(const RawGpsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RawGpsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RawGpsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RawGpsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RawGpsResponse::InternalSwap(RawGpsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.raw_gps_, other->_impl_.raw_gps_);
}

::google::protobuf::Metadata RawGpsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[27]);
}
// ===================================================================

class SubscribeBatteryRequest::_Internal {
 public:
};

SubscribeBatteryRequest::SubscribeBatteryRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
}
SubscribeBatteryRequest::SubscribeBatteryRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeBatteryRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeBatteryRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
}









::google::protobuf::Metadata SubscribeBatteryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[28]);
}
// ===================================================================

class BatteryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BatteryResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BatteryResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Battery& battery(const BatteryResponse* msg);
  static void set_has_battery(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Battery& BatteryResponse::_Internal::battery(const BatteryResponse* msg) {
  return *msg->_impl_.battery_;
}
BatteryResponse::BatteryResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.BatteryResponse)
}
inline PROTOBUF_NDEBUG_INLINE BatteryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BatteryResponse::BatteryResponse(
    ::google::protobuf::Arena* arena,
    const BatteryResponse& from)
    : ::google::protobuf::Message(arena) {
  BatteryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.battery_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Battery>(arena, *from._impl_.battery_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.BatteryResponse)
}
inline PROTOBUF_NDEBUG_INLINE BatteryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BatteryResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.battery_ = {};
}
BatteryResponse::~BatteryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.BatteryResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BatteryResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.battery_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BatteryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.BatteryResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.battery_ != nullptr);
    _impl_.battery_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BatteryResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> BatteryResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BatteryResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BatteryResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Battery battery = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BatteryResponse, _impl_.battery_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Battery battery = 1;
    {PROTOBUF_FIELD_OFFSET(BatteryResponse, _impl_.battery_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Battery>()},
  }}, {{
  }},
};

::uint8_t* BatteryResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.BatteryResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Battery battery = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::battery(this),
        _Internal::battery(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.BatteryResponse)
  return target;
}

::size_t BatteryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.BatteryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Battery battery = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.battery_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BatteryResponse::_class_data_ = {
    BatteryResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BatteryResponse::GetClassData() const {
  return &_class_data_;
}

void BatteryResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BatteryResponse*>(&to_msg);
  auto& from = static_cast<const BatteryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.BatteryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_battery()->::mavsdk::rpc::telemetry::Battery::MergeFrom(
        from._internal_battery());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BatteryResponse::CopyFrom(const BatteryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.BatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BatteryResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BatteryResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BatteryResponse::InternalSwap(BatteryResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.battery_, other->_impl_.battery_);
}

::google::protobuf::Metadata BatteryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[29]);
}
// ===================================================================

class SubscribeFlightModeRequest::_Internal {
 public:
};

SubscribeFlightModeRequest::SubscribeFlightModeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
}
SubscribeFlightModeRequest::SubscribeFlightModeRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeFlightModeRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeFlightModeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
}









::google::protobuf::Metadata SubscribeFlightModeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[30]);
}
// ===================================================================

class FlightModeResponse::_Internal {
 public:
};

FlightModeResponse::FlightModeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.FlightModeResponse)
}
FlightModeResponse::FlightModeResponse(
    ::google::protobuf::Arena* arena, const FlightModeResponse& from)
    : FlightModeResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FlightModeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FlightModeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.flight_mode_ = {};
}
FlightModeResponse::~FlightModeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.FlightModeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FlightModeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FlightModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.FlightModeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flight_mode_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FlightModeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> FlightModeResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FlightModeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FlightModeResponse, _impl_.flight_mode_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FlightModeResponse, _impl_.flight_mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
    {PROTOBUF_FIELD_OFFSET(FlightModeResponse, _impl_.flight_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FlightModeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.FlightModeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
  if (this->_internal_flight_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_flight_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.FlightModeResponse)
  return target;
}

::size_t FlightModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.FlightModeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
  if (this->_internal_flight_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flight_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FlightModeResponse::_class_data_ = {
    FlightModeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FlightModeResponse::GetClassData() const {
  return &_class_data_;
}

void FlightModeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FlightModeResponse*>(&to_msg);
  auto& from = static_cast<const FlightModeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.FlightModeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_flight_mode() != 0) {
    _this->_internal_set_flight_mode(from._internal_flight_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FlightModeResponse::CopyFrom(const FlightModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.FlightModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FlightModeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FlightModeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FlightModeResponse::InternalSwap(FlightModeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.flight_mode_, other->_impl_.flight_mode_);
}

::google::protobuf::Metadata FlightModeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[31]);
}
// ===================================================================

class SubscribeHealthRequest::_Internal {
 public:
};

SubscribeHealthRequest::SubscribeHealthRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeHealthRequest)
}
SubscribeHealthRequest::SubscribeHealthRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeHealthRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeHealthRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeHealthRequest)
}









::google::protobuf::Metadata SubscribeHealthRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[32]);
}
// ===================================================================

class HealthResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<HealthResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HealthResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Health& health(const HealthResponse* msg);
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Health& HealthResponse::_Internal::health(const HealthResponse* msg) {
  return *msg->_impl_.health_;
}
HealthResponse::HealthResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.HealthResponse)
}
inline PROTOBUF_NDEBUG_INLINE HealthResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HealthResponse::HealthResponse(
    ::google::protobuf::Arena* arena,
    const HealthResponse& from)
    : ::google::protobuf::Message(arena) {
  HealthResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.health_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Health>(arena, *from._impl_.health_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.HealthResponse)
}
inline PROTOBUF_NDEBUG_INLINE HealthResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HealthResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.health_ = {};
}
HealthResponse::~HealthResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.HealthResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealthResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.health_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HealthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.HealthResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.health_ != nullptr);
    _impl_.health_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealthResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> HealthResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HealthResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HealthResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Health health = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HealthResponse, _impl_.health_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Health health = 1;
    {PROTOBUF_FIELD_OFFSET(HealthResponse, _impl_.health_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Health>()},
  }}, {{
  }},
};

::uint8_t* HealthResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.HealthResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Health health = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::health(this),
        _Internal::health(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.HealthResponse)
  return target;
}

::size_t HealthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.HealthResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Health health = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.health_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HealthResponse::_class_data_ = {
    HealthResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HealthResponse::GetClassData() const {
  return &_class_data_;
}

void HealthResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HealthResponse*>(&to_msg);
  auto& from = static_cast<const HealthResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.HealthResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_health()->::mavsdk::rpc::telemetry::Health::MergeFrom(
        from._internal_health());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthResponse::CopyFrom(const HealthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.HealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealthResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HealthResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HealthResponse::InternalSwap(HealthResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.health_, other->_impl_.health_);
}

::google::protobuf::Metadata HealthResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[33]);
}
// ===================================================================

class SubscribeRcStatusRequest::_Internal {
 public:
};

SubscribeRcStatusRequest::SubscribeRcStatusRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
}
SubscribeRcStatusRequest::SubscribeRcStatusRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeRcStatusRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeRcStatusRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
}









::google::protobuf::Metadata SubscribeRcStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[34]);
}
// ===================================================================

class RcStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RcStatusResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RcStatusResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::RcStatus& rc_status(const RcStatusResponse* msg);
  static void set_has_rc_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::RcStatus& RcStatusResponse::_Internal::rc_status(const RcStatusResponse* msg) {
  return *msg->_impl_.rc_status_;
}
RcStatusResponse::RcStatusResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.RcStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE RcStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RcStatusResponse::RcStatusResponse(
    ::google::protobuf::Arena* arena,
    const RcStatusResponse& from)
    : ::google::protobuf::Message(arena) {
  RcStatusResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.rc_status_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::RcStatus>(arena, *from._impl_.rc_status_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.RcStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE RcStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RcStatusResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rc_status_ = {};
}
RcStatusResponse::~RcStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RcStatusResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RcStatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.rc_status_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RcStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RcStatusResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.rc_status_ != nullptr);
    _impl_.rc_status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RcStatusResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> RcStatusResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RcStatusResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RcStatusResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RcStatusResponse, _impl_.rc_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
    {PROTOBUF_FIELD_OFFSET(RcStatusResponse, _impl_.rc_status_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::RcStatus>()},
  }}, {{
  }},
};

::uint8_t* RcStatusResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RcStatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::rc_status(this),
        _Internal::rc_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RcStatusResponse)
  return target;
}

::size_t RcStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RcStatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rc_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RcStatusResponse::_class_data_ = {
    RcStatusResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RcStatusResponse::GetClassData() const {
  return &_class_data_;
}

void RcStatusResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RcStatusResponse*>(&to_msg);
  auto& from = static_cast<const RcStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RcStatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_rc_status()->::mavsdk::rpc::telemetry::RcStatus::MergeFrom(
        from._internal_rc_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RcStatusResponse::CopyFrom(const RcStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RcStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RcStatusResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RcStatusResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RcStatusResponse::InternalSwap(RcStatusResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.rc_status_, other->_impl_.rc_status_);
}

::google::protobuf::Metadata RcStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[35]);
}
// ===================================================================

class SubscribeStatusTextRequest::_Internal {
 public:
};

SubscribeStatusTextRequest::SubscribeStatusTextRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
}
SubscribeStatusTextRequest::SubscribeStatusTextRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeStatusTextRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeStatusTextRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
}









::google::protobuf::Metadata SubscribeStatusTextRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[36]);
}
// ===================================================================

class StatusTextResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusTextResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StatusTextResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::StatusText& status_text(const StatusTextResponse* msg);
  static void set_has_status_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::StatusText& StatusTextResponse::_Internal::status_text(const StatusTextResponse* msg) {
  return *msg->_impl_.status_text_;
}
StatusTextResponse::StatusTextResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.StatusTextResponse)
}
inline PROTOBUF_NDEBUG_INLINE StatusTextResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StatusTextResponse::StatusTextResponse(
    ::google::protobuf::Arena* arena,
    const StatusTextResponse& from)
    : ::google::protobuf::Message(arena) {
  StatusTextResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.status_text_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::StatusText>(arena, *from._impl_.status_text_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.StatusTextResponse)
}
inline PROTOBUF_NDEBUG_INLINE StatusTextResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StatusTextResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.status_text_ = {};
}
StatusTextResponse::~StatusTextResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.StatusTextResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StatusTextResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.status_text_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StatusTextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.StatusTextResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_text_ != nullptr);
    _impl_.status_text_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StatusTextResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> StatusTextResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StatusTextResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StatusTextResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.StatusText status_text = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StatusTextResponse, _impl_.status_text_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.StatusText status_text = 1;
    {PROTOBUF_FIELD_OFFSET(StatusTextResponse, _impl_.status_text_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::StatusText>()},
  }}, {{
  }},
};

::uint8_t* StatusTextResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.StatusTextResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.StatusText status_text = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::status_text(this),
        _Internal::status_text(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.StatusTextResponse)
  return target;
}

::size_t StatusTextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.StatusTextResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.StatusText status_text = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.status_text_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StatusTextResponse::_class_data_ = {
    StatusTextResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StatusTextResponse::GetClassData() const {
  return &_class_data_;
}

void StatusTextResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StatusTextResponse*>(&to_msg);
  auto& from = static_cast<const StatusTextResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.StatusTextResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_status_text()->::mavsdk::rpc::telemetry::StatusText::MergeFrom(
        from._internal_status_text());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StatusTextResponse::CopyFrom(const StatusTextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.StatusTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StatusTextResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StatusTextResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StatusTextResponse::InternalSwap(StatusTextResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.status_text_, other->_impl_.status_text_);
}

::google::protobuf::Metadata StatusTextResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[37]);
}
// ===================================================================

class SubscribeActuatorControlTargetRequest::_Internal {
 public:
};

SubscribeActuatorControlTargetRequest::SubscribeActuatorControlTargetRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
}
SubscribeActuatorControlTargetRequest::SubscribeActuatorControlTargetRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeActuatorControlTargetRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeActuatorControlTargetRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
}









::google::protobuf::Metadata SubscribeActuatorControlTargetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[38]);
}
// ===================================================================

class ActuatorControlTargetResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ActuatorControlTargetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ActuatorControlTargetResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::ActuatorControlTarget& actuator_control_target(const ActuatorControlTargetResponse* msg);
  static void set_has_actuator_control_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::ActuatorControlTarget& ActuatorControlTargetResponse::_Internal::actuator_control_target(const ActuatorControlTargetResponse* msg) {
  return *msg->_impl_.actuator_control_target_;
}
ActuatorControlTargetResponse::ActuatorControlTargetResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorControlTargetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ActuatorControlTargetResponse::ActuatorControlTargetResponse(
    ::google::protobuf::Arena* arena,
    const ActuatorControlTargetResponse& from)
    : ::google::protobuf::Message(arena) {
  ActuatorControlTargetResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.actuator_control_target_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorControlTarget>(arena, *from._impl_.actuator_control_target_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorControlTargetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ActuatorControlTargetResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.actuator_control_target_ = {};
}
ActuatorControlTargetResponse::~ActuatorControlTargetResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ActuatorControlTargetResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.actuator_control_target_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ActuatorControlTargetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.actuator_control_target_ != nullptr);
    _impl_.actuator_control_target_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ActuatorControlTargetResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ActuatorControlTargetResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ActuatorControlTargetResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ActuatorControlTargetResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ActuatorControlTargetResponse, _impl_.actuator_control_target_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
    {PROTOBUF_FIELD_OFFSET(ActuatorControlTargetResponse, _impl_.actuator_control_target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::ActuatorControlTarget>()},
  }}, {{
  }},
};

::uint8_t* ActuatorControlTargetResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::actuator_control_target(this),
        _Internal::actuator_control_target(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  return target;
}

::size_t ActuatorControlTargetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.actuator_control_target_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ActuatorControlTargetResponse::_class_data_ = {
    ActuatorControlTargetResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ActuatorControlTargetResponse::GetClassData() const {
  return &_class_data_;
}

void ActuatorControlTargetResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ActuatorControlTargetResponse*>(&to_msg);
  auto& from = static_cast<const ActuatorControlTargetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_actuator_control_target()->::mavsdk::rpc::telemetry::ActuatorControlTarget::MergeFrom(
        from._internal_actuator_control_target());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ActuatorControlTargetResponse::CopyFrom(const ActuatorControlTargetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ActuatorControlTargetResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ActuatorControlTargetResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ActuatorControlTargetResponse::InternalSwap(ActuatorControlTargetResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.actuator_control_target_, other->_impl_.actuator_control_target_);
}

::google::protobuf::Metadata ActuatorControlTargetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[39]);
}
// ===================================================================

class SubscribeActuatorOutputStatusRequest::_Internal {
 public:
};

SubscribeActuatorOutputStatusRequest::SubscribeActuatorOutputStatusRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
}
SubscribeActuatorOutputStatusRequest::SubscribeActuatorOutputStatusRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeActuatorOutputStatusRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeActuatorOutputStatusRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
}









::google::protobuf::Metadata SubscribeActuatorOutputStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[40]);
}
// ===================================================================

class ActuatorOutputStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ActuatorOutputStatusResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ActuatorOutputStatusResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::ActuatorOutputStatus& actuator_output_status(const ActuatorOutputStatusResponse* msg);
  static void set_has_actuator_output_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::ActuatorOutputStatus& ActuatorOutputStatusResponse::_Internal::actuator_output_status(const ActuatorOutputStatusResponse* msg) {
  return *msg->_impl_.actuator_output_status_;
}
ActuatorOutputStatusResponse::ActuatorOutputStatusResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorOutputStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ActuatorOutputStatusResponse::ActuatorOutputStatusResponse(
    ::google::protobuf::Arena* arena,
    const ActuatorOutputStatusResponse& from)
    : ::google::protobuf::Message(arena) {
  ActuatorOutputStatusResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.actuator_output_status_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorOutputStatus>(arena, *from._impl_.actuator_output_status_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorOutputStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ActuatorOutputStatusResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.actuator_output_status_ = {};
}
ActuatorOutputStatusResponse::~ActuatorOutputStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ActuatorOutputStatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.actuator_output_status_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ActuatorOutputStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.actuator_output_status_ != nullptr);
    _impl_.actuator_output_status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ActuatorOutputStatusResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ActuatorOutputStatusResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ActuatorOutputStatusResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ActuatorOutputStatusResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ActuatorOutputStatusResponse, _impl_.actuator_output_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
    {PROTOBUF_FIELD_OFFSET(ActuatorOutputStatusResponse, _impl_.actuator_output_status_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::ActuatorOutputStatus>()},
  }}, {{
  }},
};

::uint8_t* ActuatorOutputStatusResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::actuator_output_status(this),
        _Internal::actuator_output_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  return target;
}

::size_t ActuatorOutputStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.actuator_output_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ActuatorOutputStatusResponse::_class_data_ = {
    ActuatorOutputStatusResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ActuatorOutputStatusResponse::GetClassData() const {
  return &_class_data_;
}

void ActuatorOutputStatusResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ActuatorOutputStatusResponse*>(&to_msg);
  auto& from = static_cast<const ActuatorOutputStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_actuator_output_status()->::mavsdk::rpc::telemetry::ActuatorOutputStatus::MergeFrom(
        from._internal_actuator_output_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ActuatorOutputStatusResponse::CopyFrom(const ActuatorOutputStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ActuatorOutputStatusResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ActuatorOutputStatusResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ActuatorOutputStatusResponse::InternalSwap(ActuatorOutputStatusResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.actuator_output_status_, other->_impl_.actuator_output_status_);
}

::google::protobuf::Metadata ActuatorOutputStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[41]);
}
// ===================================================================

class SubscribeOdometryRequest::_Internal {
 public:
};

SubscribeOdometryRequest::SubscribeOdometryRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
}
SubscribeOdometryRequest::SubscribeOdometryRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeOdometryRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeOdometryRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
}









::google::protobuf::Metadata SubscribeOdometryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[42]);
}
// ===================================================================

class OdometryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<OdometryResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OdometryResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Odometry& odometry(const OdometryResponse* msg);
  static void set_has_odometry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Odometry& OdometryResponse::_Internal::odometry(const OdometryResponse* msg) {
  return *msg->_impl_.odometry_;
}
OdometryResponse::OdometryResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.OdometryResponse)
}
inline PROTOBUF_NDEBUG_INLINE OdometryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

OdometryResponse::OdometryResponse(
    ::google::protobuf::Arena* arena,
    const OdometryResponse& from)
    : ::google::protobuf::Message(arena) {
  OdometryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.odometry_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Odometry>(arena, *from._impl_.odometry_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.OdometryResponse)
}
inline PROTOBUF_NDEBUG_INLINE OdometryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void OdometryResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.odometry_ = {};
}
OdometryResponse::~OdometryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.OdometryResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OdometryResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.odometry_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OdometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.OdometryResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.odometry_ != nullptr);
    _impl_.odometry_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OdometryResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> OdometryResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OdometryResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OdometryResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Odometry odometry = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(OdometryResponse, _impl_.odometry_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Odometry odometry = 1;
    {PROTOBUF_FIELD_OFFSET(OdometryResponse, _impl_.odometry_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Odometry>()},
  }}, {{
  }},
};

::uint8_t* OdometryResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.OdometryResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Odometry odometry = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::odometry(this),
        _Internal::odometry(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.OdometryResponse)
  return target;
}

::size_t OdometryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.OdometryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Odometry odometry = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.odometry_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OdometryResponse::_class_data_ = {
    OdometryResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OdometryResponse::GetClassData() const {
  return &_class_data_;
}

void OdometryResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OdometryResponse*>(&to_msg);
  auto& from = static_cast<const OdometryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.OdometryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_odometry()->::mavsdk::rpc::telemetry::Odometry::MergeFrom(
        from._internal_odometry());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OdometryResponse::CopyFrom(const OdometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.OdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OdometryResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OdometryResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OdometryResponse::InternalSwap(OdometryResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.odometry_, other->_impl_.odometry_);
}

::google::protobuf::Metadata OdometryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[43]);
}
// ===================================================================

class SubscribePositionVelocityNedRequest::_Internal {
 public:
};

SubscribePositionVelocityNedRequest::SubscribePositionVelocityNedRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
}
SubscribePositionVelocityNedRequest::SubscribePositionVelocityNedRequest(
    ::google::protobuf::Arena* arena,
    const SubscribePositionVelocityNedRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribePositionVelocityNedRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
}









::google::protobuf::Metadata SubscribePositionVelocityNedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[44]);
}
// ===================================================================

class PositionVelocityNedResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionVelocityNedResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PositionVelocityNedResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::PositionVelocityNed& position_velocity_ned(const PositionVelocityNedResponse* msg);
  static void set_has_position_velocity_ned(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::PositionVelocityNed& PositionVelocityNedResponse::_Internal::position_velocity_ned(const PositionVelocityNedResponse* msg) {
  return *msg->_impl_.position_velocity_ned_;
}
PositionVelocityNedResponse::PositionVelocityNedResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
}
inline PROTOBUF_NDEBUG_INLINE PositionVelocityNedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PositionVelocityNedResponse::PositionVelocityNedResponse(
    ::google::protobuf::Arena* arena,
    const PositionVelocityNedResponse& from)
    : ::google::protobuf::Message(arena) {
  PositionVelocityNedResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_velocity_ned_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionVelocityNed>(arena, *from._impl_.position_velocity_ned_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
}
inline PROTOBUF_NDEBUG_INLINE PositionVelocityNedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PositionVelocityNedResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.position_velocity_ned_ = {};
}
PositionVelocityNedResponse::~PositionVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PositionVelocityNedResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_velocity_ned_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PositionVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_velocity_ned_ != nullptr);
    _impl_.position_velocity_ned_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PositionVelocityNedResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PositionVelocityNedResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PositionVelocityNedResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PositionVelocityNedResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PositionVelocityNedResponse, _impl_.position_velocity_ned_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
    {PROTOBUF_FIELD_OFFSET(PositionVelocityNedResponse, _impl_.position_velocity_ned_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::PositionVelocityNed>()},
  }}, {{
  }},
};

::uint8_t* PositionVelocityNedResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::position_velocity_ned(this),
        _Internal::position_velocity_ned(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  return target;
}

::size_t PositionVelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_velocity_ned_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PositionVelocityNedResponse::_class_data_ = {
    PositionVelocityNedResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PositionVelocityNedResponse::GetClassData() const {
  return &_class_data_;
}

void PositionVelocityNedResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PositionVelocityNedResponse*>(&to_msg);
  auto& from = static_cast<const PositionVelocityNedResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_position_velocity_ned()->::mavsdk::rpc::telemetry::PositionVelocityNed::MergeFrom(
        from._internal_position_velocity_ned());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionVelocityNedResponse::CopyFrom(const PositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PositionVelocityNedResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PositionVelocityNedResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PositionVelocityNedResponse::InternalSwap(PositionVelocityNedResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.position_velocity_ned_, other->_impl_.position_velocity_ned_);
}

::google::protobuf::Metadata PositionVelocityNedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[45]);
}
// ===================================================================

class SubscribeGroundTruthRequest::_Internal {
 public:
};

SubscribeGroundTruthRequest::SubscribeGroundTruthRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
}
SubscribeGroundTruthRequest::SubscribeGroundTruthRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeGroundTruthRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeGroundTruthRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
}









::google::protobuf::Metadata SubscribeGroundTruthRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[46]);
}
// ===================================================================

class GroundTruthResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GroundTruthResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GroundTruthResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::GroundTruth& ground_truth(const GroundTruthResponse* msg);
  static void set_has_ground_truth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::GroundTruth& GroundTruthResponse::_Internal::ground_truth(const GroundTruthResponse* msg) {
  return *msg->_impl_.ground_truth_;
}
GroundTruthResponse::GroundTruthResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GroundTruthResponse)
}
inline PROTOBUF_NDEBUG_INLINE GroundTruthResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GroundTruthResponse::GroundTruthResponse(
    ::google::protobuf::Arena* arena,
    const GroundTruthResponse& from)
    : ::google::protobuf::Message(arena) {
  GroundTruthResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ground_truth_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::GroundTruth>(arena, *from._impl_.ground_truth_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GroundTruthResponse)
}
inline PROTOBUF_NDEBUG_INLINE GroundTruthResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GroundTruthResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.ground_truth_ = {};
}
GroundTruthResponse::~GroundTruthResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GroundTruthResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GroundTruthResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.ground_truth_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GroundTruthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ground_truth_ != nullptr);
    _impl_.ground_truth_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GroundTruthResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GroundTruthResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GroundTruthResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GroundTruthResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GroundTruthResponse, _impl_.ground_truth_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
    {PROTOBUF_FIELD_OFFSET(GroundTruthResponse, _impl_.ground_truth_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::GroundTruth>()},
  }}, {{
  }},
};

::uint8_t* GroundTruthResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::ground_truth(this),
        _Internal::ground_truth(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GroundTruthResponse)
  return target;
}

::size_t GroundTruthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.ground_truth_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GroundTruthResponse::_class_data_ = {
    GroundTruthResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GroundTruthResponse::GetClassData() const {
  return &_class_data_;
}

void GroundTruthResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GroundTruthResponse*>(&to_msg);
  auto& from = static_cast<const GroundTruthResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_ground_truth()->::mavsdk::rpc::telemetry::GroundTruth::MergeFrom(
        from._internal_ground_truth());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GroundTruthResponse::CopyFrom(const GroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GroundTruthResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GroundTruthResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GroundTruthResponse::InternalSwap(GroundTruthResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ground_truth_, other->_impl_.ground_truth_);
}

::google::protobuf::Metadata GroundTruthResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[47]);
}
// ===================================================================

class SubscribeFixedwingMetricsRequest::_Internal {
 public:
};

SubscribeFixedwingMetricsRequest::SubscribeFixedwingMetricsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
}
SubscribeFixedwingMetricsRequest::SubscribeFixedwingMetricsRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeFixedwingMetricsRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeFixedwingMetricsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
}









::google::protobuf::Metadata SubscribeFixedwingMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[48]);
}
// ===================================================================

class FixedwingMetricsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FixedwingMetricsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FixedwingMetricsResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::FixedwingMetrics& fixedwing_metrics(const FixedwingMetricsResponse* msg);
  static void set_has_fixedwing_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::FixedwingMetrics& FixedwingMetricsResponse::_Internal::fixedwing_metrics(const FixedwingMetricsResponse* msg) {
  return *msg->_impl_.fixedwing_metrics_;
}
FixedwingMetricsResponse::FixedwingMetricsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
}
inline PROTOBUF_NDEBUG_INLINE FixedwingMetricsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

FixedwingMetricsResponse::FixedwingMetricsResponse(
    ::google::protobuf::Arena* arena,
    const FixedwingMetricsResponse& from)
    : ::google::protobuf::Message(arena) {
  FixedwingMetricsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.fixedwing_metrics_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::FixedwingMetrics>(arena, *from._impl_.fixedwing_metrics_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
}
inline PROTOBUF_NDEBUG_INLINE FixedwingMetricsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FixedwingMetricsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.fixedwing_metrics_ = {};
}
FixedwingMetricsResponse::~FixedwingMetricsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FixedwingMetricsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.fixedwing_metrics_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FixedwingMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fixedwing_metrics_ != nullptr);
    _impl_.fixedwing_metrics_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FixedwingMetricsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FixedwingMetricsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FixedwingMetricsResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FixedwingMetricsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FixedwingMetricsResponse, _impl_.fixedwing_metrics_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
    {PROTOBUF_FIELD_OFFSET(FixedwingMetricsResponse, _impl_.fixedwing_metrics_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::FixedwingMetrics>()},
  }}, {{
  }},
};

::uint8_t* FixedwingMetricsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::fixedwing_metrics(this),
        _Internal::fixedwing_metrics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  return target;
}

::size_t FixedwingMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fixedwing_metrics_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FixedwingMetricsResponse::_class_data_ = {
    FixedwingMetricsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FixedwingMetricsResponse::GetClassData() const {
  return &_class_data_;
}

void FixedwingMetricsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FixedwingMetricsResponse*>(&to_msg);
  auto& from = static_cast<const FixedwingMetricsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_fixedwing_metrics()->::mavsdk::rpc::telemetry::FixedwingMetrics::MergeFrom(
        from._internal_fixedwing_metrics());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FixedwingMetricsResponse::CopyFrom(const FixedwingMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FixedwingMetricsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FixedwingMetricsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FixedwingMetricsResponse::InternalSwap(FixedwingMetricsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.fixedwing_metrics_, other->_impl_.fixedwing_metrics_);
}

::google::protobuf::Metadata FixedwingMetricsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[49]);
}
// ===================================================================

class SubscribeImuRequest::_Internal {
 public:
};

SubscribeImuRequest::SubscribeImuRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeImuRequest)
}
SubscribeImuRequest::SubscribeImuRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeImuRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeImuRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeImuRequest)
}









::google::protobuf::Metadata SubscribeImuRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[50]);
}
// ===================================================================

class ImuResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ImuResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ImuResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Imu& imu(const ImuResponse* msg);
  static void set_has_imu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Imu& ImuResponse::_Internal::imu(const ImuResponse* msg) {
  return *msg->_impl_.imu_;
}
ImuResponse::ImuResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE ImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ImuResponse::ImuResponse(
    ::google::protobuf::Arena* arena,
    const ImuResponse& from)
    : ::google::protobuf::Message(arena) {
  ImuResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.imu_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Imu>(arena, *from._impl_.imu_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE ImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ImuResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.imu_ = {};
}
ImuResponse::~ImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ImuResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ImuResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.imu_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ImuResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.imu_ != nullptr);
    _impl_.imu_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ImuResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ImuResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ImuResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ImuResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Imu imu = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ImuResponse, _impl_.imu_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Imu imu = 1;
    {PROTOBUF_FIELD_OFFSET(ImuResponse, _impl_.imu_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Imu>()},
  }}, {{
  }},
};

::uint8_t* ImuResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ImuResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Imu imu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::imu(this),
        _Internal::imu(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ImuResponse)
  return target;
}

::size_t ImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ImuResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Imu imu = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.imu_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ImuResponse::_class_data_ = {
    ImuResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ImuResponse::GetClassData() const {
  return &_class_data_;
}

void ImuResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ImuResponse*>(&to_msg);
  auto& from = static_cast<const ImuResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ImuResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_imu()->::mavsdk::rpc::telemetry::Imu::MergeFrom(
        from._internal_imu());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImuResponse::CopyFrom(const ImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ImuResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ImuResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ImuResponse::InternalSwap(ImuResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.imu_, other->_impl_.imu_);
}

::google::protobuf::Metadata ImuResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[51]);
}
// ===================================================================

class SubscribeScaledImuRequest::_Internal {
 public:
};

SubscribeScaledImuRequest::SubscribeScaledImuRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
}
SubscribeScaledImuRequest::SubscribeScaledImuRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeScaledImuRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeScaledImuRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
}









::google::protobuf::Metadata SubscribeScaledImuRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[52]);
}
// ===================================================================

class ScaledImuResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ScaledImuResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScaledImuResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Imu& imu(const ScaledImuResponse* msg);
  static void set_has_imu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Imu& ScaledImuResponse::_Internal::imu(const ScaledImuResponse* msg) {
  return *msg->_impl_.imu_;
}
ScaledImuResponse::ScaledImuResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ScaledImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE ScaledImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ScaledImuResponse::ScaledImuResponse(
    ::google::protobuf::Arena* arena,
    const ScaledImuResponse& from)
    : ::google::protobuf::Message(arena) {
  ScaledImuResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.imu_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Imu>(arena, *from._impl_.imu_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ScaledImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE ScaledImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ScaledImuResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.imu_ = {};
}
ScaledImuResponse::~ScaledImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ScaledImuResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ScaledImuResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.imu_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ScaledImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.imu_ != nullptr);
    _impl_.imu_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ScaledImuResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ScaledImuResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ScaledImuResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ScaledImuResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Imu imu = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ScaledImuResponse, _impl_.imu_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Imu imu = 1;
    {PROTOBUF_FIELD_OFFSET(ScaledImuResponse, _impl_.imu_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Imu>()},
  }}, {{
  }},
};

::uint8_t* ScaledImuResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Imu imu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::imu(this),
        _Internal::imu(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ScaledImuResponse)
  return target;
}

::size_t ScaledImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Imu imu = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.imu_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ScaledImuResponse::_class_data_ = {
    ScaledImuResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ScaledImuResponse::GetClassData() const {
  return &_class_data_;
}

void ScaledImuResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ScaledImuResponse*>(&to_msg);
  auto& from = static_cast<const ScaledImuResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_imu()->::mavsdk::rpc::telemetry::Imu::MergeFrom(
        from._internal_imu());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ScaledImuResponse::CopyFrom(const ScaledImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ScaledImuResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ScaledImuResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ScaledImuResponse::InternalSwap(ScaledImuResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.imu_, other->_impl_.imu_);
}

::google::protobuf::Metadata ScaledImuResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[53]);
}
// ===================================================================

class SubscribeRawImuRequest::_Internal {
 public:
};

SubscribeRawImuRequest::SubscribeRawImuRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
}
SubscribeRawImuRequest::SubscribeRawImuRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeRawImuRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeRawImuRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
}









::google::protobuf::Metadata SubscribeRawImuRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[54]);
}
// ===================================================================

class RawImuResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RawImuResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RawImuResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Imu& imu(const RawImuResponse* msg);
  static void set_has_imu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Imu& RawImuResponse::_Internal::imu(const RawImuResponse* msg) {
  return *msg->_impl_.imu_;
}
RawImuResponse::RawImuResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.RawImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE RawImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RawImuResponse::RawImuResponse(
    ::google::protobuf::Arena* arena,
    const RawImuResponse& from)
    : ::google::protobuf::Message(arena) {
  RawImuResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.imu_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Imu>(arena, *from._impl_.imu_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.RawImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE RawImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RawImuResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.imu_ = {};
}
RawImuResponse::~RawImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RawImuResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RawImuResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.imu_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RawImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RawImuResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.imu_ != nullptr);
    _impl_.imu_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RawImuResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> RawImuResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RawImuResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RawImuResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Imu imu = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RawImuResponse, _impl_.imu_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Imu imu = 1;
    {PROTOBUF_FIELD_OFFSET(RawImuResponse, _impl_.imu_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Imu>()},
  }}, {{
  }},
};

::uint8_t* RawImuResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RawImuResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Imu imu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::imu(this),
        _Internal::imu(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RawImuResponse)
  return target;
}

::size_t RawImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RawImuResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Imu imu = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.imu_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RawImuResponse::_class_data_ = {
    RawImuResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RawImuResponse::GetClassData() const {
  return &_class_data_;
}

void RawImuResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RawImuResponse*>(&to_msg);
  auto& from = static_cast<const RawImuResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RawImuResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_imu()->::mavsdk::rpc::telemetry::Imu::MergeFrom(
        from._internal_imu());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RawImuResponse::CopyFrom(const RawImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RawImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RawImuResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RawImuResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RawImuResponse::InternalSwap(RawImuResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.imu_, other->_impl_.imu_);
}

::google::protobuf::Metadata RawImuResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[55]);
}
// ===================================================================

class SubscribeHealthAllOkRequest::_Internal {
 public:
};

SubscribeHealthAllOkRequest::SubscribeHealthAllOkRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
}
SubscribeHealthAllOkRequest::SubscribeHealthAllOkRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeHealthAllOkRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeHealthAllOkRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
}









::google::protobuf::Metadata SubscribeHealthAllOkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[56]);
}
// ===================================================================

class HealthAllOkResponse::_Internal {
 public:
};

HealthAllOkResponse::HealthAllOkResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.HealthAllOkResponse)
}
HealthAllOkResponse::HealthAllOkResponse(
    ::google::protobuf::Arena* arena, const HealthAllOkResponse& from)
    : HealthAllOkResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE HealthAllOkResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HealthAllOkResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.is_health_all_ok_ = {};
}
HealthAllOkResponse::~HealthAllOkResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.HealthAllOkResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealthAllOkResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HealthAllOkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.is_health_all_ok_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealthAllOkResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> HealthAllOkResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HealthAllOkResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool is_health_all_ok = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HealthAllOkResponse, _impl_.is_health_all_ok_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAllOkResponse, _impl_.is_health_all_ok_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_health_all_ok = 1;
    {PROTOBUF_FIELD_OFFSET(HealthAllOkResponse, _impl_.is_health_all_ok_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* HealthAllOkResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool is_health_all_ok = 1;
  if (this->_internal_is_health_all_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_health_all_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.HealthAllOkResponse)
  return target;
}

::size_t HealthAllOkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_health_all_ok = 1;
  if (this->_internal_is_health_all_ok() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HealthAllOkResponse::_class_data_ = {
    HealthAllOkResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HealthAllOkResponse::GetClassData() const {
  return &_class_data_;
}

void HealthAllOkResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HealthAllOkResponse*>(&to_msg);
  auto& from = static_cast<const HealthAllOkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_health_all_ok() != 0) {
    _this->_internal_set_is_health_all_ok(from._internal_is_health_all_ok());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAllOkResponse::CopyFrom(const HealthAllOkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealthAllOkResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HealthAllOkResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HealthAllOkResponse::InternalSwap(HealthAllOkResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.is_health_all_ok_, other->_impl_.is_health_all_ok_);
}

::google::protobuf::Metadata HealthAllOkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[57]);
}
// ===================================================================

class SubscribeUnixEpochTimeRequest::_Internal {
 public:
};

SubscribeUnixEpochTimeRequest::SubscribeUnixEpochTimeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
}
SubscribeUnixEpochTimeRequest::SubscribeUnixEpochTimeRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeUnixEpochTimeRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeUnixEpochTimeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
}









::google::protobuf::Metadata SubscribeUnixEpochTimeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[58]);
}
// ===================================================================

class UnixEpochTimeResponse::_Internal {
 public:
};

UnixEpochTimeResponse::UnixEpochTimeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
}
UnixEpochTimeResponse::UnixEpochTimeResponse(
    ::google::protobuf::Arena* arena, const UnixEpochTimeResponse& from)
    : UnixEpochTimeResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE UnixEpochTimeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UnixEpochTimeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_us_ = {};
}
UnixEpochTimeResponse::~UnixEpochTimeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UnixEpochTimeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void UnixEpochTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_us_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* UnixEpochTimeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> UnixEpochTimeResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_UnixEpochTimeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint64 time_us = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(UnixEpochTimeResponse, _impl_.time_us_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(UnixEpochTimeResponse, _impl_.time_us_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 time_us = 1;
    {PROTOBUF_FIELD_OFFSET(UnixEpochTimeResponse, _impl_.time_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* UnixEpochTimeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 time_us = 1;
  if (this->_internal_time_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_time_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  return target;
}

::size_t UnixEpochTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 time_us = 1;
  if (this->_internal_time_us() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time_us());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData UnixEpochTimeResponse::_class_data_ = {
    UnixEpochTimeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* UnixEpochTimeResponse::GetClassData() const {
  return &_class_data_;
}

void UnixEpochTimeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<UnixEpochTimeResponse*>(&to_msg);
  auto& from = static_cast<const UnixEpochTimeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time_us() != 0) {
    _this->_internal_set_time_us(from._internal_time_us());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UnixEpochTimeResponse::CopyFrom(const UnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool UnixEpochTimeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* UnixEpochTimeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void UnixEpochTimeResponse::InternalSwap(UnixEpochTimeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.time_us_, other->_impl_.time_us_);
}

::google::protobuf::Metadata UnixEpochTimeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[59]);
}
// ===================================================================

class SubscribeDistanceSensorRequest::_Internal {
 public:
};

SubscribeDistanceSensorRequest::SubscribeDistanceSensorRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
}
SubscribeDistanceSensorRequest::SubscribeDistanceSensorRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeDistanceSensorRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeDistanceSensorRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
}









::google::protobuf::Metadata SubscribeDistanceSensorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[60]);
}
// ===================================================================

class DistanceSensorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DistanceSensorResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DistanceSensorResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::DistanceSensor& distance_sensor(const DistanceSensorResponse* msg);
  static void set_has_distance_sensor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::DistanceSensor& DistanceSensorResponse::_Internal::distance_sensor(const DistanceSensorResponse* msg) {
  return *msg->_impl_.distance_sensor_;
}
DistanceSensorResponse::DistanceSensorResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.DistanceSensorResponse)
}
inline PROTOBUF_NDEBUG_INLINE DistanceSensorResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DistanceSensorResponse::DistanceSensorResponse(
    ::google::protobuf::Arena* arena,
    const DistanceSensorResponse& from)
    : ::google::protobuf::Message(arena) {
  DistanceSensorResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.distance_sensor_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::DistanceSensor>(arena, *from._impl_.distance_sensor_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.DistanceSensorResponse)
}
inline PROTOBUF_NDEBUG_INLINE DistanceSensorResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DistanceSensorResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.distance_sensor_ = {};
}
DistanceSensorResponse::~DistanceSensorResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.DistanceSensorResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DistanceSensorResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.distance_sensor_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DistanceSensorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.distance_sensor_ != nullptr);
    _impl_.distance_sensor_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DistanceSensorResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DistanceSensorResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DistanceSensorResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DistanceSensorResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.DistanceSensor distance_sensor = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DistanceSensorResponse, _impl_.distance_sensor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.DistanceSensor distance_sensor = 1;
    {PROTOBUF_FIELD_OFFSET(DistanceSensorResponse, _impl_.distance_sensor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::DistanceSensor>()},
  }}, {{
  }},
};

::uint8_t* DistanceSensorResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.DistanceSensor distance_sensor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::distance_sensor(this),
        _Internal::distance_sensor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.DistanceSensorResponse)
  return target;
}

::size_t DistanceSensorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.DistanceSensor distance_sensor = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.distance_sensor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DistanceSensorResponse::_class_data_ = {
    DistanceSensorResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DistanceSensorResponse::GetClassData() const {
  return &_class_data_;
}

void DistanceSensorResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DistanceSensorResponse*>(&to_msg);
  auto& from = static_cast<const DistanceSensorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_distance_sensor()->::mavsdk::rpc::telemetry::DistanceSensor::MergeFrom(
        from._internal_distance_sensor());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DistanceSensorResponse::CopyFrom(const DistanceSensorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DistanceSensorResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DistanceSensorResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DistanceSensorResponse::InternalSwap(DistanceSensorResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.distance_sensor_, other->_impl_.distance_sensor_);
}

::google::protobuf::Metadata DistanceSensorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[61]);
}
// ===================================================================

class SubscribeScaledPressureRequest::_Internal {
 public:
};

SubscribeScaledPressureRequest::SubscribeScaledPressureRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
}
SubscribeScaledPressureRequest::SubscribeScaledPressureRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeScaledPressureRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeScaledPressureRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
}









::google::protobuf::Metadata SubscribeScaledPressureRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[62]);
}
// ===================================================================

class ScaledPressureResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ScaledPressureResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ScaledPressureResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::ScaledPressure& scaled_pressure(const ScaledPressureResponse* msg);
  static void set_has_scaled_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::ScaledPressure& ScaledPressureResponse::_Internal::scaled_pressure(const ScaledPressureResponse* msg) {
  return *msg->_impl_.scaled_pressure_;
}
ScaledPressureResponse::ScaledPressureResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ScaledPressureResponse)
}
inline PROTOBUF_NDEBUG_INLINE ScaledPressureResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ScaledPressureResponse::ScaledPressureResponse(
    ::google::protobuf::Arena* arena,
    const ScaledPressureResponse& from)
    : ::google::protobuf::Message(arena) {
  ScaledPressureResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.scaled_pressure_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::ScaledPressure>(arena, *from._impl_.scaled_pressure_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ScaledPressureResponse)
}
inline PROTOBUF_NDEBUG_INLINE ScaledPressureResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ScaledPressureResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.scaled_pressure_ = {};
}
ScaledPressureResponse::~ScaledPressureResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ScaledPressureResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ScaledPressureResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.scaled_pressure_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ScaledPressureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.scaled_pressure_ != nullptr);
    _impl_.scaled_pressure_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ScaledPressureResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ScaledPressureResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ScaledPressureResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ScaledPressureResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.ScaledPressure scaled_pressure = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ScaledPressureResponse, _impl_.scaled_pressure_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.ScaledPressure scaled_pressure = 1;
    {PROTOBUF_FIELD_OFFSET(ScaledPressureResponse, _impl_.scaled_pressure_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::ScaledPressure>()},
  }}, {{
  }},
};

::uint8_t* ScaledPressureResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.ScaledPressure scaled_pressure = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::scaled_pressure(this),
        _Internal::scaled_pressure(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ScaledPressureResponse)
  return target;
}

::size_t ScaledPressureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ScaledPressure scaled_pressure = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.scaled_pressure_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ScaledPressureResponse::_class_data_ = {
    ScaledPressureResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ScaledPressureResponse::GetClassData() const {
  return &_class_data_;
}

void ScaledPressureResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ScaledPressureResponse*>(&to_msg);
  auto& from = static_cast<const ScaledPressureResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_scaled_pressure()->::mavsdk::rpc::telemetry::ScaledPressure::MergeFrom(
        from._internal_scaled_pressure());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ScaledPressureResponse::CopyFrom(const ScaledPressureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ScaledPressureResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ScaledPressureResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ScaledPressureResponse::InternalSwap(ScaledPressureResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.scaled_pressure_, other->_impl_.scaled_pressure_);
}

::google::protobuf::Metadata ScaledPressureResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[63]);
}
// ===================================================================

class SubscribeHeadingRequest::_Internal {
 public:
};

SubscribeHeadingRequest::SubscribeHeadingRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeHeadingRequest)
}
SubscribeHeadingRequest::SubscribeHeadingRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeHeadingRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeHeadingRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeHeadingRequest)
}









::google::protobuf::Metadata SubscribeHeadingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[64]);
}
// ===================================================================

class HeadingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<HeadingResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeadingResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Heading& heading_deg(const HeadingResponse* msg);
  static void set_has_heading_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Heading& HeadingResponse::_Internal::heading_deg(const HeadingResponse* msg) {
  return *msg->_impl_.heading_deg_;
}
HeadingResponse::HeadingResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.HeadingResponse)
}
inline PROTOBUF_NDEBUG_INLINE HeadingResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HeadingResponse::HeadingResponse(
    ::google::protobuf::Arena* arena,
    const HeadingResponse& from)
    : ::google::protobuf::Message(arena) {
  HeadingResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.heading_deg_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Heading>(arena, *from._impl_.heading_deg_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.HeadingResponse)
}
inline PROTOBUF_NDEBUG_INLINE HeadingResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HeadingResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.heading_deg_ = {};
}
HeadingResponse::~HeadingResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.HeadingResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HeadingResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.heading_deg_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HeadingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.HeadingResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.heading_deg_ != nullptr);
    _impl_.heading_deg_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HeadingResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> HeadingResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HeadingResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HeadingResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Heading heading_deg = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HeadingResponse, _impl_.heading_deg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Heading heading_deg = 1;
    {PROTOBUF_FIELD_OFFSET(HeadingResponse, _impl_.heading_deg_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Heading>()},
  }}, {{
  }},
};

::uint8_t* HeadingResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.HeadingResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Heading heading_deg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::heading_deg(this),
        _Internal::heading_deg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.HeadingResponse)
  return target;
}

::size_t HeadingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.HeadingResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Heading heading_deg = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.heading_deg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HeadingResponse::_class_data_ = {
    HeadingResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HeadingResponse::GetClassData() const {
  return &_class_data_;
}

void HeadingResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HeadingResponse*>(&to_msg);
  auto& from = static_cast<const HeadingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.HeadingResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_heading_deg()->::mavsdk::rpc::telemetry::Heading::MergeFrom(
        from._internal_heading_deg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HeadingResponse::CopyFrom(const HeadingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.HeadingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HeadingResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HeadingResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HeadingResponse::InternalSwap(HeadingResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.heading_deg_, other->_impl_.heading_deg_);
}

::google::protobuf::Metadata HeadingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[65]);
}
// ===================================================================

class SubscribeAltitudeRequest::_Internal {
 public:
};

SubscribeAltitudeRequest::SubscribeAltitudeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeAltitudeRequest)
}
SubscribeAltitudeRequest::SubscribeAltitudeRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeAltitudeRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SubscribeAltitudeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeAltitudeRequest)
}









::google::protobuf::Metadata SubscribeAltitudeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[66]);
}
// ===================================================================

class AltitudeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AltitudeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AltitudeResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::Altitude& altitude(const AltitudeResponse* msg);
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::Altitude& AltitudeResponse::_Internal::altitude(const AltitudeResponse* msg) {
  return *msg->_impl_.altitude_;
}
AltitudeResponse::AltitudeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AltitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE AltitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AltitudeResponse::AltitudeResponse(
    ::google::protobuf::Arena* arena,
    const AltitudeResponse& from)
    : ::google::protobuf::Message(arena) {
  AltitudeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.altitude_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Altitude>(arena, *from._impl_.altitude_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AltitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE AltitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AltitudeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.altitude_ = {};
}
AltitudeResponse::~AltitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AltitudeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AltitudeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.altitude_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AltitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AltitudeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.altitude_ != nullptr);
    _impl_.altitude_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AltitudeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AltitudeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AltitudeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AltitudeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.Altitude altitude = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AltitudeResponse, _impl_.altitude_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.Altitude altitude = 1;
    {PROTOBUF_FIELD_OFFSET(AltitudeResponse, _impl_.altitude_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Altitude>()},
  }}, {{
  }},
};

::uint8_t* AltitudeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AltitudeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.Altitude altitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::altitude(this),
        _Internal::altitude(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AltitudeResponse)
  return target;
}

::size_t AltitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AltitudeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Altitude altitude = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.altitude_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AltitudeResponse::_class_data_ = {
    AltitudeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AltitudeResponse::GetClassData() const {
  return &_class_data_;
}

void AltitudeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AltitudeResponse*>(&to_msg);
  auto& from = static_cast<const AltitudeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AltitudeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_altitude()->::mavsdk::rpc::telemetry::Altitude::MergeFrom(
        from._internal_altitude());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AltitudeResponse::CopyFrom(const AltitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AltitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AltitudeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AltitudeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AltitudeResponse::InternalSwap(AltitudeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.altitude_, other->_impl_.altitude_);
}

::google::protobuf::Metadata AltitudeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[67]);
}
// ===================================================================

class SetRatePositionRequest::_Internal {
 public:
};

SetRatePositionRequest::SetRatePositionRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRatePositionRequest)
}
SetRatePositionRequest::SetRatePositionRequest(
    ::google::protobuf::Arena* arena, const SetRatePositionRequest& from)
    : SetRatePositionRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRatePositionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRatePositionRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRatePositionRequest::~SetRatePositionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRatePositionRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRatePositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRatePositionRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRatePositionRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRatePositionRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRatePositionRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRatePositionRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRatePositionRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionRequest)
  return target;
}

::size_t SetRatePositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRatePositionRequest::_class_data_ = {
    SetRatePositionRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRatePositionRequest::GetClassData() const {
  return &_class_data_;
}

void SetRatePositionRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRatePositionRequest*>(&to_msg);
  auto& from = static_cast<const SetRatePositionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRatePositionRequest::CopyFrom(const SetRatePositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRatePositionRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRatePositionRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRatePositionRequest::InternalSwap(SetRatePositionRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRatePositionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[68]);
}
// ===================================================================

class SetRatePositionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRatePositionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRatePositionResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRatePositionResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRatePositionResponse::_Internal::telemetry_result(const SetRatePositionResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRatePositionResponse::SetRatePositionResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRatePositionResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRatePositionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRatePositionResponse::SetRatePositionResponse(
    ::google::protobuf::Arena* arena,
    const SetRatePositionResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRatePositionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRatePositionResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRatePositionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRatePositionResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRatePositionResponse::~SetRatePositionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRatePositionResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRatePositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRatePositionResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRatePositionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRatePositionResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRatePositionResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRatePositionResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRatePositionResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRatePositionResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionResponse)
  return target;
}

::size_t SetRatePositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRatePositionResponse::_class_data_ = {
    SetRatePositionResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRatePositionResponse::GetClassData() const {
  return &_class_data_;
}

void SetRatePositionResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRatePositionResponse*>(&to_msg);
  auto& from = static_cast<const SetRatePositionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRatePositionResponse::CopyFrom(const SetRatePositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRatePositionResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRatePositionResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRatePositionResponse::InternalSwap(SetRatePositionResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRatePositionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[69]);
}
// ===================================================================

class SetRateHomeRequest::_Internal {
 public:
};

SetRateHomeRequest::SetRateHomeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateHomeRequest)
}
SetRateHomeRequest::SetRateHomeRequest(
    ::google::protobuf::Arena* arena, const SetRateHomeRequest& from)
    : SetRateHomeRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateHomeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateHomeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateHomeRequest::~SetRateHomeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateHomeRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateHomeRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateHomeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateHomeRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateHomeRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateHomeRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateHomeRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateHomeRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateHomeRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateHomeRequest)
  return target;
}

::size_t SetRateHomeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateHomeRequest::_class_data_ = {
    SetRateHomeRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateHomeRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateHomeRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateHomeRequest*>(&to_msg);
  auto& from = static_cast<const SetRateHomeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateHomeRequest::CopyFrom(const SetRateHomeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateHomeRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateHomeRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateHomeRequest::InternalSwap(SetRateHomeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateHomeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[70]);
}
// ===================================================================

class SetRateHomeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateHomeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateHomeResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateHomeResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateHomeResponse::_Internal::telemetry_result(const SetRateHomeResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateHomeResponse::SetRateHomeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateHomeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateHomeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateHomeResponse::SetRateHomeResponse(
    ::google::protobuf::Arena* arena,
    const SetRateHomeResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateHomeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateHomeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateHomeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateHomeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateHomeResponse::~SetRateHomeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateHomeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateHomeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateHomeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateHomeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateHomeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateHomeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateHomeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateHomeResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateHomeResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateHomeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateHomeResponse)
  return target;
}

::size_t SetRateHomeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateHomeResponse::_class_data_ = {
    SetRateHomeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateHomeResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateHomeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateHomeResponse*>(&to_msg);
  auto& from = static_cast<const SetRateHomeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateHomeResponse::CopyFrom(const SetRateHomeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateHomeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateHomeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateHomeResponse::InternalSwap(SetRateHomeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateHomeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[71]);
}
// ===================================================================

class SetRateInAirRequest::_Internal {
 public:
};

SetRateInAirRequest::SetRateInAirRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateInAirRequest)
}
SetRateInAirRequest::SetRateInAirRequest(
    ::google::protobuf::Arena* arena, const SetRateInAirRequest& from)
    : SetRateInAirRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateInAirRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateInAirRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateInAirRequest::~SetRateInAirRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateInAirRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateInAirRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateInAirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateInAirRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateInAirRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateInAirRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateInAirRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateInAirRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateInAirRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateInAirRequest)
  return target;
}

::size_t SetRateInAirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateInAirRequest::_class_data_ = {
    SetRateInAirRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateInAirRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateInAirRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateInAirRequest*>(&to_msg);
  auto& from = static_cast<const SetRateInAirRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateInAirRequest::CopyFrom(const SetRateInAirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateInAirRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateInAirRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateInAirRequest::InternalSwap(SetRateInAirRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateInAirRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[72]);
}
// ===================================================================

class SetRateInAirResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateInAirResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateInAirResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateInAirResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateInAirResponse::_Internal::telemetry_result(const SetRateInAirResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateInAirResponse::SetRateInAirResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateInAirResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateInAirResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateInAirResponse::SetRateInAirResponse(
    ::google::protobuf::Arena* arena,
    const SetRateInAirResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateInAirResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateInAirResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateInAirResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateInAirResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateInAirResponse::~SetRateInAirResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateInAirResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateInAirResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateInAirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateInAirResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateInAirResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateInAirResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateInAirResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateInAirResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateInAirResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateInAirResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateInAirResponse)
  return target;
}

::size_t SetRateInAirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateInAirResponse::_class_data_ = {
    SetRateInAirResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateInAirResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateInAirResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateInAirResponse*>(&to_msg);
  auto& from = static_cast<const SetRateInAirResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateInAirResponse::CopyFrom(const SetRateInAirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateInAirResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateInAirResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateInAirResponse::InternalSwap(SetRateInAirResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateInAirResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[73]);
}
// ===================================================================

class SetRateLandedStateRequest::_Internal {
 public:
};

SetRateLandedStateRequest::SetRateLandedStateRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
}
SetRateLandedStateRequest::SetRateLandedStateRequest(
    ::google::protobuf::Arena* arena, const SetRateLandedStateRequest& from)
    : SetRateLandedStateRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateLandedStateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateLandedStateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateLandedStateRequest::~SetRateLandedStateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateLandedStateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateLandedStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateLandedStateRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateLandedStateRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateLandedStateRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateLandedStateRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateLandedStateRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateLandedStateRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  return target;
}

::size_t SetRateLandedStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateLandedStateRequest::_class_data_ = {
    SetRateLandedStateRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateLandedStateRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateLandedStateRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateLandedStateRequest*>(&to_msg);
  auto& from = static_cast<const SetRateLandedStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateLandedStateRequest::CopyFrom(const SetRateLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateLandedStateRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateLandedStateRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateLandedStateRequest::InternalSwap(SetRateLandedStateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateLandedStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[74]);
}
// ===================================================================

class SetRateLandedStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateLandedStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateLandedStateResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateLandedStateResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateLandedStateResponse::_Internal::telemetry_result(const SetRateLandedStateResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateLandedStateResponse::SetRateLandedStateResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateLandedStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateLandedStateResponse::SetRateLandedStateResponse(
    ::google::protobuf::Arena* arena,
    const SetRateLandedStateResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateLandedStateResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateLandedStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateLandedStateResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateLandedStateResponse::~SetRateLandedStateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateLandedStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateLandedStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateLandedStateResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateLandedStateResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateLandedStateResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateLandedStateResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateLandedStateResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateLandedStateResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateLandedStateResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  return target;
}

::size_t SetRateLandedStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateLandedStateResponse::_class_data_ = {
    SetRateLandedStateResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateLandedStateResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateLandedStateResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateLandedStateResponse*>(&to_msg);
  auto& from = static_cast<const SetRateLandedStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateLandedStateResponse::CopyFrom(const SetRateLandedStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateLandedStateResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateLandedStateResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateLandedStateResponse::InternalSwap(SetRateLandedStateResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateLandedStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[75]);
}
// ===================================================================

class SetRateVtolStateRequest::_Internal {
 public:
};

SetRateVtolStateRequest::SetRateVtolStateRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateVtolStateRequest)
}
SetRateVtolStateRequest::SetRateVtolStateRequest(
    ::google::protobuf::Arena* arena, const SetRateVtolStateRequest& from)
    : SetRateVtolStateRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateVtolStateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateVtolStateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateVtolStateRequest::~SetRateVtolStateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateVtolStateRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateVtolStateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateVtolStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateVtolStateRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateVtolStateRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateVtolStateRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateVtolStateRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateVtolStateRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateVtolStateRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateVtolStateRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateVtolStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateVtolStateRequest)
  return target;
}

::size_t SetRateVtolStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateVtolStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateVtolStateRequest::_class_data_ = {
    SetRateVtolStateRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateVtolStateRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateVtolStateRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateVtolStateRequest*>(&to_msg);
  auto& from = static_cast<const SetRateVtolStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateVtolStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateVtolStateRequest::CopyFrom(const SetRateVtolStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateVtolStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateVtolStateRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateVtolStateRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateVtolStateRequest::InternalSwap(SetRateVtolStateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateVtolStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[76]);
}
// ===================================================================

class SetRateVtolStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateVtolStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateVtolStateResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateVtolStateResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateVtolStateResponse::_Internal::telemetry_result(const SetRateVtolStateResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateVtolStateResponse::SetRateVtolStateResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateVtolStateResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateVtolStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateVtolStateResponse::SetRateVtolStateResponse(
    ::google::protobuf::Arena* arena,
    const SetRateVtolStateResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateVtolStateResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateVtolStateResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateVtolStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateVtolStateResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateVtolStateResponse::~SetRateVtolStateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateVtolStateResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateVtolStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateVtolStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateVtolStateResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateVtolStateResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateVtolStateResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateVtolStateResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateVtolStateResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateVtolStateResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateVtolStateResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateVtolStateResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateVtolStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateVtolStateResponse)
  return target;
}

::size_t SetRateVtolStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateVtolStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateVtolStateResponse::_class_data_ = {
    SetRateVtolStateResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateVtolStateResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateVtolStateResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateVtolStateResponse*>(&to_msg);
  auto& from = static_cast<const SetRateVtolStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateVtolStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateVtolStateResponse::CopyFrom(const SetRateVtolStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateVtolStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateVtolStateResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateVtolStateResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateVtolStateResponse::InternalSwap(SetRateVtolStateResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateVtolStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[77]);
}
// ===================================================================

class SetRateAttitudeEulerRequest::_Internal {
 public:
};

SetRateAttitudeEulerRequest::SetRateAttitudeEulerRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest)
}
SetRateAttitudeEulerRequest::SetRateAttitudeEulerRequest(
    ::google::protobuf::Arena* arena, const SetRateAttitudeEulerRequest& from)
    : SetRateAttitudeEulerRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateAttitudeEulerRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateAttitudeEulerRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateAttitudeEulerRequest::~SetRateAttitudeEulerRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateAttitudeEulerRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateAttitudeEulerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateAttitudeEulerRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateAttitudeEulerRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateAttitudeEulerRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateAttitudeEulerRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateAttitudeEulerRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateAttitudeEulerRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest)
  return target;
}

::size_t SetRateAttitudeEulerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateAttitudeEulerRequest::_class_data_ = {
    SetRateAttitudeEulerRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateAttitudeEulerRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateAttitudeEulerRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateAttitudeEulerRequest*>(&to_msg);
  auto& from = static_cast<const SetRateAttitudeEulerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateAttitudeEulerRequest::CopyFrom(const SetRateAttitudeEulerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateAttitudeEulerRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateAttitudeEulerRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateAttitudeEulerRequest::InternalSwap(SetRateAttitudeEulerRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateAttitudeEulerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[78]);
}
// ===================================================================

class SetRateAttitudeEulerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateAttitudeEulerResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateAttitudeEulerResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateAttitudeEulerResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateAttitudeEulerResponse::_Internal::telemetry_result(const SetRateAttitudeEulerResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateAttitudeEulerResponse::SetRateAttitudeEulerResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateAttitudeEulerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateAttitudeEulerResponse::SetRateAttitudeEulerResponse(
    ::google::protobuf::Arena* arena,
    const SetRateAttitudeEulerResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateAttitudeEulerResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateAttitudeEulerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateAttitudeEulerResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateAttitudeEulerResponse::~SetRateAttitudeEulerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateAttitudeEulerResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateAttitudeEulerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateAttitudeEulerResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateAttitudeEulerResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateAttitudeEulerResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateAttitudeEulerResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateAttitudeEulerResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateAttitudeEulerResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateAttitudeEulerResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse)
  return target;
}

::size_t SetRateAttitudeEulerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateAttitudeEulerResponse::_class_data_ = {
    SetRateAttitudeEulerResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateAttitudeEulerResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateAttitudeEulerResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateAttitudeEulerResponse*>(&to_msg);
  auto& from = static_cast<const SetRateAttitudeEulerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateAttitudeEulerResponse::CopyFrom(const SetRateAttitudeEulerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateAttitudeEulerResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateAttitudeEulerResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateAttitudeEulerResponse::InternalSwap(SetRateAttitudeEulerResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateAttitudeEulerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[79]);
}
// ===================================================================

class SetRateAttitudeQuaternionRequest::_Internal {
 public:
};

SetRateAttitudeQuaternionRequest::SetRateAttitudeQuaternionRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest)
}
SetRateAttitudeQuaternionRequest::SetRateAttitudeQuaternionRequest(
    ::google::protobuf::Arena* arena, const SetRateAttitudeQuaternionRequest& from)
    : SetRateAttitudeQuaternionRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateAttitudeQuaternionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateAttitudeQuaternionRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateAttitudeQuaternionRequest::~SetRateAttitudeQuaternionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateAttitudeQuaternionRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateAttitudeQuaternionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateAttitudeQuaternionRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateAttitudeQuaternionRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateAttitudeQuaternionRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateAttitudeQuaternionRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateAttitudeQuaternionRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateAttitudeQuaternionRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest)
  return target;
}

::size_t SetRateAttitudeQuaternionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateAttitudeQuaternionRequest::_class_data_ = {
    SetRateAttitudeQuaternionRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateAttitudeQuaternionRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateAttitudeQuaternionRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateAttitudeQuaternionRequest*>(&to_msg);
  auto& from = static_cast<const SetRateAttitudeQuaternionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateAttitudeQuaternionRequest::CopyFrom(const SetRateAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateAttitudeQuaternionRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateAttitudeQuaternionRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateAttitudeQuaternionRequest::InternalSwap(SetRateAttitudeQuaternionRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateAttitudeQuaternionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[80]);
}
// ===================================================================

class SetRateAttitudeQuaternionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateAttitudeQuaternionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateAttitudeQuaternionResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateAttitudeQuaternionResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateAttitudeQuaternionResponse::_Internal::telemetry_result(const SetRateAttitudeQuaternionResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateAttitudeQuaternionResponse::SetRateAttitudeQuaternionResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateAttitudeQuaternionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateAttitudeQuaternionResponse::SetRateAttitudeQuaternionResponse(
    ::google::protobuf::Arena* arena,
    const SetRateAttitudeQuaternionResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateAttitudeQuaternionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateAttitudeQuaternionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateAttitudeQuaternionResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateAttitudeQuaternionResponse::~SetRateAttitudeQuaternionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateAttitudeQuaternionResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateAttitudeQuaternionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateAttitudeQuaternionResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateAttitudeQuaternionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateAttitudeQuaternionResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateAttitudeQuaternionResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateAttitudeQuaternionResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateAttitudeQuaternionResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateAttitudeQuaternionResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse)
  return target;
}

::size_t SetRateAttitudeQuaternionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateAttitudeQuaternionResponse::_class_data_ = {
    SetRateAttitudeQuaternionResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateAttitudeQuaternionResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateAttitudeQuaternionResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateAttitudeQuaternionResponse*>(&to_msg);
  auto& from = static_cast<const SetRateAttitudeQuaternionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateAttitudeQuaternionResponse::CopyFrom(const SetRateAttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateAttitudeQuaternionResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateAttitudeQuaternionResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateAttitudeQuaternionResponse::InternalSwap(SetRateAttitudeQuaternionResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateAttitudeQuaternionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[81]);
}
// ===================================================================

class SetRateAttitudeAngularVelocityBodyRequest::_Internal {
 public:
};

SetRateAttitudeAngularVelocityBodyRequest::SetRateAttitudeAngularVelocityBodyRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
}
SetRateAttitudeAngularVelocityBodyRequest::SetRateAttitudeAngularVelocityBodyRequest(
    ::google::protobuf::Arena* arena, const SetRateAttitudeAngularVelocityBodyRequest& from)
    : SetRateAttitudeAngularVelocityBodyRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateAttitudeAngularVelocityBodyRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateAttitudeAngularVelocityBodyRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateAttitudeAngularVelocityBodyRequest::~SetRateAttitudeAngularVelocityBodyRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateAttitudeAngularVelocityBodyRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateAttitudeAngularVelocityBodyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateAttitudeAngularVelocityBodyRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateAttitudeAngularVelocityBodyRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateAttitudeAngularVelocityBodyRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateAttitudeAngularVelocityBodyRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateAttitudeAngularVelocityBodyRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateAttitudeAngularVelocityBodyRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  return target;
}

::size_t SetRateAttitudeAngularVelocityBodyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateAttitudeAngularVelocityBodyRequest::_class_data_ = {
    SetRateAttitudeAngularVelocityBodyRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateAttitudeAngularVelocityBodyRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateAttitudeAngularVelocityBodyRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateAttitudeAngularVelocityBodyRequest*>(&to_msg);
  auto& from = static_cast<const SetRateAttitudeAngularVelocityBodyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateAttitudeAngularVelocityBodyRequest::CopyFrom(const SetRateAttitudeAngularVelocityBodyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateAttitudeAngularVelocityBodyRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateAttitudeAngularVelocityBodyRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateAttitudeAngularVelocityBodyRequest::InternalSwap(SetRateAttitudeAngularVelocityBodyRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateAttitudeAngularVelocityBodyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[82]);
}
// ===================================================================

class SetRateAttitudeAngularVelocityBodyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateAttitudeAngularVelocityBodyResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateAttitudeAngularVelocityBodyResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateAttitudeAngularVelocityBodyResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateAttitudeAngularVelocityBodyResponse::_Internal::telemetry_result(const SetRateAttitudeAngularVelocityBodyResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateAttitudeAngularVelocityBodyResponse::SetRateAttitudeAngularVelocityBodyResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateAttitudeAngularVelocityBodyResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateAttitudeAngularVelocityBodyResponse::SetRateAttitudeAngularVelocityBodyResponse(
    ::google::protobuf::Arena* arena,
    const SetRateAttitudeAngularVelocityBodyResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateAttitudeAngularVelocityBodyResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateAttitudeAngularVelocityBodyResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateAttitudeAngularVelocityBodyResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateAttitudeAngularVelocityBodyResponse::~SetRateAttitudeAngularVelocityBodyResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateAttitudeAngularVelocityBodyResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateAttitudeAngularVelocityBodyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateAttitudeAngularVelocityBodyResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateAttitudeAngularVelocityBodyResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateAttitudeAngularVelocityBodyResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateAttitudeAngularVelocityBodyResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateAttitudeAngularVelocityBodyResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateAttitudeAngularVelocityBodyResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateAttitudeAngularVelocityBodyResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  return target;
}

::size_t SetRateAttitudeAngularVelocityBodyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateAttitudeAngularVelocityBodyResponse::_class_data_ = {
    SetRateAttitudeAngularVelocityBodyResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateAttitudeAngularVelocityBodyResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateAttitudeAngularVelocityBodyResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateAttitudeAngularVelocityBodyResponse*>(&to_msg);
  auto& from = static_cast<const SetRateAttitudeAngularVelocityBodyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateAttitudeAngularVelocityBodyResponse::CopyFrom(const SetRateAttitudeAngularVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateAttitudeAngularVelocityBodyResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateAttitudeAngularVelocityBodyResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateAttitudeAngularVelocityBodyResponse::InternalSwap(SetRateAttitudeAngularVelocityBodyResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateAttitudeAngularVelocityBodyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[83]);
}
// ===================================================================

class SetRateCameraAttitudeQuaternionRequest::_Internal {
 public:
};

SetRateCameraAttitudeQuaternionRequest::SetRateCameraAttitudeQuaternionRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
}
SetRateCameraAttitudeQuaternionRequest::SetRateCameraAttitudeQuaternionRequest(
    ::google::protobuf::Arena* arena, const SetRateCameraAttitudeQuaternionRequest& from)
    : SetRateCameraAttitudeQuaternionRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateCameraAttitudeQuaternionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateCameraAttitudeQuaternionRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateCameraAttitudeQuaternionRequest::~SetRateCameraAttitudeQuaternionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateCameraAttitudeQuaternionRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateCameraAttitudeQuaternionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateCameraAttitudeQuaternionRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateCameraAttitudeQuaternionRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateCameraAttitudeQuaternionRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeQuaternionRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeQuaternionRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateCameraAttitudeQuaternionRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  return target;
}

::size_t SetRateCameraAttitudeQuaternionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateCameraAttitudeQuaternionRequest::_class_data_ = {
    SetRateCameraAttitudeQuaternionRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateCameraAttitudeQuaternionRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateCameraAttitudeQuaternionRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateCameraAttitudeQuaternionRequest*>(&to_msg);
  auto& from = static_cast<const SetRateCameraAttitudeQuaternionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateCameraAttitudeQuaternionRequest::CopyFrom(const SetRateCameraAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateCameraAttitudeQuaternionRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateCameraAttitudeQuaternionRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateCameraAttitudeQuaternionRequest::InternalSwap(SetRateCameraAttitudeQuaternionRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateCameraAttitudeQuaternionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[84]);
}
// ===================================================================

class SetRateCameraAttitudeQuaternionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateCameraAttitudeQuaternionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeQuaternionResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateCameraAttitudeQuaternionResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateCameraAttitudeQuaternionResponse::_Internal::telemetry_result(const SetRateCameraAttitudeQuaternionResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateCameraAttitudeQuaternionResponse::SetRateCameraAttitudeQuaternionResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateCameraAttitudeQuaternionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateCameraAttitudeQuaternionResponse::SetRateCameraAttitudeQuaternionResponse(
    ::google::protobuf::Arena* arena,
    const SetRateCameraAttitudeQuaternionResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateCameraAttitudeQuaternionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateCameraAttitudeQuaternionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateCameraAttitudeQuaternionResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateCameraAttitudeQuaternionResponse::~SetRateCameraAttitudeQuaternionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateCameraAttitudeQuaternionResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateCameraAttitudeQuaternionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateCameraAttitudeQuaternionResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateCameraAttitudeQuaternionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeQuaternionResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateCameraAttitudeQuaternionResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeQuaternionResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeQuaternionResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateCameraAttitudeQuaternionResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  return target;
}

::size_t SetRateCameraAttitudeQuaternionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateCameraAttitudeQuaternionResponse::_class_data_ = {
    SetRateCameraAttitudeQuaternionResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateCameraAttitudeQuaternionResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateCameraAttitudeQuaternionResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateCameraAttitudeQuaternionResponse*>(&to_msg);
  auto& from = static_cast<const SetRateCameraAttitudeQuaternionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateCameraAttitudeQuaternionResponse::CopyFrom(const SetRateCameraAttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateCameraAttitudeQuaternionResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateCameraAttitudeQuaternionResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateCameraAttitudeQuaternionResponse::InternalSwap(SetRateCameraAttitudeQuaternionResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateCameraAttitudeQuaternionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[85]);
}
// ===================================================================

class SetRateCameraAttitudeRequest::_Internal {
 public:
};

SetRateCameraAttitudeRequest::SetRateCameraAttitudeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
}
SetRateCameraAttitudeRequest::SetRateCameraAttitudeRequest(
    ::google::protobuf::Arena* arena, const SetRateCameraAttitudeRequest& from)
    : SetRateCameraAttitudeRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateCameraAttitudeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateCameraAttitudeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateCameraAttitudeRequest::~SetRateCameraAttitudeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateCameraAttitudeRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateCameraAttitudeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateCameraAttitudeRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateCameraAttitudeRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateCameraAttitudeRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateCameraAttitudeRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  return target;
}

::size_t SetRateCameraAttitudeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateCameraAttitudeRequest::_class_data_ = {
    SetRateCameraAttitudeRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateCameraAttitudeRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateCameraAttitudeRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateCameraAttitudeRequest*>(&to_msg);
  auto& from = static_cast<const SetRateCameraAttitudeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateCameraAttitudeRequest::CopyFrom(const SetRateCameraAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateCameraAttitudeRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateCameraAttitudeRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateCameraAttitudeRequest::InternalSwap(SetRateCameraAttitudeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateCameraAttitudeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[86]);
}
// ===================================================================

class SetRateCameraAttitudeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateCameraAttitudeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateCameraAttitudeResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateCameraAttitudeResponse::_Internal::telemetry_result(const SetRateCameraAttitudeResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateCameraAttitudeResponse::SetRateCameraAttitudeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateCameraAttitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateCameraAttitudeResponse::SetRateCameraAttitudeResponse(
    ::google::protobuf::Arena* arena,
    const SetRateCameraAttitudeResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateCameraAttitudeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateCameraAttitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateCameraAttitudeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateCameraAttitudeResponse::~SetRateCameraAttitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateCameraAttitudeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateCameraAttitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateCameraAttitudeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateCameraAttitudeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateCameraAttitudeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateCameraAttitudeResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateCameraAttitudeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  return target;
}

::size_t SetRateCameraAttitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateCameraAttitudeResponse::_class_data_ = {
    SetRateCameraAttitudeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateCameraAttitudeResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateCameraAttitudeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateCameraAttitudeResponse*>(&to_msg);
  auto& from = static_cast<const SetRateCameraAttitudeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateCameraAttitudeResponse::CopyFrom(const SetRateCameraAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateCameraAttitudeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateCameraAttitudeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateCameraAttitudeResponse::InternalSwap(SetRateCameraAttitudeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateCameraAttitudeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[87]);
}
// ===================================================================

class SetRateVelocityNedRequest::_Internal {
 public:
};

SetRateVelocityNedRequest::SetRateVelocityNedRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
}
SetRateVelocityNedRequest::SetRateVelocityNedRequest(
    ::google::protobuf::Arena* arena, const SetRateVelocityNedRequest& from)
    : SetRateVelocityNedRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateVelocityNedRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateVelocityNedRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateVelocityNedRequest::~SetRateVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateVelocityNedRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateVelocityNedRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateVelocityNedRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateVelocityNedRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateVelocityNedRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateVelocityNedRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateVelocityNedRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  return target;
}

::size_t SetRateVelocityNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateVelocityNedRequest::_class_data_ = {
    SetRateVelocityNedRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateVelocityNedRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateVelocityNedRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateVelocityNedRequest*>(&to_msg);
  auto& from = static_cast<const SetRateVelocityNedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateVelocityNedRequest::CopyFrom(const SetRateVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateVelocityNedRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateVelocityNedRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateVelocityNedRequest::InternalSwap(SetRateVelocityNedRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateVelocityNedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[88]);
}
// ===================================================================

class SetRateVelocityNedResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateVelocityNedResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateVelocityNedResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateVelocityNedResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateVelocityNedResponse::_Internal::telemetry_result(const SetRateVelocityNedResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateVelocityNedResponse::SetRateVelocityNedResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateVelocityNedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateVelocityNedResponse::SetRateVelocityNedResponse(
    ::google::protobuf::Arena* arena,
    const SetRateVelocityNedResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateVelocityNedResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateVelocityNedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateVelocityNedResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateVelocityNedResponse::~SetRateVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateVelocityNedResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateVelocityNedResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateVelocityNedResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateVelocityNedResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateVelocityNedResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateVelocityNedResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateVelocityNedResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateVelocityNedResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  return target;
}

::size_t SetRateVelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateVelocityNedResponse::_class_data_ = {
    SetRateVelocityNedResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateVelocityNedResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateVelocityNedResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateVelocityNedResponse*>(&to_msg);
  auto& from = static_cast<const SetRateVelocityNedResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateVelocityNedResponse::CopyFrom(const SetRateVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateVelocityNedResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateVelocityNedResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateVelocityNedResponse::InternalSwap(SetRateVelocityNedResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateVelocityNedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[89]);
}
// ===================================================================

class SetRateGpsInfoRequest::_Internal {
 public:
};

SetRateGpsInfoRequest::SetRateGpsInfoRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
}
SetRateGpsInfoRequest::SetRateGpsInfoRequest(
    ::google::protobuf::Arena* arena, const SetRateGpsInfoRequest& from)
    : SetRateGpsInfoRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateGpsInfoRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateGpsInfoRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateGpsInfoRequest::~SetRateGpsInfoRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateGpsInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateGpsInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateGpsInfoRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateGpsInfoRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateGpsInfoRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateGpsInfoRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateGpsInfoRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateGpsInfoRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  return target;
}

::size_t SetRateGpsInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateGpsInfoRequest::_class_data_ = {
    SetRateGpsInfoRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateGpsInfoRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateGpsInfoRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateGpsInfoRequest*>(&to_msg);
  auto& from = static_cast<const SetRateGpsInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateGpsInfoRequest::CopyFrom(const SetRateGpsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateGpsInfoRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateGpsInfoRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateGpsInfoRequest::InternalSwap(SetRateGpsInfoRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateGpsInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[90]);
}
// ===================================================================

class SetRateGpsInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateGpsInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateGpsInfoResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateGpsInfoResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateGpsInfoResponse::_Internal::telemetry_result(const SetRateGpsInfoResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateGpsInfoResponse::SetRateGpsInfoResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateGpsInfoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateGpsInfoResponse::SetRateGpsInfoResponse(
    ::google::protobuf::Arena* arena,
    const SetRateGpsInfoResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateGpsInfoResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateGpsInfoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateGpsInfoResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateGpsInfoResponse::~SetRateGpsInfoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateGpsInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateGpsInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateGpsInfoResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateGpsInfoResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateGpsInfoResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateGpsInfoResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateGpsInfoResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateGpsInfoResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateGpsInfoResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  return target;
}

::size_t SetRateGpsInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateGpsInfoResponse::_class_data_ = {
    SetRateGpsInfoResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateGpsInfoResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateGpsInfoResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateGpsInfoResponse*>(&to_msg);
  auto& from = static_cast<const SetRateGpsInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateGpsInfoResponse::CopyFrom(const SetRateGpsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateGpsInfoResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateGpsInfoResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateGpsInfoResponse::InternalSwap(SetRateGpsInfoResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateGpsInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[91]);
}
// ===================================================================

class SetRateRawGpsRequest::_Internal {
 public:
};

SetRateRawGpsRequest::SetRateRawGpsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
}
SetRateRawGpsRequest::SetRateRawGpsRequest(
    ::google::protobuf::Arena* arena, const SetRateRawGpsRequest& from)
    : SetRateRawGpsRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateRawGpsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateRawGpsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateRawGpsRequest::~SetRateRawGpsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateRawGpsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateRawGpsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateRawGpsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateRawGpsRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateRawGpsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateRawGpsRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateRawGpsRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateRawGpsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  return target;
}

::size_t SetRateRawGpsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateRawGpsRequest::_class_data_ = {
    SetRateRawGpsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateRawGpsRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateRawGpsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateRawGpsRequest*>(&to_msg);
  auto& from = static_cast<const SetRateRawGpsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateRawGpsRequest::CopyFrom(const SetRateRawGpsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateRawGpsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateRawGpsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateRawGpsRequest::InternalSwap(SetRateRawGpsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateRawGpsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[92]);
}
// ===================================================================

class SetRateBatteryRequest::_Internal {
 public:
};

SetRateBatteryRequest::SetRateBatteryRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateBatteryRequest)
}
SetRateBatteryRequest::SetRateBatteryRequest(
    ::google::protobuf::Arena* arena, const SetRateBatteryRequest& from)
    : SetRateBatteryRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateBatteryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateBatteryRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateBatteryRequest::~SetRateBatteryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateBatteryRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateBatteryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateBatteryRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateBatteryRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateBatteryRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateBatteryRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateBatteryRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateBatteryRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  return target;
}

::size_t SetRateBatteryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateBatteryRequest::_class_data_ = {
    SetRateBatteryRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateBatteryRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateBatteryRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateBatteryRequest*>(&to_msg);
  auto& from = static_cast<const SetRateBatteryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateBatteryRequest::CopyFrom(const SetRateBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateBatteryRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateBatteryRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateBatteryRequest::InternalSwap(SetRateBatteryRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateBatteryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[93]);
}
// ===================================================================

class SetRateBatteryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateBatteryResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateBatteryResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateBatteryResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateBatteryResponse::_Internal::telemetry_result(const SetRateBatteryResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateBatteryResponse::SetRateBatteryResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateBatteryResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateBatteryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateBatteryResponse::SetRateBatteryResponse(
    ::google::protobuf::Arena* arena,
    const SetRateBatteryResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateBatteryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateBatteryResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateBatteryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateBatteryResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateBatteryResponse::~SetRateBatteryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateBatteryResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateBatteryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateBatteryResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateBatteryResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateBatteryResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateBatteryResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateBatteryResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateBatteryResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateBatteryResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  return target;
}

::size_t SetRateBatteryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateBatteryResponse::_class_data_ = {
    SetRateBatteryResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateBatteryResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateBatteryResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateBatteryResponse*>(&to_msg);
  auto& from = static_cast<const SetRateBatteryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateBatteryResponse::CopyFrom(const SetRateBatteryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateBatteryResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateBatteryResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateBatteryResponse::InternalSwap(SetRateBatteryResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateBatteryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[94]);
}
// ===================================================================

class SetRateRcStatusRequest::_Internal {
 public:
};

SetRateRcStatusRequest::SetRateRcStatusRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
}
SetRateRcStatusRequest::SetRateRcStatusRequest(
    ::google::protobuf::Arena* arena, const SetRateRcStatusRequest& from)
    : SetRateRcStatusRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateRcStatusRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateRcStatusRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateRcStatusRequest::~SetRateRcStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateRcStatusRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateRcStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateRcStatusRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateRcStatusRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateRcStatusRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateRcStatusRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateRcStatusRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateRcStatusRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  return target;
}

::size_t SetRateRcStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateRcStatusRequest::_class_data_ = {
    SetRateRcStatusRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateRcStatusRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateRcStatusRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateRcStatusRequest*>(&to_msg);
  auto& from = static_cast<const SetRateRcStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateRcStatusRequest::CopyFrom(const SetRateRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateRcStatusRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateRcStatusRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateRcStatusRequest::InternalSwap(SetRateRcStatusRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateRcStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[95]);
}
// ===================================================================

class SetRateRcStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateRcStatusResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateRcStatusResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateRcStatusResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateRcStatusResponse::_Internal::telemetry_result(const SetRateRcStatusResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateRcStatusResponse::SetRateRcStatusResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateRcStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateRcStatusResponse::SetRateRcStatusResponse(
    ::google::protobuf::Arena* arena,
    const SetRateRcStatusResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateRcStatusResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateRcStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateRcStatusResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateRcStatusResponse::~SetRateRcStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateRcStatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateRcStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateRcStatusResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateRcStatusResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateRcStatusResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateRcStatusResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateRcStatusResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateRcStatusResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateRcStatusResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  return target;
}

::size_t SetRateRcStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateRcStatusResponse::_class_data_ = {
    SetRateRcStatusResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateRcStatusResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateRcStatusResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateRcStatusResponse*>(&to_msg);
  auto& from = static_cast<const SetRateRcStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateRcStatusResponse::CopyFrom(const SetRateRcStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateRcStatusResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateRcStatusResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateRcStatusResponse::InternalSwap(SetRateRcStatusResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateRcStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[96]);
}
// ===================================================================

class SetRateActuatorControlTargetRequest::_Internal {
 public:
};

SetRateActuatorControlTargetRequest::SetRateActuatorControlTargetRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
}
SetRateActuatorControlTargetRequest::SetRateActuatorControlTargetRequest(
    ::google::protobuf::Arena* arena, const SetRateActuatorControlTargetRequest& from)
    : SetRateActuatorControlTargetRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateActuatorControlTargetRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateActuatorControlTargetRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateActuatorControlTargetRequest::~SetRateActuatorControlTargetRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateActuatorControlTargetRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateActuatorControlTargetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateActuatorControlTargetRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateActuatorControlTargetRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateActuatorControlTargetRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateActuatorControlTargetRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateActuatorControlTargetRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateActuatorControlTargetRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  return target;
}

::size_t SetRateActuatorControlTargetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateActuatorControlTargetRequest::_class_data_ = {
    SetRateActuatorControlTargetRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateActuatorControlTargetRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateActuatorControlTargetRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateActuatorControlTargetRequest*>(&to_msg);
  auto& from = static_cast<const SetRateActuatorControlTargetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateActuatorControlTargetRequest::CopyFrom(const SetRateActuatorControlTargetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateActuatorControlTargetRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateActuatorControlTargetRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateActuatorControlTargetRequest::InternalSwap(SetRateActuatorControlTargetRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateActuatorControlTargetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[97]);
}
// ===================================================================

class SetRateActuatorControlTargetResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateActuatorControlTargetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateActuatorControlTargetResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateActuatorControlTargetResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateActuatorControlTargetResponse::_Internal::telemetry_result(const SetRateActuatorControlTargetResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateActuatorControlTargetResponse::SetRateActuatorControlTargetResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateActuatorControlTargetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateActuatorControlTargetResponse::SetRateActuatorControlTargetResponse(
    ::google::protobuf::Arena* arena,
    const SetRateActuatorControlTargetResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateActuatorControlTargetResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateActuatorControlTargetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateActuatorControlTargetResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateActuatorControlTargetResponse::~SetRateActuatorControlTargetResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateActuatorControlTargetResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateActuatorControlTargetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateActuatorControlTargetResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateActuatorControlTargetResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateActuatorControlTargetResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateActuatorControlTargetResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateActuatorControlTargetResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateActuatorControlTargetResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateActuatorControlTargetResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  return target;
}

::size_t SetRateActuatorControlTargetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateActuatorControlTargetResponse::_class_data_ = {
    SetRateActuatorControlTargetResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateActuatorControlTargetResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateActuatorControlTargetResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateActuatorControlTargetResponse*>(&to_msg);
  auto& from = static_cast<const SetRateActuatorControlTargetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateActuatorControlTargetResponse::CopyFrom(const SetRateActuatorControlTargetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateActuatorControlTargetResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateActuatorControlTargetResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateActuatorControlTargetResponse::InternalSwap(SetRateActuatorControlTargetResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateActuatorControlTargetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[98]);
}
// ===================================================================

class SetRateActuatorOutputStatusRequest::_Internal {
 public:
};

SetRateActuatorOutputStatusRequest::SetRateActuatorOutputStatusRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
}
SetRateActuatorOutputStatusRequest::SetRateActuatorOutputStatusRequest(
    ::google::protobuf::Arena* arena, const SetRateActuatorOutputStatusRequest& from)
    : SetRateActuatorOutputStatusRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateActuatorOutputStatusRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateActuatorOutputStatusRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateActuatorOutputStatusRequest::~SetRateActuatorOutputStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateActuatorOutputStatusRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateActuatorOutputStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateActuatorOutputStatusRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateActuatorOutputStatusRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateActuatorOutputStatusRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateActuatorOutputStatusRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateActuatorOutputStatusRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateActuatorOutputStatusRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  return target;
}

::size_t SetRateActuatorOutputStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateActuatorOutputStatusRequest::_class_data_ = {
    SetRateActuatorOutputStatusRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateActuatorOutputStatusRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateActuatorOutputStatusRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateActuatorOutputStatusRequest*>(&to_msg);
  auto& from = static_cast<const SetRateActuatorOutputStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateActuatorOutputStatusRequest::CopyFrom(const SetRateActuatorOutputStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateActuatorOutputStatusRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateActuatorOutputStatusRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateActuatorOutputStatusRequest::InternalSwap(SetRateActuatorOutputStatusRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateActuatorOutputStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[99]);
}
// ===================================================================

class SetRateActuatorOutputStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateActuatorOutputStatusResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateActuatorOutputStatusResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateActuatorOutputStatusResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateActuatorOutputStatusResponse::_Internal::telemetry_result(const SetRateActuatorOutputStatusResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateActuatorOutputStatusResponse::SetRateActuatorOutputStatusResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateActuatorOutputStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateActuatorOutputStatusResponse::SetRateActuatorOutputStatusResponse(
    ::google::protobuf::Arena* arena,
    const SetRateActuatorOutputStatusResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateActuatorOutputStatusResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateActuatorOutputStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateActuatorOutputStatusResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateActuatorOutputStatusResponse::~SetRateActuatorOutputStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateActuatorOutputStatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateActuatorOutputStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateActuatorOutputStatusResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateActuatorOutputStatusResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateActuatorOutputStatusResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateActuatorOutputStatusResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateActuatorOutputStatusResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateActuatorOutputStatusResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateActuatorOutputStatusResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  return target;
}

::size_t SetRateActuatorOutputStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateActuatorOutputStatusResponse::_class_data_ = {
    SetRateActuatorOutputStatusResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateActuatorOutputStatusResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateActuatorOutputStatusResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateActuatorOutputStatusResponse*>(&to_msg);
  auto& from = static_cast<const SetRateActuatorOutputStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateActuatorOutputStatusResponse::CopyFrom(const SetRateActuatorOutputStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateActuatorOutputStatusResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateActuatorOutputStatusResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateActuatorOutputStatusResponse::InternalSwap(SetRateActuatorOutputStatusResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateActuatorOutputStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[100]);
}
// ===================================================================

class SetRateOdometryRequest::_Internal {
 public:
};

SetRateOdometryRequest::SetRateOdometryRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateOdometryRequest)
}
SetRateOdometryRequest::SetRateOdometryRequest(
    ::google::protobuf::Arena* arena, const SetRateOdometryRequest& from)
    : SetRateOdometryRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateOdometryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateOdometryRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateOdometryRequest::~SetRateOdometryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateOdometryRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateOdometryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateOdometryRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateOdometryRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateOdometryRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateOdometryRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateOdometryRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateOdometryRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  return target;
}

::size_t SetRateOdometryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateOdometryRequest::_class_data_ = {
    SetRateOdometryRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateOdometryRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateOdometryRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateOdometryRequest*>(&to_msg);
  auto& from = static_cast<const SetRateOdometryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateOdometryRequest::CopyFrom(const SetRateOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateOdometryRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateOdometryRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateOdometryRequest::InternalSwap(SetRateOdometryRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateOdometryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[101]);
}
// ===================================================================

class SetRateOdometryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateOdometryResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateOdometryResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateOdometryResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateOdometryResponse::_Internal::telemetry_result(const SetRateOdometryResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateOdometryResponse::SetRateOdometryResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateOdometryResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateOdometryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateOdometryResponse::SetRateOdometryResponse(
    ::google::protobuf::Arena* arena,
    const SetRateOdometryResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateOdometryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateOdometryResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateOdometryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateOdometryResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateOdometryResponse::~SetRateOdometryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateOdometryResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateOdometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateOdometryResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateOdometryResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateOdometryResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateOdometryResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateOdometryResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateOdometryResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateOdometryResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  return target;
}

::size_t SetRateOdometryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateOdometryResponse::_class_data_ = {
    SetRateOdometryResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateOdometryResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateOdometryResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateOdometryResponse*>(&to_msg);
  auto& from = static_cast<const SetRateOdometryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateOdometryResponse::CopyFrom(const SetRateOdometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateOdometryResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateOdometryResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateOdometryResponse::InternalSwap(SetRateOdometryResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateOdometryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[102]);
}
// ===================================================================

class SetRatePositionVelocityNedRequest::_Internal {
 public:
};

SetRatePositionVelocityNedRequest::SetRatePositionVelocityNedRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
}
SetRatePositionVelocityNedRequest::SetRatePositionVelocityNedRequest(
    ::google::protobuf::Arena* arena, const SetRatePositionVelocityNedRequest& from)
    : SetRatePositionVelocityNedRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRatePositionVelocityNedRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRatePositionVelocityNedRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRatePositionVelocityNedRequest::~SetRatePositionVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRatePositionVelocityNedRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRatePositionVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRatePositionVelocityNedRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRatePositionVelocityNedRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRatePositionVelocityNedRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRatePositionVelocityNedRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRatePositionVelocityNedRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRatePositionVelocityNedRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  return target;
}

::size_t SetRatePositionVelocityNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRatePositionVelocityNedRequest::_class_data_ = {
    SetRatePositionVelocityNedRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRatePositionVelocityNedRequest::GetClassData() const {
  return &_class_data_;
}

void SetRatePositionVelocityNedRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRatePositionVelocityNedRequest*>(&to_msg);
  auto& from = static_cast<const SetRatePositionVelocityNedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRatePositionVelocityNedRequest::CopyFrom(const SetRatePositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRatePositionVelocityNedRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRatePositionVelocityNedRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRatePositionVelocityNedRequest::InternalSwap(SetRatePositionVelocityNedRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRatePositionVelocityNedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[103]);
}
// ===================================================================

class SetRatePositionVelocityNedResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRatePositionVelocityNedResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRatePositionVelocityNedResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRatePositionVelocityNedResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRatePositionVelocityNedResponse::_Internal::telemetry_result(const SetRatePositionVelocityNedResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRatePositionVelocityNedResponse::SetRatePositionVelocityNedResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRatePositionVelocityNedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRatePositionVelocityNedResponse::SetRatePositionVelocityNedResponse(
    ::google::protobuf::Arena* arena,
    const SetRatePositionVelocityNedResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRatePositionVelocityNedResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRatePositionVelocityNedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRatePositionVelocityNedResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRatePositionVelocityNedResponse::~SetRatePositionVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRatePositionVelocityNedResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRatePositionVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRatePositionVelocityNedResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRatePositionVelocityNedResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRatePositionVelocityNedResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRatePositionVelocityNedResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRatePositionVelocityNedResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRatePositionVelocityNedResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRatePositionVelocityNedResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  return target;
}

::size_t SetRatePositionVelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRatePositionVelocityNedResponse::_class_data_ = {
    SetRatePositionVelocityNedResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRatePositionVelocityNedResponse::GetClassData() const {
  return &_class_data_;
}

void SetRatePositionVelocityNedResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRatePositionVelocityNedResponse*>(&to_msg);
  auto& from = static_cast<const SetRatePositionVelocityNedResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRatePositionVelocityNedResponse::CopyFrom(const SetRatePositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRatePositionVelocityNedResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRatePositionVelocityNedResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRatePositionVelocityNedResponse::InternalSwap(SetRatePositionVelocityNedResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRatePositionVelocityNedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[104]);
}
// ===================================================================

class SetRateGroundTruthRequest::_Internal {
 public:
};

SetRateGroundTruthRequest::SetRateGroundTruthRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
}
SetRateGroundTruthRequest::SetRateGroundTruthRequest(
    ::google::protobuf::Arena* arena, const SetRateGroundTruthRequest& from)
    : SetRateGroundTruthRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateGroundTruthRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateGroundTruthRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateGroundTruthRequest::~SetRateGroundTruthRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateGroundTruthRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateGroundTruthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateGroundTruthRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateGroundTruthRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateGroundTruthRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateGroundTruthRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateGroundTruthRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateGroundTruthRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  return target;
}

::size_t SetRateGroundTruthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateGroundTruthRequest::_class_data_ = {
    SetRateGroundTruthRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateGroundTruthRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateGroundTruthRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateGroundTruthRequest*>(&to_msg);
  auto& from = static_cast<const SetRateGroundTruthRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateGroundTruthRequest::CopyFrom(const SetRateGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateGroundTruthRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateGroundTruthRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateGroundTruthRequest::InternalSwap(SetRateGroundTruthRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateGroundTruthRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[105]);
}
// ===================================================================

class SetRateGroundTruthResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateGroundTruthResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateGroundTruthResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateGroundTruthResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateGroundTruthResponse::_Internal::telemetry_result(const SetRateGroundTruthResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateGroundTruthResponse::SetRateGroundTruthResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateGroundTruthResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateGroundTruthResponse::SetRateGroundTruthResponse(
    ::google::protobuf::Arena* arena,
    const SetRateGroundTruthResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateGroundTruthResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateGroundTruthResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateGroundTruthResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateGroundTruthResponse::~SetRateGroundTruthResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateGroundTruthResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateGroundTruthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateGroundTruthResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateGroundTruthResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateGroundTruthResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateGroundTruthResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateGroundTruthResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateGroundTruthResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateGroundTruthResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  return target;
}

::size_t SetRateGroundTruthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateGroundTruthResponse::_class_data_ = {
    SetRateGroundTruthResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateGroundTruthResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateGroundTruthResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateGroundTruthResponse*>(&to_msg);
  auto& from = static_cast<const SetRateGroundTruthResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateGroundTruthResponse::CopyFrom(const SetRateGroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateGroundTruthResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateGroundTruthResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateGroundTruthResponse::InternalSwap(SetRateGroundTruthResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateGroundTruthResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[106]);
}
// ===================================================================

class SetRateFixedwingMetricsRequest::_Internal {
 public:
};

SetRateFixedwingMetricsRequest::SetRateFixedwingMetricsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
}
SetRateFixedwingMetricsRequest::SetRateFixedwingMetricsRequest(
    ::google::protobuf::Arena* arena, const SetRateFixedwingMetricsRequest& from)
    : SetRateFixedwingMetricsRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateFixedwingMetricsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateFixedwingMetricsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateFixedwingMetricsRequest::~SetRateFixedwingMetricsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateFixedwingMetricsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateFixedwingMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateFixedwingMetricsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateFixedwingMetricsRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateFixedwingMetricsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateFixedwingMetricsRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateFixedwingMetricsRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateFixedwingMetricsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  return target;
}

::size_t SetRateFixedwingMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateFixedwingMetricsRequest::_class_data_ = {
    SetRateFixedwingMetricsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateFixedwingMetricsRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateFixedwingMetricsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateFixedwingMetricsRequest*>(&to_msg);
  auto& from = static_cast<const SetRateFixedwingMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateFixedwingMetricsRequest::CopyFrom(const SetRateFixedwingMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateFixedwingMetricsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateFixedwingMetricsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateFixedwingMetricsRequest::InternalSwap(SetRateFixedwingMetricsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateFixedwingMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[107]);
}
// ===================================================================

class SetRateFixedwingMetricsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateFixedwingMetricsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateFixedwingMetricsResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateFixedwingMetricsResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateFixedwingMetricsResponse::_Internal::telemetry_result(const SetRateFixedwingMetricsResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateFixedwingMetricsResponse::SetRateFixedwingMetricsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateFixedwingMetricsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateFixedwingMetricsResponse::SetRateFixedwingMetricsResponse(
    ::google::protobuf::Arena* arena,
    const SetRateFixedwingMetricsResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateFixedwingMetricsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateFixedwingMetricsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateFixedwingMetricsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateFixedwingMetricsResponse::~SetRateFixedwingMetricsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateFixedwingMetricsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateFixedwingMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateFixedwingMetricsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateFixedwingMetricsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateFixedwingMetricsResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateFixedwingMetricsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateFixedwingMetricsResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateFixedwingMetricsResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateFixedwingMetricsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  return target;
}

::size_t SetRateFixedwingMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateFixedwingMetricsResponse::_class_data_ = {
    SetRateFixedwingMetricsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateFixedwingMetricsResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateFixedwingMetricsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateFixedwingMetricsResponse*>(&to_msg);
  auto& from = static_cast<const SetRateFixedwingMetricsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateFixedwingMetricsResponse::CopyFrom(const SetRateFixedwingMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateFixedwingMetricsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateFixedwingMetricsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateFixedwingMetricsResponse::InternalSwap(SetRateFixedwingMetricsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateFixedwingMetricsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[108]);
}
// ===================================================================

class SetRateImuRequest::_Internal {
 public:
};

SetRateImuRequest::SetRateImuRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateImuRequest)
}
SetRateImuRequest::SetRateImuRequest(
    ::google::protobuf::Arena* arena, const SetRateImuRequest& from)
    : SetRateImuRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateImuRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateImuRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateImuRequest::~SetRateImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateImuRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateImuRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateImuRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateImuRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateImuRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateImuRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateImuRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateImuRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateImuRequest)
  return target;
}

::size_t SetRateImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateImuRequest::_class_data_ = {
    SetRateImuRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateImuRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateImuRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateImuRequest*>(&to_msg);
  auto& from = static_cast<const SetRateImuRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateImuRequest::CopyFrom(const SetRateImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateImuRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateImuRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateImuRequest::InternalSwap(SetRateImuRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateImuRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[109]);
}
// ===================================================================

class SetRateImuResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateImuResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateImuResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateImuResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateImuResponse::_Internal::telemetry_result(const SetRateImuResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateImuResponse::SetRateImuResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateImuResponse::SetRateImuResponse(
    ::google::protobuf::Arena* arena,
    const SetRateImuResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateImuResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateImuResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateImuResponse::~SetRateImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateImuResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateImuResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateImuResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateImuResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateImuResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateImuResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateImuResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateImuResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateImuResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateImuResponse)
  return target;
}

::size_t SetRateImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateImuResponse::_class_data_ = {
    SetRateImuResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateImuResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateImuResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateImuResponse*>(&to_msg);
  auto& from = static_cast<const SetRateImuResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateImuResponse::CopyFrom(const SetRateImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateImuResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateImuResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateImuResponse::InternalSwap(SetRateImuResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateImuResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[110]);
}
// ===================================================================

class SetRateScaledImuRequest::_Internal {
 public:
};

SetRateScaledImuRequest::SetRateScaledImuRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
}
SetRateScaledImuRequest::SetRateScaledImuRequest(
    ::google::protobuf::Arena* arena, const SetRateScaledImuRequest& from)
    : SetRateScaledImuRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateScaledImuRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateScaledImuRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateScaledImuRequest::~SetRateScaledImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateScaledImuRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateScaledImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateScaledImuRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateScaledImuRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateScaledImuRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateScaledImuRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateScaledImuRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateScaledImuRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  return target;
}

::size_t SetRateScaledImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateScaledImuRequest::_class_data_ = {
    SetRateScaledImuRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateScaledImuRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateScaledImuRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateScaledImuRequest*>(&to_msg);
  auto& from = static_cast<const SetRateScaledImuRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateScaledImuRequest::CopyFrom(const SetRateScaledImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateScaledImuRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateScaledImuRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateScaledImuRequest::InternalSwap(SetRateScaledImuRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateScaledImuRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[111]);
}
// ===================================================================

class SetRateScaledImuResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateScaledImuResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateScaledImuResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateScaledImuResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateScaledImuResponse::_Internal::telemetry_result(const SetRateScaledImuResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateScaledImuResponse::SetRateScaledImuResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateScaledImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateScaledImuResponse::SetRateScaledImuResponse(
    ::google::protobuf::Arena* arena,
    const SetRateScaledImuResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateScaledImuResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateScaledImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateScaledImuResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateScaledImuResponse::~SetRateScaledImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateScaledImuResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateScaledImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateScaledImuResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateScaledImuResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateScaledImuResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateScaledImuResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateScaledImuResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateScaledImuResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateScaledImuResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  return target;
}

::size_t SetRateScaledImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateScaledImuResponse::_class_data_ = {
    SetRateScaledImuResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateScaledImuResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateScaledImuResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateScaledImuResponse*>(&to_msg);
  auto& from = static_cast<const SetRateScaledImuResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateScaledImuResponse::CopyFrom(const SetRateScaledImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateScaledImuResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateScaledImuResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateScaledImuResponse::InternalSwap(SetRateScaledImuResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateScaledImuResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[112]);
}
// ===================================================================

class SetRateRawImuRequest::_Internal {
 public:
};

SetRateRawImuRequest::SetRateRawImuRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateRawImuRequest)
}
SetRateRawImuRequest::SetRateRawImuRequest(
    ::google::protobuf::Arena* arena, const SetRateRawImuRequest& from)
    : SetRateRawImuRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateRawImuRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateRawImuRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateRawImuRequest::~SetRateRawImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateRawImuRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateRawImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateRawImuRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateRawImuRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateRawImuRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateRawImuRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateRawImuRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateRawImuRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  return target;
}

::size_t SetRateRawImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateRawImuRequest::_class_data_ = {
    SetRateRawImuRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateRawImuRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateRawImuRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateRawImuRequest*>(&to_msg);
  auto& from = static_cast<const SetRateRawImuRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateRawImuRequest::CopyFrom(const SetRateRawImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateRawImuRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateRawImuRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateRawImuRequest::InternalSwap(SetRateRawImuRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateRawImuRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[113]);
}
// ===================================================================

class SetRateRawImuResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateRawImuResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateRawImuResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateRawImuResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateRawImuResponse::_Internal::telemetry_result(const SetRateRawImuResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateRawImuResponse::SetRateRawImuResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateRawImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateRawImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateRawImuResponse::SetRateRawImuResponse(
    ::google::protobuf::Arena* arena,
    const SetRateRawImuResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateRawImuResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateRawImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateRawImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateRawImuResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateRawImuResponse::~SetRateRawImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateRawImuResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateRawImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateRawImuResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateRawImuResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateRawImuResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateRawImuResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateRawImuResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateRawImuResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateRawImuResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  return target;
}

::size_t SetRateRawImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateRawImuResponse::_class_data_ = {
    SetRateRawImuResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateRawImuResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateRawImuResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateRawImuResponse*>(&to_msg);
  auto& from = static_cast<const SetRateRawImuResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateRawImuResponse::CopyFrom(const SetRateRawImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateRawImuResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateRawImuResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateRawImuResponse::InternalSwap(SetRateRawImuResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateRawImuResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[114]);
}
// ===================================================================

class SetRateUnixEpochTimeRequest::_Internal {
 public:
};

SetRateUnixEpochTimeRequest::SetRateUnixEpochTimeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
}
SetRateUnixEpochTimeRequest::SetRateUnixEpochTimeRequest(
    ::google::protobuf::Arena* arena, const SetRateUnixEpochTimeRequest& from)
    : SetRateUnixEpochTimeRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateUnixEpochTimeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateUnixEpochTimeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateUnixEpochTimeRequest::~SetRateUnixEpochTimeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateUnixEpochTimeRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateUnixEpochTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateUnixEpochTimeRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateUnixEpochTimeRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateUnixEpochTimeRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateUnixEpochTimeRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateUnixEpochTimeRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateUnixEpochTimeRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  return target;
}

::size_t SetRateUnixEpochTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateUnixEpochTimeRequest::_class_data_ = {
    SetRateUnixEpochTimeRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateUnixEpochTimeRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateUnixEpochTimeRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateUnixEpochTimeRequest*>(&to_msg);
  auto& from = static_cast<const SetRateUnixEpochTimeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateUnixEpochTimeRequest::CopyFrom(const SetRateUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateUnixEpochTimeRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateUnixEpochTimeRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateUnixEpochTimeRequest::InternalSwap(SetRateUnixEpochTimeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateUnixEpochTimeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[115]);
}
// ===================================================================

class SetRateUnixEpochTimeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateUnixEpochTimeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateUnixEpochTimeResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateUnixEpochTimeResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateUnixEpochTimeResponse::_Internal::telemetry_result(const SetRateUnixEpochTimeResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateUnixEpochTimeResponse::SetRateUnixEpochTimeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateUnixEpochTimeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateUnixEpochTimeResponse::SetRateUnixEpochTimeResponse(
    ::google::protobuf::Arena* arena,
    const SetRateUnixEpochTimeResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateUnixEpochTimeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateUnixEpochTimeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateUnixEpochTimeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateUnixEpochTimeResponse::~SetRateUnixEpochTimeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateUnixEpochTimeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateUnixEpochTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateUnixEpochTimeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateUnixEpochTimeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateUnixEpochTimeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateUnixEpochTimeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateUnixEpochTimeResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateUnixEpochTimeResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateUnixEpochTimeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  return target;
}

::size_t SetRateUnixEpochTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateUnixEpochTimeResponse::_class_data_ = {
    SetRateUnixEpochTimeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateUnixEpochTimeResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateUnixEpochTimeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateUnixEpochTimeResponse*>(&to_msg);
  auto& from = static_cast<const SetRateUnixEpochTimeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateUnixEpochTimeResponse::CopyFrom(const SetRateUnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateUnixEpochTimeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateUnixEpochTimeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateUnixEpochTimeResponse::InternalSwap(SetRateUnixEpochTimeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateUnixEpochTimeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[116]);
}
// ===================================================================

class SetRateDistanceSensorRequest::_Internal {
 public:
};

SetRateDistanceSensorRequest::SetRateDistanceSensorRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
}
SetRateDistanceSensorRequest::SetRateDistanceSensorRequest(
    ::google::protobuf::Arena* arena, const SetRateDistanceSensorRequest& from)
    : SetRateDistanceSensorRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateDistanceSensorRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateDistanceSensorRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateDistanceSensorRequest::~SetRateDistanceSensorRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateDistanceSensorRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateDistanceSensorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateDistanceSensorRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateDistanceSensorRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateDistanceSensorRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateDistanceSensorRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateDistanceSensorRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateDistanceSensorRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  return target;
}

::size_t SetRateDistanceSensorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateDistanceSensorRequest::_class_data_ = {
    SetRateDistanceSensorRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateDistanceSensorRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateDistanceSensorRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateDistanceSensorRequest*>(&to_msg);
  auto& from = static_cast<const SetRateDistanceSensorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateDistanceSensorRequest::CopyFrom(const SetRateDistanceSensorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateDistanceSensorRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateDistanceSensorRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateDistanceSensorRequest::InternalSwap(SetRateDistanceSensorRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateDistanceSensorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[117]);
}
// ===================================================================

class SetRateDistanceSensorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateDistanceSensorResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateDistanceSensorResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateDistanceSensorResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateDistanceSensorResponse::_Internal::telemetry_result(const SetRateDistanceSensorResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateDistanceSensorResponse::SetRateDistanceSensorResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateDistanceSensorResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateDistanceSensorResponse::SetRateDistanceSensorResponse(
    ::google::protobuf::Arena* arena,
    const SetRateDistanceSensorResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateDistanceSensorResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateDistanceSensorResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateDistanceSensorResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateDistanceSensorResponse::~SetRateDistanceSensorResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateDistanceSensorResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateDistanceSensorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateDistanceSensorResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateDistanceSensorResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateDistanceSensorResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateDistanceSensorResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateDistanceSensorResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateDistanceSensorResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateDistanceSensorResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  return target;
}

::size_t SetRateDistanceSensorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateDistanceSensorResponse::_class_data_ = {
    SetRateDistanceSensorResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateDistanceSensorResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateDistanceSensorResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateDistanceSensorResponse*>(&to_msg);
  auto& from = static_cast<const SetRateDistanceSensorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateDistanceSensorResponse::CopyFrom(const SetRateDistanceSensorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateDistanceSensorResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateDistanceSensorResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateDistanceSensorResponse::InternalSwap(SetRateDistanceSensorResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateDistanceSensorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[118]);
}
// ===================================================================

class GetGpsGlobalOriginRequest::_Internal {
 public:
};

GetGpsGlobalOriginRequest::GetGpsGlobalOriginRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
}
GetGpsGlobalOriginRequest::GetGpsGlobalOriginRequest(
    ::google::protobuf::Arena* arena,
    const GetGpsGlobalOriginRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  GetGpsGlobalOriginRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
}









::google::protobuf::Metadata GetGpsGlobalOriginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[119]);
}
// ===================================================================

class GetGpsGlobalOriginResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetGpsGlobalOriginResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetGpsGlobalOriginResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const GetGpsGlobalOriginResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mavsdk::rpc::telemetry::GpsGlobalOrigin& gps_global_origin(const GetGpsGlobalOriginResponse* msg);
  static void set_has_gps_global_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& GetGpsGlobalOriginResponse::_Internal::telemetry_result(const GetGpsGlobalOriginResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
const ::mavsdk::rpc::telemetry::GpsGlobalOrigin& GetGpsGlobalOriginResponse::_Internal::gps_global_origin(const GetGpsGlobalOriginResponse* msg) {
  return *msg->_impl_.gps_global_origin_;
}
GetGpsGlobalOriginResponse::GetGpsGlobalOriginResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetGpsGlobalOriginResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetGpsGlobalOriginResponse::GetGpsGlobalOriginResponse(
    ::google::protobuf::Arena* arena,
    const GetGpsGlobalOriginResponse& from)
    : ::google::protobuf::Message(arena) {
  GetGpsGlobalOriginResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;
  _impl_.gps_global_origin_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::GpsGlobalOrigin>(arena, *from._impl_.gps_global_origin_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetGpsGlobalOriginResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetGpsGlobalOriginResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, telemetry_result_),
           0,
           offsetof(Impl_, gps_global_origin_) -
               offsetof(Impl_, telemetry_result_) +
               sizeof(Impl_::gps_global_origin_));
}
GetGpsGlobalOriginResponse::~GetGpsGlobalOriginResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetGpsGlobalOriginResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  delete _impl_.gps_global_origin_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetGpsGlobalOriginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
      _impl_.telemetry_result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.gps_global_origin_ != nullptr);
      _impl_.gps_global_origin_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetGpsGlobalOriginResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GetGpsGlobalOriginResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetGpsGlobalOriginResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetGpsGlobalOriginResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.GpsGlobalOrigin gps_global_origin = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetGpsGlobalOriginResponse, _impl_.gps_global_origin_)}},
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetGpsGlobalOriginResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(GetGpsGlobalOriginResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry.GpsGlobalOrigin gps_global_origin = 2;
    {PROTOBUF_FIELD_OFFSET(GetGpsGlobalOriginResponse, _impl_.gps_global_origin_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::GpsGlobalOrigin>()},
  }}, {{
  }},
};

::uint8_t* GetGpsGlobalOriginResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.telemetry.GpsGlobalOrigin gps_global_origin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::gps_global_origin(this),
        _Internal::gps_global_origin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  return target;
}

::size_t GetGpsGlobalOriginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
    }

    // .mavsdk.rpc.telemetry.GpsGlobalOrigin gps_global_origin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gps_global_origin_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetGpsGlobalOriginResponse::_class_data_ = {
    GetGpsGlobalOriginResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetGpsGlobalOriginResponse::GetClassData() const {
  return &_class_data_;
}

void GetGpsGlobalOriginResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetGpsGlobalOriginResponse*>(&to_msg);
  auto& from = static_cast<const GetGpsGlobalOriginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
          from._internal_telemetry_result());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_gps_global_origin()->::mavsdk::rpc::telemetry::GpsGlobalOrigin::MergeFrom(
          from._internal_gps_global_origin());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetGpsGlobalOriginResponse::CopyFrom(const GetGpsGlobalOriginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetGpsGlobalOriginResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetGpsGlobalOriginResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetGpsGlobalOriginResponse::InternalSwap(GetGpsGlobalOriginResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetGpsGlobalOriginResponse, _impl_.gps_global_origin_)
      + sizeof(GetGpsGlobalOriginResponse::_impl_.gps_global_origin_)
      - PROTOBUF_FIELD_OFFSET(GetGpsGlobalOriginResponse, _impl_.telemetry_result_)>(
          reinterpret_cast<char*>(&_impl_.telemetry_result_),
          reinterpret_cast<char*>(&other->_impl_.telemetry_result_));
}

::google::protobuf::Metadata GetGpsGlobalOriginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[120]);
}
// ===================================================================

class SetRateAltitudeRequest::_Internal {
 public:
};

SetRateAltitudeRequest::SetRateAltitudeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAltitudeRequest)
}
SetRateAltitudeRequest::SetRateAltitudeRequest(
    ::google::protobuf::Arena* arena, const SetRateAltitudeRequest& from)
    : SetRateAltitudeRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetRateAltitudeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateAltitudeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rate_hz_ = {};
}
SetRateAltitudeRequest::~SetRateAltitudeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAltitudeRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateAltitudeRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateAltitudeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAltitudeRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_hz_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateAltitudeRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetRateAltitudeRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetRateAltitudeRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rate_hz = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SetRateAltitudeRequest, _impl_.rate_hz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double rate_hz = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateAltitudeRequest, _impl_.rate_hz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetRateAltitudeRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAltitudeRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAltitudeRequest)
  return target;
}

::size_t SetRateAltitudeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAltitudeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = this->_internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateAltitudeRequest::_class_data_ = {
    SetRateAltitudeRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateAltitudeRequest::GetClassData() const {
  return &_class_data_;
}

void SetRateAltitudeRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateAltitudeRequest*>(&to_msg);
  auto& from = static_cast<const SetRateAltitudeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAltitudeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rate_hz = from._internal_rate_hz();
  ::uint64_t raw_rate_hz;
  memcpy(&raw_rate_hz, &tmp_rate_hz, sizeof(tmp_rate_hz));
  if (raw_rate_hz != 0) {
    _this->_internal_set_rate_hz(from._internal_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateAltitudeRequest::CopyFrom(const SetRateAltitudeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAltitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateAltitudeRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateAltitudeRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateAltitudeRequest::InternalSwap(SetRateAltitudeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_hz_, other->_impl_.rate_hz_);
}

::google::protobuf::Metadata SetRateAltitudeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[121]);
}
// ===================================================================

class SetRateAltitudeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRateAltitudeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRateAltitudeResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateAltitudeResponse* msg);
  static void set_has_telemetry_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::TelemetryResult& SetRateAltitudeResponse::_Internal::telemetry_result(const SetRateAltitudeResponse* msg) {
  return *msg->_impl_.telemetry_result_;
}
SetRateAltitudeResponse::SetRateAltitudeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAltitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateAltitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRateAltitudeResponse::SetRateAltitudeResponse(
    ::google::protobuf::Arena* arena,
    const SetRateAltitudeResponse& from)
    : ::google::protobuf::Message(arena) {
  SetRateAltitudeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_result_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::TelemetryResult>(arena, *from._impl_.telemetry_result_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAltitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetRateAltitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRateAltitudeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_result_ = {};
}
SetRateAltitudeResponse::~SetRateAltitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAltitudeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetRateAltitudeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.telemetry_result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetRateAltitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAltitudeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_result_ != nullptr);
    _impl_.telemetry_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetRateAltitudeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRateAltitudeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRateAltitudeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetRateAltitudeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRateAltitudeResponse, _impl_.telemetry_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
    {PROTOBUF_FIELD_OFFSET(SetRateAltitudeResponse, _impl_.telemetry_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::TelemetryResult>()},
  }}, {{
  }},
};

::uint8_t* SetRateAltitudeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAltitudeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::telemetry_result(this),
        _Internal::telemetry_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAltitudeResponse)
  return target;
}

::size_t SetRateAltitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAltitudeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.telemetry_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetRateAltitudeResponse::_class_data_ = {
    SetRateAltitudeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetRateAltitudeResponse::GetClassData() const {
  return &_class_data_;
}

void SetRateAltitudeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetRateAltitudeResponse*>(&to_msg);
  auto& from = static_cast<const SetRateAltitudeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAltitudeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(
        from._internal_telemetry_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRateAltitudeResponse::CopyFrom(const SetRateAltitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAltitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetRateAltitudeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetRateAltitudeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetRateAltitudeResponse::InternalSwap(SetRateAltitudeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_result_, other->_impl_.telemetry_result_);
}

::google::protobuf::Metadata SetRateAltitudeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[122]);
}
// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Position)
}
Position::Position(
    ::google::protobuf::Arena* arena, const Position& from)
    : Position(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Position::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Position::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_deg_),
           0,
           offsetof(Impl_, relative_altitude_m_) -
               offsetof(Impl_, latitude_deg_) +
               sizeof(Impl_::relative_altitude_m_));
}
Position::~Position() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Position)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Position::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Position)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.relative_altitude_m_) -
      reinterpret_cast<char*>(&_impl_.latitude_deg_)) + sizeof(_impl_.relative_altitude_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Position::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Position::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Position_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.relative_altitude_m_)}},
    // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.latitude_deg_)}},
    // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.longitude_deg_)}},
    // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.absolute_altitude_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.latitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.longitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.absolute_altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.relative_altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Position::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Position)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_absolute_altitude_m(), target);
  }

  // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_relative_altitude_m = this->_internal_relative_altitude_m();
  ::uint32_t raw_relative_altitude_m;
  memcpy(&raw_relative_altitude_m, &tmp_relative_altitude_m, sizeof(tmp_relative_altitude_m));
  if (raw_relative_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_relative_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Position)
  return target;
}

::size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Position)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    total_size += 9;
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    total_size += 9;
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    total_size += 5;
  }

  // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_relative_altitude_m = this->_internal_relative_altitude_m();
  ::uint32_t raw_relative_altitude_m;
  memcpy(&raw_relative_altitude_m, &tmp_relative_altitude_m, sizeof(tmp_relative_altitude_m));
  if (raw_relative_altitude_m != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Position::_class_data_ = {
    Position::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Position::GetClassData() const {
  return &_class_data_;
}

void Position::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Position)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = from._internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    _this->_internal_set_latitude_deg(from._internal_latitude_deg());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = from._internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    _this->_internal_set_longitude_deg(from._internal_longitude_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = from._internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    _this->_internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_relative_altitude_m = from._internal_relative_altitude_m();
  ::uint32_t raw_relative_altitude_m;
  memcpy(&raw_relative_altitude_m, &tmp_relative_altitude_m, sizeof(tmp_relative_altitude_m));
  if (raw_relative_altitude_m != 0) {
    _this->_internal_set_relative_altitude_m(from._internal_relative_altitude_m());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Position::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Position::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Position::InternalSwap(Position* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.relative_altitude_m_)
      + sizeof(Position::_impl_.relative_altitude_m_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.latitude_deg_)>(
          reinterpret_cast<char*>(&_impl_.latitude_deg_),
          reinterpret_cast<char*>(&other->_impl_.latitude_deg_));
}

::google::protobuf::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[123]);
}
// ===================================================================

class Heading::_Internal {
 public:
};

Heading::Heading(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Heading)
}
Heading::Heading(
    ::google::protobuf::Arena* arena, const Heading& from)
    : Heading(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Heading::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Heading::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.heading_deg_ = {};
}
Heading::~Heading() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Heading)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Heading::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Heading::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Heading)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.heading_deg_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Heading::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Heading::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Heading_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Heading, _impl_.heading_deg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Heading, _impl_.heading_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Heading::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Heading)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_heading_deg = this->_internal_heading_deg();
  ::uint64_t raw_heading_deg;
  memcpy(&raw_heading_deg, &tmp_heading_deg, sizeof(tmp_heading_deg));
  if (raw_heading_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_heading_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Heading)
  return target;
}

::size_t Heading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Heading)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_heading_deg = this->_internal_heading_deg();
  ::uint64_t raw_heading_deg;
  memcpy(&raw_heading_deg, &tmp_heading_deg, sizeof(tmp_heading_deg));
  if (raw_heading_deg != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Heading::_class_data_ = {
    Heading::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Heading::GetClassData() const {
  return &_class_data_;
}

void Heading::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Heading*>(&to_msg);
  auto& from = static_cast<const Heading&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Heading)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_heading_deg = from._internal_heading_deg();
  ::uint64_t raw_heading_deg;
  memcpy(&raw_heading_deg, &tmp_heading_deg, sizeof(tmp_heading_deg));
  if (raw_heading_deg != 0) {
    _this->_internal_set_heading_deg(from._internal_heading_deg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Heading::CopyFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Heading::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Heading::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Heading::InternalSwap(Heading* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.heading_deg_, other->_impl_.heading_deg_);
}

::google::protobuf::Metadata Heading::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[124]);
}
// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Quaternion)
}
Quaternion::Quaternion(
    ::google::protobuf::Arena* arena, const Quaternion& from)
    : Quaternion(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Quaternion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Quaternion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, w_),
           0,
           offsetof(Impl_, timestamp_us_) -
               offsetof(Impl_, w_) +
               sizeof(Impl_::timestamp_us_));
}
Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Quaternion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Quaternion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Quaternion)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.w_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_us_) -
      reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.timestamp_us_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> Quaternion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Quaternion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)}},
    // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_)}},
    // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_)}},
    // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_)}},
    // uint64 timestamp_us = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Quaternion, _impl_.timestamp_us_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.timestamp_us_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint64 timestamp_us = 5;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.timestamp_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Quaternion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Quaternion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_w(), target);
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_x(), target);
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_y(), target);
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_z(), target);
  }

  // uint64 timestamp_us = 5;
  if (this->_internal_timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Quaternion)
  return target;
}

::size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Quaternion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 5;
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  // uint64 timestamp_us = 5;
  if (this->_internal_timestamp_us() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp_us());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Quaternion::_class_data_ = {
    Quaternion::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Quaternion::GetClassData() const {
  return &_class_data_;
}

void Quaternion::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Quaternion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  if (from._internal_timestamp_us() != 0) {
    _this->_internal_set_timestamp_us(from._internal_timestamp_us());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Quaternion::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Quaternion::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Quaternion::InternalSwap(Quaternion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.timestamp_us_)
      + sizeof(Quaternion::_impl_.timestamp_us_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)>(
          reinterpret_cast<char*>(&_impl_.w_),
          reinterpret_cast<char*>(&other->_impl_.w_));
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[125]);
}
// ===================================================================

class EulerAngle::_Internal {
 public:
};

EulerAngle::EulerAngle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.EulerAngle)
}
EulerAngle::EulerAngle(
    ::google::protobuf::Arena* arena, const EulerAngle& from)
    : EulerAngle(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EulerAngle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EulerAngle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roll_deg_),
           0,
           offsetof(Impl_, yaw_deg_) -
               offsetof(Impl_, roll_deg_) +
               sizeof(Impl_::yaw_deg_));
}
EulerAngle::~EulerAngle() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.EulerAngle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EulerAngle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EulerAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.EulerAngle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_deg_) -
      reinterpret_cast<char*>(&_impl_.roll_deg_)) + sizeof(_impl_.yaw_deg_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EulerAngle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> EulerAngle::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EulerAngle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint64 timestamp_us = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EulerAngle, _impl_.timestamp_us_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.timestamp_us_)}},
    // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.roll_deg_)}},
    // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.pitch_deg_)}},
    // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.yaw_deg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.roll_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.pitch_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.yaw_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint64 timestamp_us = 4;
    {PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.timestamp_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EulerAngle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.EulerAngle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_deg = this->_internal_roll_deg();
  ::uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_roll_deg(), target);
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_yaw_deg(), target);
  }

  // uint64 timestamp_us = 4;
  if (this->_internal_timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.EulerAngle)
  return target;
}

::size_t EulerAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.EulerAngle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_deg = this->_internal_roll_deg();
  ::uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    total_size += 5;
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = this->_internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    total_size += 5;
  }

  // uint64 timestamp_us = 4;
  if (this->_internal_timestamp_us() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp_us());
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EulerAngle::_class_data_ = {
    EulerAngle::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EulerAngle::GetClassData() const {
  return &_class_data_;
}

void EulerAngle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EulerAngle*>(&to_msg);
  auto& from = static_cast<const EulerAngle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.EulerAngle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_deg = from._internal_roll_deg();
  ::uint32_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    _this->_internal_set_roll_deg(from._internal_roll_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_deg = from._internal_pitch_deg();
  ::uint32_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    _this->_internal_set_pitch_deg(from._internal_pitch_deg());
  }
  if (from._internal_timestamp_us() != 0) {
    _this->_internal_set_timestamp_us(from._internal_timestamp_us());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = from._internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    _this->_internal_set_yaw_deg(from._internal_yaw_deg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EulerAngle::CopyFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EulerAngle::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EulerAngle::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EulerAngle::InternalSwap(EulerAngle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.yaw_deg_)
      + sizeof(EulerAngle::_impl_.yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.roll_deg_)>(
          reinterpret_cast<char*>(&_impl_.roll_deg_),
          reinterpret_cast<char*>(&other->_impl_.roll_deg_));
}

::google::protobuf::Metadata EulerAngle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[126]);
}
// ===================================================================

class AngularVelocityBody::_Internal {
 public:
};

AngularVelocityBody::AngularVelocityBody(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AngularVelocityBody)
}
AngularVelocityBody::AngularVelocityBody(
    ::google::protobuf::Arena* arena, const AngularVelocityBody& from)
    : AngularVelocityBody(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AngularVelocityBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AngularVelocityBody::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roll_rad_s_),
           0,
           offsetof(Impl_, yaw_rad_s_) -
               offsetof(Impl_, roll_rad_s_) +
               sizeof(Impl_::yaw_rad_s_));
}
AngularVelocityBody::~AngularVelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AngularVelocityBody)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AngularVelocityBody::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AngularVelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_rad_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_rad_s_) -
      reinterpret_cast<char*>(&_impl_.roll_rad_s_)) + sizeof(_impl_.yaw_rad_s_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AngularVelocityBody::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> AngularVelocityBody::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AngularVelocityBody_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.roll_rad_s_)}},
    // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.pitch_rad_s_)}},
    // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.yaw_rad_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.roll_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.pitch_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.yaw_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AngularVelocityBody::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_rad_s = this->_internal_roll_rad_s();
  ::uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_roll_rad_s(), target);
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rad_s = this->_internal_pitch_rad_s();
  ::uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_pitch_rad_s(), target);
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rad_s = this->_internal_yaw_rad_s();
  ::uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_yaw_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AngularVelocityBody)
  return target;
}

::size_t AngularVelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_rad_s = this->_internal_roll_rad_s();
  ::uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    total_size += 5;
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rad_s = this->_internal_pitch_rad_s();
  ::uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    total_size += 5;
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rad_s = this->_internal_yaw_rad_s();
  ::uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AngularVelocityBody::_class_data_ = {
    AngularVelocityBody::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AngularVelocityBody::GetClassData() const {
  return &_class_data_;
}

void AngularVelocityBody::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AngularVelocityBody*>(&to_msg);
  auto& from = static_cast<const AngularVelocityBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_rad_s = from._internal_roll_rad_s();
  ::uint32_t raw_roll_rad_s;
  memcpy(&raw_roll_rad_s, &tmp_roll_rad_s, sizeof(tmp_roll_rad_s));
  if (raw_roll_rad_s != 0) {
    _this->_internal_set_roll_rad_s(from._internal_roll_rad_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rad_s = from._internal_pitch_rad_s();
  ::uint32_t raw_pitch_rad_s;
  memcpy(&raw_pitch_rad_s, &tmp_pitch_rad_s, sizeof(tmp_pitch_rad_s));
  if (raw_pitch_rad_s != 0) {
    _this->_internal_set_pitch_rad_s(from._internal_pitch_rad_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rad_s = from._internal_yaw_rad_s();
  ::uint32_t raw_yaw_rad_s;
  memcpy(&raw_yaw_rad_s, &tmp_yaw_rad_s, sizeof(tmp_yaw_rad_s));
  if (raw_yaw_rad_s != 0) {
    _this->_internal_set_yaw_rad_s(from._internal_yaw_rad_s());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AngularVelocityBody::CopyFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AngularVelocityBody::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AngularVelocityBody::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AngularVelocityBody::InternalSwap(AngularVelocityBody* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.yaw_rad_s_)
      + sizeof(AngularVelocityBody::_impl_.yaw_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.roll_rad_s_)>(
          reinterpret_cast<char*>(&_impl_.roll_rad_s_),
          reinterpret_cast<char*>(&other->_impl_.roll_rad_s_));
}

::google::protobuf::Metadata AngularVelocityBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[127]);
}
// ===================================================================

class GpsInfo::_Internal {
 public:
};

GpsInfo::GpsInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GpsInfo)
}
GpsInfo::GpsInfo(
    ::google::protobuf::Arena* arena, const GpsInfo& from)
    : GpsInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GpsInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GpsInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, num_satellites_),
           0,
           offsetof(Impl_, fix_type_) -
               offsetof(Impl_, num_satellites_) +
               sizeof(Impl_::fix_type_));
}
GpsInfo::~GpsInfo() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GpsInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GpsInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GpsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GpsInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_satellites_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fix_type_) -
      reinterpret_cast<char*>(&_impl_.num_satellites_)) + sizeof(_impl_.fix_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GpsInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> GpsInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GpsInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.FixType fix_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GpsInfo, _impl_.fix_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.fix_type_)}},
    // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GpsInfo, _impl_.num_satellites_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.num_satellites_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
    {PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.num_satellites_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .mavsdk.rpc.telemetry.FixType fix_type = 2;
    {PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.fix_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GpsInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GpsInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_num_satellites() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_num_satellites(), target);
  }

  // .mavsdk.rpc.telemetry.FixType fix_type = 2;
  if (this->_internal_fix_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_fix_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GpsInfo)
  return target;
}

::size_t GpsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GpsInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_num_satellites() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num_satellites());
  }

  // .mavsdk.rpc.telemetry.FixType fix_type = 2;
  if (this->_internal_fix_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_fix_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GpsInfo::_class_data_ = {
    GpsInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GpsInfo::GetClassData() const {
  return &_class_data_;
}

void GpsInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GpsInfo*>(&to_msg);
  auto& from = static_cast<const GpsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GpsInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_satellites() != 0) {
    _this->_internal_set_num_satellites(from._internal_num_satellites());
  }
  if (from._internal_fix_type() != 0) {
    _this->_internal_set_fix_type(from._internal_fix_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GpsInfo::CopyFrom(const GpsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GpsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GpsInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GpsInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GpsInfo::InternalSwap(GpsInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.fix_type_)
      + sizeof(GpsInfo::_impl_.fix_type_)
      - PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.num_satellites_)>(
          reinterpret_cast<char*>(&_impl_.num_satellites_),
          reinterpret_cast<char*>(&other->_impl_.num_satellites_));
}

::google::protobuf::Metadata GpsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[128]);
}
// ===================================================================

class RawGps::_Internal {
 public:
};

RawGps::RawGps(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.RawGps)
}
RawGps::RawGps(
    ::google::protobuf::Arena* arena, const RawGps& from)
    : RawGps(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RawGps::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RawGps::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_us_),
           0,
           offsetof(Impl_, yaw_deg_) -
               offsetof(Impl_, timestamp_us_) +
               sizeof(Impl_::yaw_deg_));
}
RawGps::~RawGps() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RawGps)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RawGps::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RawGps::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RawGps)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_us_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_deg_) -
      reinterpret_cast<char*>(&_impl_.timestamp_us_)) + sizeof(_impl_.yaw_deg_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RawGps::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 0, 0, 2> RawGps::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RawGps_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 timestamp_us = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RawGps, _impl_.timestamp_us_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.timestamp_us_)}},
    // double latitude_deg = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.latitude_deg_)}},
    // double longitude_deg = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.longitude_deg_)}},
    // float absolute_altitude_m = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.absolute_altitude_m_)}},
    // float hdop = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.hdop_)}},
    // float vdop = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.vdop_)}},
    // float velocity_m_s = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.velocity_m_s_)}},
    // float cog_deg = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.cog_deg_)}},
    // float altitude_ellipsoid_m = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.altitude_ellipsoid_m_)}},
    // float horizontal_uncertainty_m = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.horizontal_uncertainty_m_)}},
    // float vertical_uncertainty_m = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.vertical_uncertainty_m_)}},
    // float velocity_uncertainty_m_s = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.velocity_uncertainty_m_s_)}},
    // float heading_uncertainty_deg = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.heading_uncertainty_deg_)}},
    // float yaw_deg = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.yaw_deg_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 timestamp_us = 1;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.timestamp_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // double latitude_deg = 2;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.latitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude_deg = 3;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.longitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float absolute_altitude_m = 4;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.absolute_altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float hdop = 5;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.hdop_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float vdop = 6;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.vdop_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float velocity_m_s = 7;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.velocity_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float cog_deg = 8;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.cog_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float altitude_ellipsoid_m = 9;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.altitude_ellipsoid_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float horizontal_uncertainty_m = 10;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.horizontal_uncertainty_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float vertical_uncertainty_m = 11;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.vertical_uncertainty_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float velocity_uncertainty_m_s = 12;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.velocity_uncertainty_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float heading_uncertainty_deg = 13;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.heading_uncertainty_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_deg = 14;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.yaw_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RawGps::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RawGps)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->_internal_timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_timestamp_us(), target);
  }

  // double latitude_deg = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_absolute_altitude_m(), target);
  }

  // float hdop = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_hdop = this->_internal_hdop();
  ::uint32_t raw_hdop;
  memcpy(&raw_hdop, &tmp_hdop, sizeof(tmp_hdop));
  if (raw_hdop != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_hdop(), target);
  }

  // float vdop = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vdop = this->_internal_vdop();
  ::uint32_t raw_vdop;
  memcpy(&raw_vdop, &tmp_vdop, sizeof(tmp_vdop));
  if (raw_vdop != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_vdop(), target);
  }

  // float velocity_m_s = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_velocity_m_s = this->_internal_velocity_m_s();
  ::uint32_t raw_velocity_m_s;
  memcpy(&raw_velocity_m_s, &tmp_velocity_m_s, sizeof(tmp_velocity_m_s));
  if (raw_velocity_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_velocity_m_s(), target);
  }

  // float cog_deg = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cog_deg = this->_internal_cog_deg();
  ::uint32_t raw_cog_deg;
  memcpy(&raw_cog_deg, &tmp_cog_deg, sizeof(tmp_cog_deg));
  if (raw_cog_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_cog_deg(), target);
  }

  // float altitude_ellipsoid_m = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_ellipsoid_m = this->_internal_altitude_ellipsoid_m();
  ::uint32_t raw_altitude_ellipsoid_m;
  memcpy(&raw_altitude_ellipsoid_m, &tmp_altitude_ellipsoid_m, sizeof(tmp_altitude_ellipsoid_m));
  if (raw_altitude_ellipsoid_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_altitude_ellipsoid_m(), target);
  }

  // float horizontal_uncertainty_m = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontal_uncertainty_m = this->_internal_horizontal_uncertainty_m();
  ::uint32_t raw_horizontal_uncertainty_m;
  memcpy(&raw_horizontal_uncertainty_m, &tmp_horizontal_uncertainty_m, sizeof(tmp_horizontal_uncertainty_m));
  if (raw_horizontal_uncertainty_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_horizontal_uncertainty_m(), target);
  }

  // float vertical_uncertainty_m = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vertical_uncertainty_m = this->_internal_vertical_uncertainty_m();
  ::uint32_t raw_vertical_uncertainty_m;
  memcpy(&raw_vertical_uncertainty_m, &tmp_vertical_uncertainty_m, sizeof(tmp_vertical_uncertainty_m));
  if (raw_vertical_uncertainty_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_vertical_uncertainty_m(), target);
  }

  // float velocity_uncertainty_m_s = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_velocity_uncertainty_m_s = this->_internal_velocity_uncertainty_m_s();
  ::uint32_t raw_velocity_uncertainty_m_s;
  memcpy(&raw_velocity_uncertainty_m_s, &tmp_velocity_uncertainty_m_s, sizeof(tmp_velocity_uncertainty_m_s));
  if (raw_velocity_uncertainty_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_velocity_uncertainty_m_s(), target);
  }

  // float heading_uncertainty_deg = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_heading_uncertainty_deg = this->_internal_heading_uncertainty_deg();
  ::uint32_t raw_heading_uncertainty_deg;
  memcpy(&raw_heading_uncertainty_deg, &tmp_heading_uncertainty_deg, sizeof(tmp_heading_uncertainty_deg));
  if (raw_heading_uncertainty_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        13, this->_internal_heading_uncertainty_deg(), target);
  }

  // float yaw_deg = 14;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        14, this->_internal_yaw_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RawGps)
  return target;
}

::size_t RawGps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RawGps)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->_internal_timestamp_us() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp_us());
  }

  // double latitude_deg = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    total_size += 9;
  }

  // double longitude_deg = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    total_size += 9;
  }

  // float absolute_altitude_m = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    total_size += 5;
  }

  // float hdop = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_hdop = this->_internal_hdop();
  ::uint32_t raw_hdop;
  memcpy(&raw_hdop, &tmp_hdop, sizeof(tmp_hdop));
  if (raw_hdop != 0) {
    total_size += 5;
  }

  // float vdop = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vdop = this->_internal_vdop();
  ::uint32_t raw_vdop;
  memcpy(&raw_vdop, &tmp_vdop, sizeof(tmp_vdop));
  if (raw_vdop != 0) {
    total_size += 5;
  }

  // float velocity_m_s = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_velocity_m_s = this->_internal_velocity_m_s();
  ::uint32_t raw_velocity_m_s;
  memcpy(&raw_velocity_m_s, &tmp_velocity_m_s, sizeof(tmp_velocity_m_s));
  if (raw_velocity_m_s != 0) {
    total_size += 5;
  }

  // float cog_deg = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cog_deg = this->_internal_cog_deg();
  ::uint32_t raw_cog_deg;
  memcpy(&raw_cog_deg, &tmp_cog_deg, sizeof(tmp_cog_deg));
  if (raw_cog_deg != 0) {
    total_size += 5;
  }

  // float altitude_ellipsoid_m = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_ellipsoid_m = this->_internal_altitude_ellipsoid_m();
  ::uint32_t raw_altitude_ellipsoid_m;
  memcpy(&raw_altitude_ellipsoid_m, &tmp_altitude_ellipsoid_m, sizeof(tmp_altitude_ellipsoid_m));
  if (raw_altitude_ellipsoid_m != 0) {
    total_size += 5;
  }

  // float horizontal_uncertainty_m = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontal_uncertainty_m = this->_internal_horizontal_uncertainty_m();
  ::uint32_t raw_horizontal_uncertainty_m;
  memcpy(&raw_horizontal_uncertainty_m, &tmp_horizontal_uncertainty_m, sizeof(tmp_horizontal_uncertainty_m));
  if (raw_horizontal_uncertainty_m != 0) {
    total_size += 5;
  }

  // float vertical_uncertainty_m = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vertical_uncertainty_m = this->_internal_vertical_uncertainty_m();
  ::uint32_t raw_vertical_uncertainty_m;
  memcpy(&raw_vertical_uncertainty_m, &tmp_vertical_uncertainty_m, sizeof(tmp_vertical_uncertainty_m));
  if (raw_vertical_uncertainty_m != 0) {
    total_size += 5;
  }

  // float velocity_uncertainty_m_s = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_velocity_uncertainty_m_s = this->_internal_velocity_uncertainty_m_s();
  ::uint32_t raw_velocity_uncertainty_m_s;
  memcpy(&raw_velocity_uncertainty_m_s, &tmp_velocity_uncertainty_m_s, sizeof(tmp_velocity_uncertainty_m_s));
  if (raw_velocity_uncertainty_m_s != 0) {
    total_size += 5;
  }

  // float heading_uncertainty_deg = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_heading_uncertainty_deg = this->_internal_heading_uncertainty_deg();
  ::uint32_t raw_heading_uncertainty_deg;
  memcpy(&raw_heading_uncertainty_deg, &tmp_heading_uncertainty_deg, sizeof(tmp_heading_uncertainty_deg));
  if (raw_heading_uncertainty_deg != 0) {
    total_size += 5;
  }

  // float yaw_deg = 14;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RawGps::_class_data_ = {
    RawGps::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RawGps::GetClassData() const {
  return &_class_data_;
}

void RawGps::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RawGps*>(&to_msg);
  auto& from = static_cast<const RawGps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RawGps)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp_us() != 0) {
    _this->_internal_set_timestamp_us(from._internal_timestamp_us());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = from._internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    _this->_internal_set_latitude_deg(from._internal_latitude_deg());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = from._internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    _this->_internal_set_longitude_deg(from._internal_longitude_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = from._internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    _this->_internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_hdop = from._internal_hdop();
  ::uint32_t raw_hdop;
  memcpy(&raw_hdop, &tmp_hdop, sizeof(tmp_hdop));
  if (raw_hdop != 0) {
    _this->_internal_set_hdop(from._internal_hdop());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vdop = from._internal_vdop();
  ::uint32_t raw_vdop;
  memcpy(&raw_vdop, &tmp_vdop, sizeof(tmp_vdop));
  if (raw_vdop != 0) {
    _this->_internal_set_vdop(from._internal_vdop());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_velocity_m_s = from._internal_velocity_m_s();
  ::uint32_t raw_velocity_m_s;
  memcpy(&raw_velocity_m_s, &tmp_velocity_m_s, sizeof(tmp_velocity_m_s));
  if (raw_velocity_m_s != 0) {
    _this->_internal_set_velocity_m_s(from._internal_velocity_m_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cog_deg = from._internal_cog_deg();
  ::uint32_t raw_cog_deg;
  memcpy(&raw_cog_deg, &tmp_cog_deg, sizeof(tmp_cog_deg));
  if (raw_cog_deg != 0) {
    _this->_internal_set_cog_deg(from._internal_cog_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_ellipsoid_m = from._internal_altitude_ellipsoid_m();
  ::uint32_t raw_altitude_ellipsoid_m;
  memcpy(&raw_altitude_ellipsoid_m, &tmp_altitude_ellipsoid_m, sizeof(tmp_altitude_ellipsoid_m));
  if (raw_altitude_ellipsoid_m != 0) {
    _this->_internal_set_altitude_ellipsoid_m(from._internal_altitude_ellipsoid_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontal_uncertainty_m = from._internal_horizontal_uncertainty_m();
  ::uint32_t raw_horizontal_uncertainty_m;
  memcpy(&raw_horizontal_uncertainty_m, &tmp_horizontal_uncertainty_m, sizeof(tmp_horizontal_uncertainty_m));
  if (raw_horizontal_uncertainty_m != 0) {
    _this->_internal_set_horizontal_uncertainty_m(from._internal_horizontal_uncertainty_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vertical_uncertainty_m = from._internal_vertical_uncertainty_m();
  ::uint32_t raw_vertical_uncertainty_m;
  memcpy(&raw_vertical_uncertainty_m, &tmp_vertical_uncertainty_m, sizeof(tmp_vertical_uncertainty_m));
  if (raw_vertical_uncertainty_m != 0) {
    _this->_internal_set_vertical_uncertainty_m(from._internal_vertical_uncertainty_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_velocity_uncertainty_m_s = from._internal_velocity_uncertainty_m_s();
  ::uint32_t raw_velocity_uncertainty_m_s;
  memcpy(&raw_velocity_uncertainty_m_s, &tmp_velocity_uncertainty_m_s, sizeof(tmp_velocity_uncertainty_m_s));
  if (raw_velocity_uncertainty_m_s != 0) {
    _this->_internal_set_velocity_uncertainty_m_s(from._internal_velocity_uncertainty_m_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_heading_uncertainty_deg = from._internal_heading_uncertainty_deg();
  ::uint32_t raw_heading_uncertainty_deg;
  memcpy(&raw_heading_uncertainty_deg, &tmp_heading_uncertainty_deg, sizeof(tmp_heading_uncertainty_deg));
  if (raw_heading_uncertainty_deg != 0) {
    _this->_internal_set_heading_uncertainty_deg(from._internal_heading_uncertainty_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_deg = from._internal_yaw_deg();
  ::uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    _this->_internal_set_yaw_deg(from._internal_yaw_deg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RawGps::CopyFrom(const RawGps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RawGps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RawGps::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RawGps::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RawGps::InternalSwap(RawGps* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawGps, _impl_.yaw_deg_)
      + sizeof(RawGps::_impl_.yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(RawGps, _impl_.timestamp_us_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_us_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_us_));
}

::google::protobuf::Metadata RawGps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[129]);
}
// ===================================================================

class Battery::_Internal {
 public:
};

Battery::Battery(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Battery)
}
Battery::Battery(
    ::google::protobuf::Arena* arena, const Battery& from)
    : Battery(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Battery::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Battery::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, remaining_percent_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::remaining_percent_));
}
Battery::~Battery() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Battery)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Battery::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Battery)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.remaining_percent_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.remaining_percent_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Battery::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> Battery::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Battery_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 id = 1 [(.mavsdk.options.default_value) = "0"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Battery, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Battery, _impl_.id_)}},
    // float temperature_degc = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Battery, _impl_.temperature_degc_)}},
    // float voltage_v = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Battery, _impl_.voltage_v_)}},
    // float current_battery_a = 4 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Battery, _impl_.current_battery_a_)}},
    // float capacity_consumed_ah = 5 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Battery, _impl_.capacity_consumed_ah_)}},
    // float remaining_percent = 6 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Battery, _impl_.remaining_percent_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 id = 1 [(.mavsdk.options.default_value) = "0"];
    {PROTOBUF_FIELD_OFFSET(Battery, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // float temperature_degc = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Battery, _impl_.temperature_degc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float voltage_v = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Battery, _impl_.voltage_v_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float current_battery_a = 4 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Battery, _impl_.current_battery_a_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float capacity_consumed_ah = 5 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Battery, _impl_.capacity_consumed_ah_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float remaining_percent = 6 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Battery, _impl_.remaining_percent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Battery::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Battery)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 id = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // float temperature_degc = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature_degc = this->_internal_temperature_degc();
  ::uint32_t raw_temperature_degc;
  memcpy(&raw_temperature_degc, &tmp_temperature_degc, sizeof(tmp_temperature_degc));
  if (raw_temperature_degc != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_temperature_degc(), target);
  }

  // float voltage_v = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_voltage_v = this->_internal_voltage_v();
  ::uint32_t raw_voltage_v;
  memcpy(&raw_voltage_v, &tmp_voltage_v, sizeof(tmp_voltage_v));
  if (raw_voltage_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_voltage_v(), target);
  }

  // float current_battery_a = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_current_battery_a = this->_internal_current_battery_a();
  ::uint32_t raw_current_battery_a;
  memcpy(&raw_current_battery_a, &tmp_current_battery_a, sizeof(tmp_current_battery_a));
  if (raw_current_battery_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_current_battery_a(), target);
  }

  // float capacity_consumed_ah = 5 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity_consumed_ah = this->_internal_capacity_consumed_ah();
  ::uint32_t raw_capacity_consumed_ah;
  memcpy(&raw_capacity_consumed_ah, &tmp_capacity_consumed_ah, sizeof(tmp_capacity_consumed_ah));
  if (raw_capacity_consumed_ah != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_capacity_consumed_ah(), target);
  }

  // float remaining_percent = 6 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remaining_percent = this->_internal_remaining_percent();
  ::uint32_t raw_remaining_percent;
  memcpy(&raw_remaining_percent, &tmp_remaining_percent, sizeof(tmp_remaining_percent));
  if (raw_remaining_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_remaining_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Battery)
  return target;
}

::size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Battery)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // float temperature_degc = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature_degc = this->_internal_temperature_degc();
  ::uint32_t raw_temperature_degc;
  memcpy(&raw_temperature_degc, &tmp_temperature_degc, sizeof(tmp_temperature_degc));
  if (raw_temperature_degc != 0) {
    total_size += 5;
  }

  // float voltage_v = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_voltage_v = this->_internal_voltage_v();
  ::uint32_t raw_voltage_v;
  memcpy(&raw_voltage_v, &tmp_voltage_v, sizeof(tmp_voltage_v));
  if (raw_voltage_v != 0) {
    total_size += 5;
  }

  // float current_battery_a = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_current_battery_a = this->_internal_current_battery_a();
  ::uint32_t raw_current_battery_a;
  memcpy(&raw_current_battery_a, &tmp_current_battery_a, sizeof(tmp_current_battery_a));
  if (raw_current_battery_a != 0) {
    total_size += 5;
  }

  // float capacity_consumed_ah = 5 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity_consumed_ah = this->_internal_capacity_consumed_ah();
  ::uint32_t raw_capacity_consumed_ah;
  memcpy(&raw_capacity_consumed_ah, &tmp_capacity_consumed_ah, sizeof(tmp_capacity_consumed_ah));
  if (raw_capacity_consumed_ah != 0) {
    total_size += 5;
  }

  // float remaining_percent = 6 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remaining_percent = this->_internal_remaining_percent();
  ::uint32_t raw_remaining_percent;
  memcpy(&raw_remaining_percent, &tmp_remaining_percent, sizeof(tmp_remaining_percent));
  if (raw_remaining_percent != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Battery::_class_data_ = {
    Battery::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Battery::GetClassData() const {
  return &_class_data_;
}

void Battery::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Battery*>(&to_msg);
  auto& from = static_cast<const Battery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Battery)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature_degc = from._internal_temperature_degc();
  ::uint32_t raw_temperature_degc;
  memcpy(&raw_temperature_degc, &tmp_temperature_degc, sizeof(tmp_temperature_degc));
  if (raw_temperature_degc != 0) {
    _this->_internal_set_temperature_degc(from._internal_temperature_degc());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_voltage_v = from._internal_voltage_v();
  ::uint32_t raw_voltage_v;
  memcpy(&raw_voltage_v, &tmp_voltage_v, sizeof(tmp_voltage_v));
  if (raw_voltage_v != 0) {
    _this->_internal_set_voltage_v(from._internal_voltage_v());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_current_battery_a = from._internal_current_battery_a();
  ::uint32_t raw_current_battery_a;
  memcpy(&raw_current_battery_a, &tmp_current_battery_a, sizeof(tmp_current_battery_a));
  if (raw_current_battery_a != 0) {
    _this->_internal_set_current_battery_a(from._internal_current_battery_a());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity_consumed_ah = from._internal_capacity_consumed_ah();
  ::uint32_t raw_capacity_consumed_ah;
  memcpy(&raw_capacity_consumed_ah, &tmp_capacity_consumed_ah, sizeof(tmp_capacity_consumed_ah));
  if (raw_capacity_consumed_ah != 0) {
    _this->_internal_set_capacity_consumed_ah(from._internal_capacity_consumed_ah());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remaining_percent = from._internal_remaining_percent();
  ::uint32_t raw_remaining_percent;
  memcpy(&raw_remaining_percent, &tmp_remaining_percent, sizeof(tmp_remaining_percent));
  if (raw_remaining_percent != 0) {
    _this->_internal_set_remaining_percent(from._internal_remaining_percent());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Battery::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Battery::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Battery::InternalSwap(Battery* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Battery, _impl_.remaining_percent_)
      + sizeof(Battery::_impl_.remaining_percent_)
      - PROTOBUF_FIELD_OFFSET(Battery, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata Battery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[130]);
}
// ===================================================================

class Health::_Internal {
 public:
};

Health::Health(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Health)
}
Health::Health(
    ::google::protobuf::Arena* arena, const Health& from)
    : Health(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Health::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Health::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_gyrometer_calibration_ok_),
           0,
           offsetof(Impl_, is_armable_) -
               offsetof(Impl_, is_gyrometer_calibration_ok_) +
               sizeof(Impl_::is_armable_));
}
Health::~Health() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Health)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Health::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Health::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Health)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.is_gyrometer_calibration_ok_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_armable_) -
      reinterpret_cast<char*>(&_impl_.is_gyrometer_calibration_ok_)) + sizeof(_impl_.is_armable_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Health::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> Health::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967048,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Health_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool is_armable = 8 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Health, _impl_.is_armable_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Health, _impl_.is_armable_)}},
    // bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Health, _impl_.is_gyrometer_calibration_ok_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Health, _impl_.is_gyrometer_calibration_ok_)}},
    // bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Health, _impl_.is_accelerometer_calibration_ok_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Health, _impl_.is_accelerometer_calibration_ok_)}},
    // bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Health, _impl_.is_magnetometer_calibration_ok_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Health, _impl_.is_magnetometer_calibration_ok_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Health, _impl_.is_local_position_ok_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Health, _impl_.is_local_position_ok_)}},
    // bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Health, _impl_.is_global_position_ok_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Health, _impl_.is_global_position_ok_)}},
    // bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Health, _impl_.is_home_position_ok_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Health, _impl_.is_home_position_ok_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(Health, _impl_.is_gyrometer_calibration_ok_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(Health, _impl_.is_accelerometer_calibration_ok_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(Health, _impl_.is_magnetometer_calibration_ok_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(Health, _impl_.is_local_position_ok_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(Health, _impl_.is_global_position_ok_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(Health, _impl_.is_home_position_ok_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_armable = 8 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(Health, _impl_.is_armable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Health::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Health)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_gyrometer_calibration_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_gyrometer_calibration_ok(), target);
  }

  // bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_accelerometer_calibration_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_accelerometer_calibration_ok(), target);
  }

  // bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_magnetometer_calibration_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_magnetometer_calibration_ok(), target);
  }

  // bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_local_position_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_local_position_ok(), target);
  }

  // bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_global_position_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_is_global_position_ok(), target);
  }

  // bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_home_position_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_is_home_position_ok(), target);
  }

  // bool is_armable = 8 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_armable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_is_armable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Health)
  return target;
}

::size_t Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Health)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_gyrometer_calibration_ok() != 0) {
    total_size += 2;
  }

  // bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_accelerometer_calibration_ok() != 0) {
    total_size += 2;
  }

  // bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_magnetometer_calibration_ok() != 0) {
    total_size += 2;
  }

  // bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_local_position_ok() != 0) {
    total_size += 2;
  }

  // bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_global_position_ok() != 0) {
    total_size += 2;
  }

  // bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_home_position_ok() != 0) {
    total_size += 2;
  }

  // bool is_armable = 8 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_armable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Health::_class_data_ = {
    Health::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Health::GetClassData() const {
  return &_class_data_;
}

void Health::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Health*>(&to_msg);
  auto& from = static_cast<const Health&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Health)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_gyrometer_calibration_ok() != 0) {
    _this->_internal_set_is_gyrometer_calibration_ok(from._internal_is_gyrometer_calibration_ok());
  }
  if (from._internal_is_accelerometer_calibration_ok() != 0) {
    _this->_internal_set_is_accelerometer_calibration_ok(from._internal_is_accelerometer_calibration_ok());
  }
  if (from._internal_is_magnetometer_calibration_ok() != 0) {
    _this->_internal_set_is_magnetometer_calibration_ok(from._internal_is_magnetometer_calibration_ok());
  }
  if (from._internal_is_local_position_ok() != 0) {
    _this->_internal_set_is_local_position_ok(from._internal_is_local_position_ok());
  }
  if (from._internal_is_global_position_ok() != 0) {
    _this->_internal_set_is_global_position_ok(from._internal_is_global_position_ok());
  }
  if (from._internal_is_home_position_ok() != 0) {
    _this->_internal_set_is_home_position_ok(from._internal_is_home_position_ok());
  }
  if (from._internal_is_armable() != 0) {
    _this->_internal_set_is_armable(from._internal_is_armable());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Health::CopyFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Health::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Health::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Health::InternalSwap(Health* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Health, _impl_.is_armable_)
      + sizeof(Health::_impl_.is_armable_)
      - PROTOBUF_FIELD_OFFSET(Health, _impl_.is_gyrometer_calibration_ok_)>(
          reinterpret_cast<char*>(&_impl_.is_gyrometer_calibration_ok_),
          reinterpret_cast<char*>(&other->_impl_.is_gyrometer_calibration_ok_));
}

::google::protobuf::Metadata Health::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[131]);
}
// ===================================================================

class RcStatus::_Internal {
 public:
};

RcStatus::RcStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.RcStatus)
}
RcStatus::RcStatus(
    ::google::protobuf::Arena* arena, const RcStatus& from)
    : RcStatus(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RcStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RcStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, was_available_once_),
           0,
           offsetof(Impl_, signal_strength_percent_) -
               offsetof(Impl_, was_available_once_) +
               sizeof(Impl_::signal_strength_percent_));
}
RcStatus::~RcStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RcStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RcStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RcStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RcStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.was_available_once_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.signal_strength_percent_) -
      reinterpret_cast<char*>(&_impl_.was_available_once_)) + sizeof(_impl_.signal_strength_percent_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RcStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> RcStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RcStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RcStatus, _impl_.was_available_once_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.was_available_once_)}},
    // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RcStatus, _impl_.is_available_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.is_available_)}},
    // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.signal_strength_percent_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.was_available_once_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.is_available_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.signal_strength_percent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RcStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RcStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_was_available_once() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_was_available_once(), target);
  }

  // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_available(), target);
  }

  // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_signal_strength_percent = this->_internal_signal_strength_percent();
  ::uint32_t raw_signal_strength_percent;
  memcpy(&raw_signal_strength_percent, &tmp_signal_strength_percent, sizeof(tmp_signal_strength_percent));
  if (raw_signal_strength_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_signal_strength_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RcStatus)
  return target;
}

::size_t RcStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RcStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_was_available_once() != 0) {
    total_size += 2;
  }

  // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->_internal_is_available() != 0) {
    total_size += 2;
  }

  // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_signal_strength_percent = this->_internal_signal_strength_percent();
  ::uint32_t raw_signal_strength_percent;
  memcpy(&raw_signal_strength_percent, &tmp_signal_strength_percent, sizeof(tmp_signal_strength_percent));
  if (raw_signal_strength_percent != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RcStatus::_class_data_ = {
    RcStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RcStatus::GetClassData() const {
  return &_class_data_;
}

void RcStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RcStatus*>(&to_msg);
  auto& from = static_cast<const RcStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RcStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_was_available_once() != 0) {
    _this->_internal_set_was_available_once(from._internal_was_available_once());
  }
  if (from._internal_is_available() != 0) {
    _this->_internal_set_is_available(from._internal_is_available());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_signal_strength_percent = from._internal_signal_strength_percent();
  ::uint32_t raw_signal_strength_percent;
  memcpy(&raw_signal_strength_percent, &tmp_signal_strength_percent, sizeof(tmp_signal_strength_percent));
  if (raw_signal_strength_percent != 0) {
    _this->_internal_set_signal_strength_percent(from._internal_signal_strength_percent());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RcStatus::CopyFrom(const RcStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RcStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RcStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RcStatus::InternalSwap(RcStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.signal_strength_percent_)
      + sizeof(RcStatus::_impl_.signal_strength_percent_)
      - PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.was_available_once_)>(
          reinterpret_cast<char*>(&_impl_.was_available_once_),
          reinterpret_cast<char*>(&other->_impl_.was_available_once_));
}

::google::protobuf::Metadata RcStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[132]);
}
// ===================================================================

class StatusText::_Internal {
 public:
};

StatusText::StatusText(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.StatusText)
}
inline PROTOBUF_NDEBUG_INLINE StatusText::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : text_(arena, from.text_),
        _cached_size_{0} {}

StatusText::StatusText(
    ::google::protobuf::Arena* arena,
    const StatusText& from)
    : ::google::protobuf::Message(arena) {
  StatusText* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.StatusText)
}
inline PROTOBUF_NDEBUG_INLINE StatusText::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : text_(arena),
        _cached_size_{0} {}

inline void StatusText::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
StatusText::~StatusText() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.StatusText)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StatusText::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.text_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StatusText::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.StatusText)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StatusText::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 44, 2> StatusText::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_StatusText_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string text = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StatusText, _impl_.text_)}},
    // .mavsdk.rpc.telemetry.StatusTextType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StatusText, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(StatusText, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.StatusTextType type = 1;
    {PROTOBUF_FIELD_OFFSET(StatusText, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string text = 2;
    {PROTOBUF_FIELD_OFFSET(StatusText, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\37\0\4\0\0\0\0\0"
    "mavsdk.rpc.telemetry.StatusText"
    "text"
  }},
};

::uint8_t* StatusText::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.StatusText)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mavsdk.rpc.telemetry.StatusTextType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.telemetry.StatusText.text");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.StatusText)
  return target;
}

::size_t StatusText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.StatusText)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // .mavsdk.rpc.telemetry.StatusTextType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StatusText::_class_data_ = {
    StatusText::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StatusText::GetClassData() const {
  return &_class_data_;
}

void StatusText::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StatusText*>(&to_msg);
  auto& from = static_cast<const StatusText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.StatusText)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StatusText::CopyFrom(const StatusText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.StatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StatusText::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StatusText::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StatusText::InternalSwap(StatusText* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata StatusText::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[133]);
}
// ===================================================================

class ActuatorControlTarget::_Internal {
 public:
};

ActuatorControlTarget::ActuatorControlTarget(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ActuatorControlTarget)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorControlTarget::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : controls_{visibility, arena, from.controls_},
        _cached_size_{0} {}

ActuatorControlTarget::ActuatorControlTarget(
    ::google::protobuf::Arena* arena,
    const ActuatorControlTarget& from)
    : ::google::protobuf::Message(arena) {
  ActuatorControlTarget* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.group_ = from._impl_.group_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorControlTarget)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorControlTarget::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : controls_{visibility, arena},
        _cached_size_{0} {}

inline void ActuatorControlTarget::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.group_ = {};
}
ActuatorControlTarget::~ActuatorControlTarget() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorControlTarget)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ActuatorControlTarget::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ActuatorControlTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.controls_.Clear();
  _impl_.group_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ActuatorControlTarget::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ActuatorControlTarget::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ActuatorControlTarget_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float controls = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ActuatorControlTarget, _impl_.controls_)}},
    // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ActuatorControlTarget, _impl_.group_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ActuatorControlTarget, _impl_.group_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
    {PROTOBUF_FIELD_OFFSET(ActuatorControlTarget, _impl_.group_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated float controls = 2;
    {PROTOBUF_FIELD_OFFSET(ActuatorControlTarget, _impl_.controls_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ActuatorControlTarget::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_group(), target);
  }

  // repeated float controls = 2;
  if (this->_internal_controls_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_controls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorControlTarget)
  return target;
}

::size_t ActuatorControlTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float controls = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_controls_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_group() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_group());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ActuatorControlTarget::_class_data_ = {
    ActuatorControlTarget::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ActuatorControlTarget::GetClassData() const {
  return &_class_data_;
}

void ActuatorControlTarget::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ActuatorControlTarget*>(&to_msg);
  auto& from = static_cast<const ActuatorControlTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_controls()->MergeFrom(from._internal_controls());
  if (from._internal_group() != 0) {
    _this->_internal_set_group(from._internal_group());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ActuatorControlTarget::CopyFrom(const ActuatorControlTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ActuatorControlTarget::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ActuatorControlTarget::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ActuatorControlTarget::InternalSwap(ActuatorControlTarget* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.controls_.InternalSwap(&other->_impl_.controls_);
        swap(_impl_.group_, other->_impl_.group_);
}

::google::protobuf::Metadata ActuatorControlTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[134]);
}
// ===================================================================

class ActuatorOutputStatus::_Internal {
 public:
};

ActuatorOutputStatus::ActuatorOutputStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ActuatorOutputStatus)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorOutputStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : actuator_{visibility, arena, from.actuator_},
        _cached_size_{0} {}

ActuatorOutputStatus::ActuatorOutputStatus(
    ::google::protobuf::Arena* arena,
    const ActuatorOutputStatus& from)
    : ::google::protobuf::Message(arena) {
  ActuatorOutputStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.active_ = from._impl_.active_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorOutputStatus)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorOutputStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : actuator_{visibility, arena},
        _cached_size_{0} {}

inline void ActuatorOutputStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.active_ = {};
}
ActuatorOutputStatus::~ActuatorOutputStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ActuatorOutputStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ActuatorOutputStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actuator_.Clear();
  _impl_.active_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ActuatorOutputStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ActuatorOutputStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ActuatorOutputStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float actuator = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ActuatorOutputStatus, _impl_.actuator_)}},
    // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ActuatorOutputStatus, _impl_.active_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ActuatorOutputStatus, _impl_.active_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
    {PROTOBUF_FIELD_OFFSET(ActuatorOutputStatus, _impl_.active_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated float actuator = 2;
    {PROTOBUF_FIELD_OFFSET(ActuatorOutputStatus, _impl_.actuator_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ActuatorOutputStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_active(), target);
  }

  // repeated float actuator = 2;
  if (this->_internal_actuator_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_actuator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  return target;
}

::size_t ActuatorOutputStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float actuator = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_actuator_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->_internal_active() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_active());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ActuatorOutputStatus::_class_data_ = {
    ActuatorOutputStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ActuatorOutputStatus::GetClassData() const {
  return &_class_data_;
}

void ActuatorOutputStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ActuatorOutputStatus*>(&to_msg);
  auto& from = static_cast<const ActuatorOutputStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actuator()->MergeFrom(from._internal_actuator());
  if (from._internal_active() != 0) {
    _this->_internal_set_active(from._internal_active());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ActuatorOutputStatus::CopyFrom(const ActuatorOutputStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ActuatorOutputStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ActuatorOutputStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ActuatorOutputStatus::InternalSwap(ActuatorOutputStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actuator_.InternalSwap(&other->_impl_.actuator_);
        swap(_impl_.active_, other->_impl_.active_);
}

::google::protobuf::Metadata ActuatorOutputStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[135]);
}
// ===================================================================

class Covariance::_Internal {
 public:
};

Covariance::Covariance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Covariance)
}
inline PROTOBUF_NDEBUG_INLINE Covariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : covariance_matrix_{visibility, arena, from.covariance_matrix_},
        _cached_size_{0} {}

Covariance::Covariance(
    ::google::protobuf::Arena* arena,
    const Covariance& from)
    : ::google::protobuf::Message(arena) {
  Covariance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Covariance)
}
inline PROTOBUF_NDEBUG_INLINE Covariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : covariance_matrix_{visibility, arena},
        _cached_size_{0} {}

inline void Covariance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Covariance::~Covariance() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Covariance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Covariance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Covariance::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Covariance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.covariance_matrix_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Covariance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Covariance::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Covariance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float covariance_matrix = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Covariance, _impl_.covariance_matrix_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float covariance_matrix = 1;
    {PROTOBUF_FIELD_OFFSET(Covariance, _impl_.covariance_matrix_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Covariance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Covariance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float covariance_matrix = 1;
  if (this->_internal_covariance_matrix_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_covariance_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Covariance)
  return target;
}

::size_t Covariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Covariance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float covariance_matrix = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_covariance_matrix_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Covariance::_class_data_ = {
    Covariance::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Covariance::GetClassData() const {
  return &_class_data_;
}

void Covariance::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Covariance*>(&to_msg);
  auto& from = static_cast<const Covariance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Covariance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_covariance_matrix()->MergeFrom(from._internal_covariance_matrix());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Covariance::CopyFrom(const Covariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Covariance::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Covariance::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Covariance::InternalSwap(Covariance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.covariance_matrix_.InternalSwap(&other->_impl_.covariance_matrix_);
}

::google::protobuf::Metadata Covariance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[136]);
}
// ===================================================================

class VelocityBody::_Internal {
 public:
};

VelocityBody::VelocityBody(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.VelocityBody)
}
VelocityBody::VelocityBody(
    ::google::protobuf::Arena* arena, const VelocityBody& from)
    : VelocityBody(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VelocityBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VelocityBody::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_m_s_),
           0,
           offsetof(Impl_, z_m_s_) -
               offsetof(Impl_, x_m_s_) +
               sizeof(Impl_::z_m_s_));
}
VelocityBody::~VelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.VelocityBody)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VelocityBody::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.VelocityBody)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_m_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_m_s_) -
      reinterpret_cast<char*>(&_impl_.x_m_s_)) + sizeof(_impl_.z_m_s_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VelocityBody::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> VelocityBody::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VelocityBody_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x_m_s = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.x_m_s_)}},
    // float y_m_s = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.y_m_s_)}},
    // float z_m_s = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.z_m_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x_m_s = 1;
    {PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.x_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y_m_s = 2;
    {PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.y_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z_m_s = 3;
    {PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.z_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* VelocityBody::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.VelocityBody)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x_m_s = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x_m_s = this->_internal_x_m_s();
  ::uint32_t raw_x_m_s;
  memcpy(&raw_x_m_s, &tmp_x_m_s, sizeof(tmp_x_m_s));
  if (raw_x_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x_m_s(), target);
  }

  // float y_m_s = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y_m_s = this->_internal_y_m_s();
  ::uint32_t raw_y_m_s;
  memcpy(&raw_y_m_s, &tmp_y_m_s, sizeof(tmp_y_m_s));
  if (raw_y_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y_m_s(), target);
  }

  // float z_m_s = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z_m_s = this->_internal_z_m_s();
  ::uint32_t raw_z_m_s;
  memcpy(&raw_z_m_s, &tmp_z_m_s, sizeof(tmp_z_m_s));
  if (raw_z_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.VelocityBody)
  return target;
}

::size_t VelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.VelocityBody)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m_s = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x_m_s = this->_internal_x_m_s();
  ::uint32_t raw_x_m_s;
  memcpy(&raw_x_m_s, &tmp_x_m_s, sizeof(tmp_x_m_s));
  if (raw_x_m_s != 0) {
    total_size += 5;
  }

  // float y_m_s = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y_m_s = this->_internal_y_m_s();
  ::uint32_t raw_y_m_s;
  memcpy(&raw_y_m_s, &tmp_y_m_s, sizeof(tmp_y_m_s));
  if (raw_y_m_s != 0) {
    total_size += 5;
  }

  // float z_m_s = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z_m_s = this->_internal_z_m_s();
  ::uint32_t raw_z_m_s;
  memcpy(&raw_z_m_s, &tmp_z_m_s, sizeof(tmp_z_m_s));
  if (raw_z_m_s != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VelocityBody::_class_data_ = {
    VelocityBody::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VelocityBody::GetClassData() const {
  return &_class_data_;
}

void VelocityBody::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VelocityBody*>(&to_msg);
  auto& from = static_cast<const VelocityBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.VelocityBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x_m_s = from._internal_x_m_s();
  ::uint32_t raw_x_m_s;
  memcpy(&raw_x_m_s, &tmp_x_m_s, sizeof(tmp_x_m_s));
  if (raw_x_m_s != 0) {
    _this->_internal_set_x_m_s(from._internal_x_m_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y_m_s = from._internal_y_m_s();
  ::uint32_t raw_y_m_s;
  memcpy(&raw_y_m_s, &tmp_y_m_s, sizeof(tmp_y_m_s));
  if (raw_y_m_s != 0) {
    _this->_internal_set_y_m_s(from._internal_y_m_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z_m_s = from._internal_z_m_s();
  ::uint32_t raw_z_m_s;
  memcpy(&raw_z_m_s, &tmp_z_m_s, sizeof(tmp_z_m_s));
  if (raw_z_m_s != 0) {
    _this->_internal_set_z_m_s(from._internal_z_m_s());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VelocityBody::CopyFrom(const VelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.VelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VelocityBody::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VelocityBody::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VelocityBody::InternalSwap(VelocityBody* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.z_m_s_)
      + sizeof(VelocityBody::_impl_.z_m_s_)
      - PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.x_m_s_)>(
          reinterpret_cast<char*>(&_impl_.x_m_s_),
          reinterpret_cast<char*>(&other->_impl_.x_m_s_));
}

::google::protobuf::Metadata VelocityBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[137]);
}
// ===================================================================

class PositionBody::_Internal {
 public:
};

PositionBody::PositionBody(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.PositionBody)
}
PositionBody::PositionBody(
    ::google::protobuf::Arena* arena, const PositionBody& from)
    : PositionBody(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PositionBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PositionBody::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_m_),
           0,
           offsetof(Impl_, z_m_) -
               offsetof(Impl_, x_m_) +
               sizeof(Impl_::z_m_));
}
PositionBody::~PositionBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionBody)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PositionBody::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PositionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionBody)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_m_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_m_) -
      reinterpret_cast<char*>(&_impl_.x_m_)) + sizeof(_impl_.z_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PositionBody::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> PositionBody::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PositionBody_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x_m = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.x_m_)}},
    // float y_m = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.y_m_)}},
    // float z_m = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.z_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x_m = 1;
    {PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.x_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y_m = 2;
    {PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.y_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z_m = 3;
    {PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.z_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PositionBody::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionBody)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x_m = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x_m = this->_internal_x_m();
  ::uint32_t raw_x_m;
  memcpy(&raw_x_m, &tmp_x_m, sizeof(tmp_x_m));
  if (raw_x_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x_m(), target);
  }

  // float y_m = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y_m = this->_internal_y_m();
  ::uint32_t raw_y_m;
  memcpy(&raw_y_m, &tmp_y_m, sizeof(tmp_y_m));
  if (raw_y_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y_m(), target);
  }

  // float z_m = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z_m = this->_internal_z_m();
  ::uint32_t raw_z_m;
  memcpy(&raw_z_m, &tmp_z_m, sizeof(tmp_z_m));
  if (raw_z_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionBody)
  return target;
}

::size_t PositionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionBody)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x_m = this->_internal_x_m();
  ::uint32_t raw_x_m;
  memcpy(&raw_x_m, &tmp_x_m, sizeof(tmp_x_m));
  if (raw_x_m != 0) {
    total_size += 5;
  }

  // float y_m = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y_m = this->_internal_y_m();
  ::uint32_t raw_y_m;
  memcpy(&raw_y_m, &tmp_y_m, sizeof(tmp_y_m));
  if (raw_y_m != 0) {
    total_size += 5;
  }

  // float z_m = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z_m = this->_internal_z_m();
  ::uint32_t raw_z_m;
  memcpy(&raw_z_m, &tmp_z_m, sizeof(tmp_z_m));
  if (raw_z_m != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PositionBody::_class_data_ = {
    PositionBody::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PositionBody::GetClassData() const {
  return &_class_data_;
}

void PositionBody::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PositionBody*>(&to_msg);
  auto& from = static_cast<const PositionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x_m = from._internal_x_m();
  ::uint32_t raw_x_m;
  memcpy(&raw_x_m, &tmp_x_m, sizeof(tmp_x_m));
  if (raw_x_m != 0) {
    _this->_internal_set_x_m(from._internal_x_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y_m = from._internal_y_m();
  ::uint32_t raw_y_m;
  memcpy(&raw_y_m, &tmp_y_m, sizeof(tmp_y_m));
  if (raw_y_m != 0) {
    _this->_internal_set_y_m(from._internal_y_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z_m = from._internal_z_m();
  ::uint32_t raw_z_m;
  memcpy(&raw_z_m, &tmp_z_m, sizeof(tmp_z_m));
  if (raw_z_m != 0) {
    _this->_internal_set_z_m(from._internal_z_m());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionBody::CopyFrom(const PositionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PositionBody::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PositionBody::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PositionBody::InternalSwap(PositionBody* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.z_m_)
      + sizeof(PositionBody::_impl_.z_m_)
      - PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.x_m_)>(
          reinterpret_cast<char*>(&_impl_.x_m_),
          reinterpret_cast<char*>(&other->_impl_.x_m_));
}

::google::protobuf::Metadata PositionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[138]);
}
// ===================================================================

class Odometry::_Internal {
 public:
  using HasBits = decltype(std::declval<Odometry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::PositionBody& position_body(const Odometry* msg);
  static void set_has_position_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mavsdk::rpc::telemetry::Quaternion& q(const Odometry* msg);
  static void set_has_q(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mavsdk::rpc::telemetry::VelocityBody& velocity_body(const Odometry* msg);
  static void set_has_velocity_body(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mavsdk::rpc::telemetry::AngularVelocityBody& angular_velocity_body(const Odometry* msg);
  static void set_has_angular_velocity_body(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mavsdk::rpc::telemetry::Covariance& pose_covariance(const Odometry* msg);
  static void set_has_pose_covariance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mavsdk::rpc::telemetry::Covariance& velocity_covariance(const Odometry* msg);
  static void set_has_velocity_covariance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::mavsdk::rpc::telemetry::PositionBody& Odometry::_Internal::position_body(const Odometry* msg) {
  return *msg->_impl_.position_body_;
}
const ::mavsdk::rpc::telemetry::Quaternion& Odometry::_Internal::q(const Odometry* msg) {
  return *msg->_impl_.q_;
}
const ::mavsdk::rpc::telemetry::VelocityBody& Odometry::_Internal::velocity_body(const Odometry* msg) {
  return *msg->_impl_.velocity_body_;
}
const ::mavsdk::rpc::telemetry::AngularVelocityBody& Odometry::_Internal::angular_velocity_body(const Odometry* msg) {
  return *msg->_impl_.angular_velocity_body_;
}
const ::mavsdk::rpc::telemetry::Covariance& Odometry::_Internal::pose_covariance(const Odometry* msg) {
  return *msg->_impl_.pose_covariance_;
}
const ::mavsdk::rpc::telemetry::Covariance& Odometry::_Internal::velocity_covariance(const Odometry* msg) {
  return *msg->_impl_.velocity_covariance_;
}
Odometry::Odometry(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Odometry::Odometry(
    ::google::protobuf::Arena* arena,
    const Odometry& from)
    : ::google::protobuf::Message(arena) {
  Odometry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_body_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionBody>(arena, *from._impl_.position_body_)
                : nullptr;
  _impl_.q_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Quaternion>(arena, *from._impl_.q_)
                : nullptr;
  _impl_.velocity_body_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::VelocityBody>(arena, *from._impl_.velocity_body_)
                : nullptr;
  _impl_.angular_velocity_body_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::AngularVelocityBody>(arena, *from._impl_.angular_velocity_body_)
                : nullptr;
  _impl_.pose_covariance_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Covariance>(arena, *from._impl_.pose_covariance_)
                : nullptr;
  _impl_.velocity_covariance_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::Covariance>(arena, *from._impl_.velocity_covariance_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_usec_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, time_usec_),
           offsetof(Impl_, child_frame_id_) -
               offsetof(Impl_, time_usec_) +
               sizeof(Impl_::child_frame_id_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Odometry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_body_),
           0,
           offsetof(Impl_, child_frame_id_) -
               offsetof(Impl_, position_body_) +
               sizeof(Impl_::child_frame_id_));
}
Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Odometry)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Odometry::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_body_;
  delete _impl_.q_;
  delete _impl_.velocity_body_;
  delete _impl_.angular_velocity_body_;
  delete _impl_.pose_covariance_;
  delete _impl_.velocity_covariance_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Odometry)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_body_ != nullptr);
      _impl_.position_body_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.q_ != nullptr);
      _impl_.q_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.velocity_body_ != nullptr);
      _impl_.velocity_body_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.angular_velocity_body_ != nullptr);
      _impl_.angular_velocity_body_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.pose_covariance_ != nullptr);
      _impl_.pose_covariance_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.velocity_covariance_ != nullptr);
      _impl_.velocity_covariance_->Clear();
    }
  }
  ::memset(&_impl_.time_usec_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.child_frame_id_) -
      reinterpret_cast<char*>(&_impl_.time_usec_)) + sizeof(_impl_.child_frame_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Odometry::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 6, 0, 2> Odometry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Odometry_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 time_usec = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Odometry, _impl_.time_usec_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.time_usec_)}},
    // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Odometry, _impl_.frame_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.frame_id_)}},
    // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Odometry, _impl_.child_frame_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.child_frame_id_)}},
    // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.position_body_)}},
    // .mavsdk.rpc.telemetry.Quaternion q = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.q_)}},
    // .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 2, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.velocity_body_)}},
    // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 3, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.angular_velocity_body_)}},
    // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 4, 4, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_covariance_)}},
    // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 5, 5, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.velocity_covariance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 time_usec = 1;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.time_usec_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.child_frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.position_body_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry.Quaternion q = 5;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.q_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.velocity_body_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.angular_velocity_body_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_covariance_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.velocity_covariance_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::PositionBody>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Quaternion>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::VelocityBody>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::AngularVelocityBody>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Covariance>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::Covariance>()},
  }}, {{
  }},
};

::uint8_t* Odometry::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Odometry)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_time_usec(), target);
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
  if (this->_internal_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_frame_id(), target);
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
  if (this->_internal_child_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_child_frame_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::position_body(this),
        _Internal::position_body(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.telemetry.Quaternion q = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::q(this),
        _Internal::q(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::velocity_body(this),
        _Internal::velocity_body(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::angular_velocity_body(this),
        _Internal::angular_velocity_body(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::pose_covariance(this),
        _Internal::pose_covariance(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::velocity_covariance(this),
        _Internal::velocity_covariance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Odometry)
  return target;
}

::size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Odometry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_body_);
    }

    // .mavsdk.rpc.telemetry.Quaternion q = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.q_);
    }

    // .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_body_);
    }

    // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.angular_velocity_body_);
    }

    // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pose_covariance_);
    }

    // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_covariance_);
    }

  }
  // uint64 time_usec = 1;
  if (this->_internal_time_usec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time_usec());
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
  if (this->_internal_frame_id() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_frame_id());
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
  if (this->_internal_child_frame_id() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_child_frame_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Odometry::_class_data_ = {
    Odometry::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Odometry::GetClassData() const {
  return &_class_data_;
}

void Odometry::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Odometry*>(&to_msg);
  auto& from = static_cast<const Odometry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Odometry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position_body()->::mavsdk::rpc::telemetry::PositionBody::MergeFrom(
          from._internal_position_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_q()->::mavsdk::rpc::telemetry::Quaternion::MergeFrom(
          from._internal_q());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_velocity_body()->::mavsdk::rpc::telemetry::VelocityBody::MergeFrom(
          from._internal_velocity_body());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_angular_velocity_body()->::mavsdk::rpc::telemetry::AngularVelocityBody::MergeFrom(
          from._internal_angular_velocity_body());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_pose_covariance()->::mavsdk::rpc::telemetry::Covariance::MergeFrom(
          from._internal_pose_covariance());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_velocity_covariance()->::mavsdk::rpc::telemetry::Covariance::MergeFrom(
          from._internal_velocity_covariance());
    }
  }
  if (from._internal_time_usec() != 0) {
    _this->_internal_set_time_usec(from._internal_time_usec());
  }
  if (from._internal_frame_id() != 0) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  if (from._internal_child_frame_id() != 0) {
    _this->_internal_set_child_frame_id(from._internal_child_frame_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Odometry::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Odometry::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Odometry::InternalSwap(Odometry* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, _impl_.child_frame_id_)
      + sizeof(Odometry::_impl_.child_frame_id_)
      - PROTOBUF_FIELD_OFFSET(Odometry, _impl_.position_body_)>(
          reinterpret_cast<char*>(&_impl_.position_body_),
          reinterpret_cast<char*>(&other->_impl_.position_body_));
}

::google::protobuf::Metadata Odometry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[139]);
}
// ===================================================================

class DistanceSensor::_Internal {
 public:
  using HasBits = decltype(std::declval<DistanceSensor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::EulerAngle& orientation(const DistanceSensor* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::telemetry::EulerAngle& DistanceSensor::_Internal::orientation(const DistanceSensor* msg) {
  return *msg->_impl_.orientation_;
}
DistanceSensor::DistanceSensor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.DistanceSensor)
}
inline PROTOBUF_NDEBUG_INLINE DistanceSensor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DistanceSensor::DistanceSensor(
    ::google::protobuf::Arena* arena,
    const DistanceSensor& from)
    : ::google::protobuf::Message(arena) {
  DistanceSensor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.orientation_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::EulerAngle>(arena, *from._impl_.orientation_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, minimum_distance_m_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, minimum_distance_m_),
           offsetof(Impl_, current_distance_m_) -
               offsetof(Impl_, minimum_distance_m_) +
               sizeof(Impl_::current_distance_m_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.DistanceSensor)
}
inline PROTOBUF_NDEBUG_INLINE DistanceSensor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DistanceSensor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, orientation_),
           0,
           offsetof(Impl_, current_distance_m_) -
               offsetof(Impl_, orientation_) +
               sizeof(Impl_::current_distance_m_));
}
DistanceSensor::~DistanceSensor() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.DistanceSensor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DistanceSensor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.orientation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DistanceSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.DistanceSensor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.orientation_ != nullptr);
    _impl_.orientation_->Clear();
  }
  ::memset(&_impl_.minimum_distance_m_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.current_distance_m_) -
      reinterpret_cast<char*>(&_impl_.minimum_distance_m_)) + sizeof(_impl_.current_distance_m_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DistanceSensor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> DistanceSensor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DistanceSensor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.EulerAngle orientation = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.orientation_)}},
    // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.minimum_distance_m_)}},
    // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.maximum_distance_m_)}},
    // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.current_distance_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.minimum_distance_m_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.maximum_distance_m_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.current_distance_m_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .mavsdk.rpc.telemetry.EulerAngle orientation = 4;
    {PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.orientation_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::EulerAngle>()},
  }}, {{
  }},
};

::uint8_t* DistanceSensor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.DistanceSensor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_minimum_distance_m = this->_internal_minimum_distance_m();
  ::uint32_t raw_minimum_distance_m;
  memcpy(&raw_minimum_distance_m, &tmp_minimum_distance_m, sizeof(tmp_minimum_distance_m));
  if (raw_minimum_distance_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_minimum_distance_m(), target);
  }

  // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_maximum_distance_m = this->_internal_maximum_distance_m();
  ::uint32_t raw_maximum_distance_m;
  memcpy(&raw_maximum_distance_m, &tmp_maximum_distance_m, sizeof(tmp_maximum_distance_m));
  if (raw_maximum_distance_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_maximum_distance_m(), target);
  }

  // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_current_distance_m = this->_internal_current_distance_m();
  ::uint32_t raw_current_distance_m;
  memcpy(&raw_current_distance_m, &tmp_current_distance_m, sizeof(tmp_current_distance_m));
  if (raw_current_distance_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_current_distance_m(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.EulerAngle orientation = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.DistanceSensor)
  return target;
}

::size_t DistanceSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.DistanceSensor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.EulerAngle orientation = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.orientation_);
  }

  // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_minimum_distance_m = this->_internal_minimum_distance_m();
  ::uint32_t raw_minimum_distance_m;
  memcpy(&raw_minimum_distance_m, &tmp_minimum_distance_m, sizeof(tmp_minimum_distance_m));
  if (raw_minimum_distance_m != 0) {
    total_size += 5;
  }

  // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_maximum_distance_m = this->_internal_maximum_distance_m();
  ::uint32_t raw_maximum_distance_m;
  memcpy(&raw_maximum_distance_m, &tmp_maximum_distance_m, sizeof(tmp_maximum_distance_m));
  if (raw_maximum_distance_m != 0) {
    total_size += 5;
  }

  // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_current_distance_m = this->_internal_current_distance_m();
  ::uint32_t raw_current_distance_m;
  memcpy(&raw_current_distance_m, &tmp_current_distance_m, sizeof(tmp_current_distance_m));
  if (raw_current_distance_m != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DistanceSensor::_class_data_ = {
    DistanceSensor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DistanceSensor::GetClassData() const {
  return &_class_data_;
}

void DistanceSensor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DistanceSensor*>(&to_msg);
  auto& from = static_cast<const DistanceSensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.DistanceSensor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_orientation()->::mavsdk::rpc::telemetry::EulerAngle::MergeFrom(
        from._internal_orientation());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_minimum_distance_m = from._internal_minimum_distance_m();
  ::uint32_t raw_minimum_distance_m;
  memcpy(&raw_minimum_distance_m, &tmp_minimum_distance_m, sizeof(tmp_minimum_distance_m));
  if (raw_minimum_distance_m != 0) {
    _this->_internal_set_minimum_distance_m(from._internal_minimum_distance_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_maximum_distance_m = from._internal_maximum_distance_m();
  ::uint32_t raw_maximum_distance_m;
  memcpy(&raw_maximum_distance_m, &tmp_maximum_distance_m, sizeof(tmp_maximum_distance_m));
  if (raw_maximum_distance_m != 0) {
    _this->_internal_set_maximum_distance_m(from._internal_maximum_distance_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_current_distance_m = from._internal_current_distance_m();
  ::uint32_t raw_current_distance_m;
  memcpy(&raw_current_distance_m, &tmp_current_distance_m, sizeof(tmp_current_distance_m));
  if (raw_current_distance_m != 0) {
    _this->_internal_set_current_distance_m(from._internal_current_distance_m());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DistanceSensor::CopyFrom(const DistanceSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.DistanceSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DistanceSensor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DistanceSensor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DistanceSensor::InternalSwap(DistanceSensor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.current_distance_m_)
      + sizeof(DistanceSensor::_impl_.current_distance_m_)
      - PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.orientation_)>(
          reinterpret_cast<char*>(&_impl_.orientation_),
          reinterpret_cast<char*>(&other->_impl_.orientation_));
}

::google::protobuf::Metadata DistanceSensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[140]);
}
// ===================================================================

class ScaledPressure::_Internal {
 public:
};

ScaledPressure::ScaledPressure(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ScaledPressure)
}
ScaledPressure::ScaledPressure(
    ::google::protobuf::Arena* arena, const ScaledPressure& from)
    : ScaledPressure(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ScaledPressure::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ScaledPressure::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_us_),
           0,
           offsetof(Impl_, differential_pressure_temperature_deg_) -
               offsetof(Impl_, timestamp_us_) +
               sizeof(Impl_::differential_pressure_temperature_deg_));
}
ScaledPressure::~ScaledPressure() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ScaledPressure)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ScaledPressure::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ScaledPressure::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ScaledPressure)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_us_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.differential_pressure_temperature_deg_) -
      reinterpret_cast<char*>(&_impl_.timestamp_us_)) + sizeof(_impl_.differential_pressure_temperature_deg_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ScaledPressure::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> ScaledPressure::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ScaledPressure_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 timestamp_us = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ScaledPressure, _impl_.timestamp_us_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.timestamp_us_)}},
    // float absolute_pressure_hpa = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.absolute_pressure_hpa_)}},
    // float differential_pressure_hpa = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.differential_pressure_hpa_)}},
    // float temperature_deg = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.temperature_deg_)}},
    // float differential_pressure_temperature_deg = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.differential_pressure_temperature_deg_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 timestamp_us = 1;
    {PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.timestamp_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // float absolute_pressure_hpa = 2;
    {PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.absolute_pressure_hpa_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float differential_pressure_hpa = 3;
    {PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.differential_pressure_hpa_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float temperature_deg = 4;
    {PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.temperature_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float differential_pressure_temperature_deg = 5;
    {PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.differential_pressure_temperature_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ScaledPressure::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ScaledPressure)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->_internal_timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_timestamp_us(), target);
  }

  // float absolute_pressure_hpa = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_pressure_hpa = this->_internal_absolute_pressure_hpa();
  ::uint32_t raw_absolute_pressure_hpa;
  memcpy(&raw_absolute_pressure_hpa, &tmp_absolute_pressure_hpa, sizeof(tmp_absolute_pressure_hpa));
  if (raw_absolute_pressure_hpa != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_absolute_pressure_hpa(), target);
  }

  // float differential_pressure_hpa = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_differential_pressure_hpa = this->_internal_differential_pressure_hpa();
  ::uint32_t raw_differential_pressure_hpa;
  memcpy(&raw_differential_pressure_hpa, &tmp_differential_pressure_hpa, sizeof(tmp_differential_pressure_hpa));
  if (raw_differential_pressure_hpa != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_differential_pressure_hpa(), target);
  }

  // float temperature_deg = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature_deg = this->_internal_temperature_deg();
  ::uint32_t raw_temperature_deg;
  memcpy(&raw_temperature_deg, &tmp_temperature_deg, sizeof(tmp_temperature_deg));
  if (raw_temperature_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_temperature_deg(), target);
  }

  // float differential_pressure_temperature_deg = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_differential_pressure_temperature_deg = this->_internal_differential_pressure_temperature_deg();
  ::uint32_t raw_differential_pressure_temperature_deg;
  memcpy(&raw_differential_pressure_temperature_deg, &tmp_differential_pressure_temperature_deg, sizeof(tmp_differential_pressure_temperature_deg));
  if (raw_differential_pressure_temperature_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_differential_pressure_temperature_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ScaledPressure)
  return target;
}

::size_t ScaledPressure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ScaledPressure)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->_internal_timestamp_us() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp_us());
  }

  // float absolute_pressure_hpa = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_pressure_hpa = this->_internal_absolute_pressure_hpa();
  ::uint32_t raw_absolute_pressure_hpa;
  memcpy(&raw_absolute_pressure_hpa, &tmp_absolute_pressure_hpa, sizeof(tmp_absolute_pressure_hpa));
  if (raw_absolute_pressure_hpa != 0) {
    total_size += 5;
  }

  // float differential_pressure_hpa = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_differential_pressure_hpa = this->_internal_differential_pressure_hpa();
  ::uint32_t raw_differential_pressure_hpa;
  memcpy(&raw_differential_pressure_hpa, &tmp_differential_pressure_hpa, sizeof(tmp_differential_pressure_hpa));
  if (raw_differential_pressure_hpa != 0) {
    total_size += 5;
  }

  // float temperature_deg = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature_deg = this->_internal_temperature_deg();
  ::uint32_t raw_temperature_deg;
  memcpy(&raw_temperature_deg, &tmp_temperature_deg, sizeof(tmp_temperature_deg));
  if (raw_temperature_deg != 0) {
    total_size += 5;
  }

  // float differential_pressure_temperature_deg = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_differential_pressure_temperature_deg = this->_internal_differential_pressure_temperature_deg();
  ::uint32_t raw_differential_pressure_temperature_deg;
  memcpy(&raw_differential_pressure_temperature_deg, &tmp_differential_pressure_temperature_deg, sizeof(tmp_differential_pressure_temperature_deg));
  if (raw_differential_pressure_temperature_deg != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ScaledPressure::_class_data_ = {
    ScaledPressure::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ScaledPressure::GetClassData() const {
  return &_class_data_;
}

void ScaledPressure::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ScaledPressure*>(&to_msg);
  auto& from = static_cast<const ScaledPressure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ScaledPressure)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp_us() != 0) {
    _this->_internal_set_timestamp_us(from._internal_timestamp_us());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_pressure_hpa = from._internal_absolute_pressure_hpa();
  ::uint32_t raw_absolute_pressure_hpa;
  memcpy(&raw_absolute_pressure_hpa, &tmp_absolute_pressure_hpa, sizeof(tmp_absolute_pressure_hpa));
  if (raw_absolute_pressure_hpa != 0) {
    _this->_internal_set_absolute_pressure_hpa(from._internal_absolute_pressure_hpa());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_differential_pressure_hpa = from._internal_differential_pressure_hpa();
  ::uint32_t raw_differential_pressure_hpa;
  memcpy(&raw_differential_pressure_hpa, &tmp_differential_pressure_hpa, sizeof(tmp_differential_pressure_hpa));
  if (raw_differential_pressure_hpa != 0) {
    _this->_internal_set_differential_pressure_hpa(from._internal_differential_pressure_hpa());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature_deg = from._internal_temperature_deg();
  ::uint32_t raw_temperature_deg;
  memcpy(&raw_temperature_deg, &tmp_temperature_deg, sizeof(tmp_temperature_deg));
  if (raw_temperature_deg != 0) {
    _this->_internal_set_temperature_deg(from._internal_temperature_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_differential_pressure_temperature_deg = from._internal_differential_pressure_temperature_deg();
  ::uint32_t raw_differential_pressure_temperature_deg;
  memcpy(&raw_differential_pressure_temperature_deg, &tmp_differential_pressure_temperature_deg, sizeof(tmp_differential_pressure_temperature_deg));
  if (raw_differential_pressure_temperature_deg != 0) {
    _this->_internal_set_differential_pressure_temperature_deg(from._internal_differential_pressure_temperature_deg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ScaledPressure::CopyFrom(const ScaledPressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ScaledPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ScaledPressure::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ScaledPressure::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ScaledPressure::InternalSwap(ScaledPressure* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.differential_pressure_temperature_deg_)
      + sizeof(ScaledPressure::_impl_.differential_pressure_temperature_deg_)
      - PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.timestamp_us_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_us_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_us_));
}

::google::protobuf::Metadata ScaledPressure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[141]);
}
// ===================================================================

class PositionNed::_Internal {
 public:
};

PositionNed::PositionNed(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.PositionNed)
}
PositionNed::PositionNed(
    ::google::protobuf::Arena* arena, const PositionNed& from)
    : PositionNed(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PositionNed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PositionNed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, north_m_),
           0,
           offsetof(Impl_, down_m_) -
               offsetof(Impl_, north_m_) +
               sizeof(Impl_::down_m_));
}
PositionNed::~PositionNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionNed)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PositionNed::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PositionNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionNed)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.north_m_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.down_m_) -
      reinterpret_cast<char*>(&_impl_.north_m_)) + sizeof(_impl_.down_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PositionNed::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> PositionNed::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PositionNed_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.north_m_)}},
    // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.east_m_)}},
    // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.down_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.north_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.east_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.down_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PositionNed::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionNed)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_north_m = this->_internal_north_m();
  ::uint32_t raw_north_m;
  memcpy(&raw_north_m, &tmp_north_m, sizeof(tmp_north_m));
  if (raw_north_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_north_m(), target);
  }

  // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_east_m = this->_internal_east_m();
  ::uint32_t raw_east_m;
  memcpy(&raw_east_m, &tmp_east_m, sizeof(tmp_east_m));
  if (raw_east_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_east_m(), target);
  }

  // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_m = this->_internal_down_m();
  ::uint32_t raw_down_m;
  memcpy(&raw_down_m, &tmp_down_m, sizeof(tmp_down_m));
  if (raw_down_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_down_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionNed)
  return target;
}

::size_t PositionNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionNed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_north_m = this->_internal_north_m();
  ::uint32_t raw_north_m;
  memcpy(&raw_north_m, &tmp_north_m, sizeof(tmp_north_m));
  if (raw_north_m != 0) {
    total_size += 5;
  }

  // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_east_m = this->_internal_east_m();
  ::uint32_t raw_east_m;
  memcpy(&raw_east_m, &tmp_east_m, sizeof(tmp_east_m));
  if (raw_east_m != 0) {
    total_size += 5;
  }

  // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_m = this->_internal_down_m();
  ::uint32_t raw_down_m;
  memcpy(&raw_down_m, &tmp_down_m, sizeof(tmp_down_m));
  if (raw_down_m != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PositionNed::_class_data_ = {
    PositionNed::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PositionNed::GetClassData() const {
  return &_class_data_;
}

void PositionNed::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PositionNed*>(&to_msg);
  auto& from = static_cast<const PositionNed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionNed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_north_m = from._internal_north_m();
  ::uint32_t raw_north_m;
  memcpy(&raw_north_m, &tmp_north_m, sizeof(tmp_north_m));
  if (raw_north_m != 0) {
    _this->_internal_set_north_m(from._internal_north_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_east_m = from._internal_east_m();
  ::uint32_t raw_east_m;
  memcpy(&raw_east_m, &tmp_east_m, sizeof(tmp_east_m));
  if (raw_east_m != 0) {
    _this->_internal_set_east_m(from._internal_east_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_m = from._internal_down_m();
  ::uint32_t raw_down_m;
  memcpy(&raw_down_m, &tmp_down_m, sizeof(tmp_down_m));
  if (raw_down_m != 0) {
    _this->_internal_set_down_m(from._internal_down_m());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionNed::CopyFrom(const PositionNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PositionNed::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PositionNed::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PositionNed::InternalSwap(PositionNed* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.down_m_)
      + sizeof(PositionNed::_impl_.down_m_)
      - PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.north_m_)>(
          reinterpret_cast<char*>(&_impl_.north_m_),
          reinterpret_cast<char*>(&other->_impl_.north_m_));
}

::google::protobuf::Metadata PositionNed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[142]);
}
// ===================================================================

class VelocityNed::_Internal {
 public:
};

VelocityNed::VelocityNed(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.VelocityNed)
}
VelocityNed::VelocityNed(
    ::google::protobuf::Arena* arena, const VelocityNed& from)
    : VelocityNed(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VelocityNed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VelocityNed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, north_m_s_),
           0,
           offsetof(Impl_, down_m_s_) -
               offsetof(Impl_, north_m_s_) +
               sizeof(Impl_::down_m_s_));
}
VelocityNed::~VelocityNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.VelocityNed)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VelocityNed::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.VelocityNed)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.north_m_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.down_m_s_) -
      reinterpret_cast<char*>(&_impl_.north_m_s_)) + sizeof(_impl_.down_m_s_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VelocityNed::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> VelocityNed::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VelocityNed_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float north_m_s = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.north_m_s_)}},
    // float east_m_s = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.east_m_s_)}},
    // float down_m_s = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.down_m_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float north_m_s = 1;
    {PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.north_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float east_m_s = 2;
    {PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.east_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float down_m_s = 3;
    {PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.down_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* VelocityNed::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.VelocityNed)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float north_m_s = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_north_m_s = this->_internal_north_m_s();
  ::uint32_t raw_north_m_s;
  memcpy(&raw_north_m_s, &tmp_north_m_s, sizeof(tmp_north_m_s));
  if (raw_north_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_north_m_s(), target);
  }

  // float east_m_s = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_east_m_s = this->_internal_east_m_s();
  ::uint32_t raw_east_m_s;
  memcpy(&raw_east_m_s, &tmp_east_m_s, sizeof(tmp_east_m_s));
  if (raw_east_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_east_m_s(), target);
  }

  // float down_m_s = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_m_s = this->_internal_down_m_s();
  ::uint32_t raw_down_m_s;
  memcpy(&raw_down_m_s, &tmp_down_m_s, sizeof(tmp_down_m_s));
  if (raw_down_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_down_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.VelocityNed)
  return target;
}

::size_t VelocityNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.VelocityNed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m_s = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_north_m_s = this->_internal_north_m_s();
  ::uint32_t raw_north_m_s;
  memcpy(&raw_north_m_s, &tmp_north_m_s, sizeof(tmp_north_m_s));
  if (raw_north_m_s != 0) {
    total_size += 5;
  }

  // float east_m_s = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_east_m_s = this->_internal_east_m_s();
  ::uint32_t raw_east_m_s;
  memcpy(&raw_east_m_s, &tmp_east_m_s, sizeof(tmp_east_m_s));
  if (raw_east_m_s != 0) {
    total_size += 5;
  }

  // float down_m_s = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_m_s = this->_internal_down_m_s();
  ::uint32_t raw_down_m_s;
  memcpy(&raw_down_m_s, &tmp_down_m_s, sizeof(tmp_down_m_s));
  if (raw_down_m_s != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VelocityNed::_class_data_ = {
    VelocityNed::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VelocityNed::GetClassData() const {
  return &_class_data_;
}

void VelocityNed::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VelocityNed*>(&to_msg);
  auto& from = static_cast<const VelocityNed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.VelocityNed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_north_m_s = from._internal_north_m_s();
  ::uint32_t raw_north_m_s;
  memcpy(&raw_north_m_s, &tmp_north_m_s, sizeof(tmp_north_m_s));
  if (raw_north_m_s != 0) {
    _this->_internal_set_north_m_s(from._internal_north_m_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_east_m_s = from._internal_east_m_s();
  ::uint32_t raw_east_m_s;
  memcpy(&raw_east_m_s, &tmp_east_m_s, sizeof(tmp_east_m_s));
  if (raw_east_m_s != 0) {
    _this->_internal_set_east_m_s(from._internal_east_m_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_m_s = from._internal_down_m_s();
  ::uint32_t raw_down_m_s;
  memcpy(&raw_down_m_s, &tmp_down_m_s, sizeof(tmp_down_m_s));
  if (raw_down_m_s != 0) {
    _this->_internal_set_down_m_s(from._internal_down_m_s());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VelocityNed::CopyFrom(const VelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.VelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VelocityNed::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VelocityNed::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VelocityNed::InternalSwap(VelocityNed* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.down_m_s_)
      + sizeof(VelocityNed::_impl_.down_m_s_)
      - PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.north_m_s_)>(
          reinterpret_cast<char*>(&_impl_.north_m_s_),
          reinterpret_cast<char*>(&other->_impl_.north_m_s_));
}

::google::protobuf::Metadata VelocityNed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[143]);
}
// ===================================================================

class PositionVelocityNed::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionVelocityNed>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::PositionNed& position(const PositionVelocityNed* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mavsdk::rpc::telemetry::VelocityNed& velocity(const PositionVelocityNed* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mavsdk::rpc::telemetry::PositionNed& PositionVelocityNed::_Internal::position(const PositionVelocityNed* msg) {
  return *msg->_impl_.position_;
}
const ::mavsdk::rpc::telemetry::VelocityNed& PositionVelocityNed::_Internal::velocity(const PositionVelocityNed* msg) {
  return *msg->_impl_.velocity_;
}
PositionVelocityNed::PositionVelocityNed(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.PositionVelocityNed)
}
inline PROTOBUF_NDEBUG_INLINE PositionVelocityNed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PositionVelocityNed::PositionVelocityNed(
    ::google::protobuf::Arena* arena,
    const PositionVelocityNed& from)
    : ::google::protobuf::Message(arena) {
  PositionVelocityNed* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionNed>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::VelocityNed>(arena, *from._impl_.velocity_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionVelocityNed)
}
inline PROTOBUF_NDEBUG_INLINE PositionVelocityNed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PositionVelocityNed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, velocity_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::velocity_));
}
PositionVelocityNed::~PositionVelocityNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionVelocityNed)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PositionVelocityNed::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.velocity_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PositionVelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PositionVelocityNed::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PositionVelocityNed::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PositionVelocityNed_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.velocity_)}},
    // .mavsdk.rpc.telemetry.PositionNed position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.PositionNed position = 1;
    {PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
    {PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::PositionNed>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::VelocityNed>()},
  }}, {{
  }},
};

::uint8_t* PositionVelocityNed::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.PositionNed position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionVelocityNed)
  return target;
}

::size_t PositionVelocityNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .mavsdk.rpc.telemetry.PositionNed position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PositionVelocityNed::_class_data_ = {
    PositionVelocityNed::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PositionVelocityNed::GetClassData() const {
  return &_class_data_;
}

void PositionVelocityNed::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PositionVelocityNed*>(&to_msg);
  auto& from = static_cast<const PositionVelocityNed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::mavsdk::rpc::telemetry::PositionNed::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_velocity()->::mavsdk::rpc::telemetry::VelocityNed::MergeFrom(
          from._internal_velocity());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionVelocityNed::CopyFrom(const PositionVelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PositionVelocityNed::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PositionVelocityNed::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PositionVelocityNed::InternalSwap(PositionVelocityNed* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.velocity_)
      + sizeof(PositionVelocityNed::_impl_.velocity_)
      - PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata PositionVelocityNed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[144]);
}
// ===================================================================

class GroundTruth::_Internal {
 public:
};

GroundTruth::GroundTruth(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GroundTruth)
}
GroundTruth::GroundTruth(
    ::google::protobuf::Arena* arena, const GroundTruth& from)
    : GroundTruth(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GroundTruth::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GroundTruth::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_deg_),
           0,
           offsetof(Impl_, absolute_altitude_m_) -
               offsetof(Impl_, latitude_deg_) +
               sizeof(Impl_::absolute_altitude_m_));
}
GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GroundTruth)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GroundTruth::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GroundTruth)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.absolute_altitude_m_) -
      reinterpret_cast<char*>(&_impl_.latitude_deg_)) + sizeof(_impl_.absolute_altitude_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GroundTruth::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> GroundTruth::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GroundTruth_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.latitude_deg_)}},
    // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.longitude_deg_)}},
    // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.absolute_altitude_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.latitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.longitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.absolute_altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GroundTruth::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GroundTruth)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_absolute_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GroundTruth)
  return target;
}

::size_t GroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GroundTruth)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    total_size += 9;
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    total_size += 9;
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GroundTruth::_class_data_ = {
    GroundTruth::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GroundTruth::GetClassData() const {
  return &_class_data_;
}

void GroundTruth::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GroundTruth*>(&to_msg);
  auto& from = static_cast<const GroundTruth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GroundTruth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = from._internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    _this->_internal_set_latitude_deg(from._internal_latitude_deg());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = from._internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    _this->_internal_set_longitude_deg(from._internal_longitude_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = from._internal_absolute_altitude_m();
  ::uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    _this->_internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GroundTruth::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GroundTruth::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GroundTruth::InternalSwap(GroundTruth* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.absolute_altitude_m_)
      + sizeof(GroundTruth::_impl_.absolute_altitude_m_)
      - PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.latitude_deg_)>(
          reinterpret_cast<char*>(&_impl_.latitude_deg_),
          reinterpret_cast<char*>(&other->_impl_.latitude_deg_));
}

::google::protobuf::Metadata GroundTruth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[145]);
}
// ===================================================================

class FixedwingMetrics::_Internal {
 public:
};

FixedwingMetrics::FixedwingMetrics(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.FixedwingMetrics)
}
FixedwingMetrics::FixedwingMetrics(
    ::google::protobuf::Arena* arena, const FixedwingMetrics& from)
    : FixedwingMetrics(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FixedwingMetrics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FixedwingMetrics::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, airspeed_m_s_),
           0,
           offsetof(Impl_, climb_rate_m_s_) -
               offsetof(Impl_, airspeed_m_s_) +
               sizeof(Impl_::climb_rate_m_s_));
}
FixedwingMetrics::~FixedwingMetrics() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.FixedwingMetrics)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FixedwingMetrics::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FixedwingMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.airspeed_m_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.climb_rate_m_s_) -
      reinterpret_cast<char*>(&_impl_.airspeed_m_s_)) + sizeof(_impl_.climb_rate_m_s_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FixedwingMetrics::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> FixedwingMetrics::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FixedwingMetrics_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.airspeed_m_s_)}},
    // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.throttle_percentage_)}},
    // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.climb_rate_m_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.airspeed_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.throttle_percentage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.climb_rate_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FixedwingMetrics::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_airspeed_m_s = this->_internal_airspeed_m_s();
  ::uint32_t raw_airspeed_m_s;
  memcpy(&raw_airspeed_m_s, &tmp_airspeed_m_s, sizeof(tmp_airspeed_m_s));
  if (raw_airspeed_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_airspeed_m_s(), target);
  }

  // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_throttle_percentage = this->_internal_throttle_percentage();
  ::uint32_t raw_throttle_percentage;
  memcpy(&raw_throttle_percentage, &tmp_throttle_percentage, sizeof(tmp_throttle_percentage));
  if (raw_throttle_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_throttle_percentage(), target);
  }

  // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_climb_rate_m_s = this->_internal_climb_rate_m_s();
  ::uint32_t raw_climb_rate_m_s;
  memcpy(&raw_climb_rate_m_s, &tmp_climb_rate_m_s, sizeof(tmp_climb_rate_m_s));
  if (raw_climb_rate_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_climb_rate_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.FixedwingMetrics)
  return target;
}

::size_t FixedwingMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_airspeed_m_s = this->_internal_airspeed_m_s();
  ::uint32_t raw_airspeed_m_s;
  memcpy(&raw_airspeed_m_s, &tmp_airspeed_m_s, sizeof(tmp_airspeed_m_s));
  if (raw_airspeed_m_s != 0) {
    total_size += 5;
  }

  // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_throttle_percentage = this->_internal_throttle_percentage();
  ::uint32_t raw_throttle_percentage;
  memcpy(&raw_throttle_percentage, &tmp_throttle_percentage, sizeof(tmp_throttle_percentage));
  if (raw_throttle_percentage != 0) {
    total_size += 5;
  }

  // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_climb_rate_m_s = this->_internal_climb_rate_m_s();
  ::uint32_t raw_climb_rate_m_s;
  memcpy(&raw_climb_rate_m_s, &tmp_climb_rate_m_s, sizeof(tmp_climb_rate_m_s));
  if (raw_climb_rate_m_s != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FixedwingMetrics::_class_data_ = {
    FixedwingMetrics::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FixedwingMetrics::GetClassData() const {
  return &_class_data_;
}

void FixedwingMetrics::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FixedwingMetrics*>(&to_msg);
  auto& from = static_cast<const FixedwingMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_airspeed_m_s = from._internal_airspeed_m_s();
  ::uint32_t raw_airspeed_m_s;
  memcpy(&raw_airspeed_m_s, &tmp_airspeed_m_s, sizeof(tmp_airspeed_m_s));
  if (raw_airspeed_m_s != 0) {
    _this->_internal_set_airspeed_m_s(from._internal_airspeed_m_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_throttle_percentage = from._internal_throttle_percentage();
  ::uint32_t raw_throttle_percentage;
  memcpy(&raw_throttle_percentage, &tmp_throttle_percentage, sizeof(tmp_throttle_percentage));
  if (raw_throttle_percentage != 0) {
    _this->_internal_set_throttle_percentage(from._internal_throttle_percentage());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_climb_rate_m_s = from._internal_climb_rate_m_s();
  ::uint32_t raw_climb_rate_m_s;
  memcpy(&raw_climb_rate_m_s, &tmp_climb_rate_m_s, sizeof(tmp_climb_rate_m_s));
  if (raw_climb_rate_m_s != 0) {
    _this->_internal_set_climb_rate_m_s(from._internal_climb_rate_m_s());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FixedwingMetrics::CopyFrom(const FixedwingMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FixedwingMetrics::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FixedwingMetrics::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FixedwingMetrics::InternalSwap(FixedwingMetrics* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.climb_rate_m_s_)
      + sizeof(FixedwingMetrics::_impl_.climb_rate_m_s_)
      - PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.airspeed_m_s_)>(
          reinterpret_cast<char*>(&_impl_.airspeed_m_s_),
          reinterpret_cast<char*>(&other->_impl_.airspeed_m_s_));
}

::google::protobuf::Metadata FixedwingMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[146]);
}
// ===================================================================

class AccelerationFrd::_Internal {
 public:
};

AccelerationFrd::AccelerationFrd(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AccelerationFrd)
}
AccelerationFrd::AccelerationFrd(
    ::google::protobuf::Arena* arena, const AccelerationFrd& from)
    : AccelerationFrd(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AccelerationFrd::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AccelerationFrd::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, forward_m_s2_),
           0,
           offsetof(Impl_, down_m_s2_) -
               offsetof(Impl_, forward_m_s2_) +
               sizeof(Impl_::down_m_s2_));
}
AccelerationFrd::~AccelerationFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AccelerationFrd)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AccelerationFrd::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AccelerationFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AccelerationFrd)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.forward_m_s2_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.down_m_s2_) -
      reinterpret_cast<char*>(&_impl_.forward_m_s2_)) + sizeof(_impl_.down_m_s2_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AccelerationFrd::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> AccelerationFrd::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AccelerationFrd_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.forward_m_s2_)}},
    // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.right_m_s2_)}},
    // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.down_m_s2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.forward_m_s2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.right_m_s2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.down_m_s2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AccelerationFrd::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AccelerationFrd)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_forward_m_s2 = this->_internal_forward_m_s2();
  ::uint32_t raw_forward_m_s2;
  memcpy(&raw_forward_m_s2, &tmp_forward_m_s2, sizeof(tmp_forward_m_s2));
  if (raw_forward_m_s2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_forward_m_s2(), target);
  }

  // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_m_s2 = this->_internal_right_m_s2();
  ::uint32_t raw_right_m_s2;
  memcpy(&raw_right_m_s2, &tmp_right_m_s2, sizeof(tmp_right_m_s2));
  if (raw_right_m_s2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_right_m_s2(), target);
  }

  // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_m_s2 = this->_internal_down_m_s2();
  ::uint32_t raw_down_m_s2;
  memcpy(&raw_down_m_s2, &tmp_down_m_s2, sizeof(tmp_down_m_s2));
  if (raw_down_m_s2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_down_m_s2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AccelerationFrd)
  return target;
}

::size_t AccelerationFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AccelerationFrd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_forward_m_s2 = this->_internal_forward_m_s2();
  ::uint32_t raw_forward_m_s2;
  memcpy(&raw_forward_m_s2, &tmp_forward_m_s2, sizeof(tmp_forward_m_s2));
  if (raw_forward_m_s2 != 0) {
    total_size += 5;
  }

  // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_m_s2 = this->_internal_right_m_s2();
  ::uint32_t raw_right_m_s2;
  memcpy(&raw_right_m_s2, &tmp_right_m_s2, sizeof(tmp_right_m_s2));
  if (raw_right_m_s2 != 0) {
    total_size += 5;
  }

  // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_m_s2 = this->_internal_down_m_s2();
  ::uint32_t raw_down_m_s2;
  memcpy(&raw_down_m_s2, &tmp_down_m_s2, sizeof(tmp_down_m_s2));
  if (raw_down_m_s2 != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AccelerationFrd::_class_data_ = {
    AccelerationFrd::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AccelerationFrd::GetClassData() const {
  return &_class_data_;
}

void AccelerationFrd::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AccelerationFrd*>(&to_msg);
  auto& from = static_cast<const AccelerationFrd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AccelerationFrd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_forward_m_s2 = from._internal_forward_m_s2();
  ::uint32_t raw_forward_m_s2;
  memcpy(&raw_forward_m_s2, &tmp_forward_m_s2, sizeof(tmp_forward_m_s2));
  if (raw_forward_m_s2 != 0) {
    _this->_internal_set_forward_m_s2(from._internal_forward_m_s2());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_m_s2 = from._internal_right_m_s2();
  ::uint32_t raw_right_m_s2;
  memcpy(&raw_right_m_s2, &tmp_right_m_s2, sizeof(tmp_right_m_s2));
  if (raw_right_m_s2 != 0) {
    _this->_internal_set_right_m_s2(from._internal_right_m_s2());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_m_s2 = from._internal_down_m_s2();
  ::uint32_t raw_down_m_s2;
  memcpy(&raw_down_m_s2, &tmp_down_m_s2, sizeof(tmp_down_m_s2));
  if (raw_down_m_s2 != 0) {
    _this->_internal_set_down_m_s2(from._internal_down_m_s2());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccelerationFrd::CopyFrom(const AccelerationFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AccelerationFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AccelerationFrd::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AccelerationFrd::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AccelerationFrd::InternalSwap(AccelerationFrd* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.down_m_s2_)
      + sizeof(AccelerationFrd::_impl_.down_m_s2_)
      - PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.forward_m_s2_)>(
          reinterpret_cast<char*>(&_impl_.forward_m_s2_),
          reinterpret_cast<char*>(&other->_impl_.forward_m_s2_));
}

::google::protobuf::Metadata AccelerationFrd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[147]);
}
// ===================================================================

class AngularVelocityFrd::_Internal {
 public:
};

AngularVelocityFrd::AngularVelocityFrd(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AngularVelocityFrd)
}
AngularVelocityFrd::AngularVelocityFrd(
    ::google::protobuf::Arena* arena, const AngularVelocityFrd& from)
    : AngularVelocityFrd(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AngularVelocityFrd::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AngularVelocityFrd::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, forward_rad_s_),
           0,
           offsetof(Impl_, down_rad_s_) -
               offsetof(Impl_, forward_rad_s_) +
               sizeof(Impl_::down_rad_s_));
}
AngularVelocityFrd::~AngularVelocityFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AngularVelocityFrd)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AngularVelocityFrd::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AngularVelocityFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.forward_rad_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.down_rad_s_) -
      reinterpret_cast<char*>(&_impl_.forward_rad_s_)) + sizeof(_impl_.down_rad_s_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AngularVelocityFrd::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> AngularVelocityFrd::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AngularVelocityFrd_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.forward_rad_s_)}},
    // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.right_rad_s_)}},
    // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.down_rad_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.forward_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.right_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.down_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AngularVelocityFrd::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_forward_rad_s = this->_internal_forward_rad_s();
  ::uint32_t raw_forward_rad_s;
  memcpy(&raw_forward_rad_s, &tmp_forward_rad_s, sizeof(tmp_forward_rad_s));
  if (raw_forward_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_forward_rad_s(), target);
  }

  // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_rad_s = this->_internal_right_rad_s();
  ::uint32_t raw_right_rad_s;
  memcpy(&raw_right_rad_s, &tmp_right_rad_s, sizeof(tmp_right_rad_s));
  if (raw_right_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_right_rad_s(), target);
  }

  // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_rad_s = this->_internal_down_rad_s();
  ::uint32_t raw_down_rad_s;
  memcpy(&raw_down_rad_s, &tmp_down_rad_s, sizeof(tmp_down_rad_s));
  if (raw_down_rad_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_down_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AngularVelocityFrd)
  return target;
}

::size_t AngularVelocityFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_forward_rad_s = this->_internal_forward_rad_s();
  ::uint32_t raw_forward_rad_s;
  memcpy(&raw_forward_rad_s, &tmp_forward_rad_s, sizeof(tmp_forward_rad_s));
  if (raw_forward_rad_s != 0) {
    total_size += 5;
  }

  // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_rad_s = this->_internal_right_rad_s();
  ::uint32_t raw_right_rad_s;
  memcpy(&raw_right_rad_s, &tmp_right_rad_s, sizeof(tmp_right_rad_s));
  if (raw_right_rad_s != 0) {
    total_size += 5;
  }

  // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_rad_s = this->_internal_down_rad_s();
  ::uint32_t raw_down_rad_s;
  memcpy(&raw_down_rad_s, &tmp_down_rad_s, sizeof(tmp_down_rad_s));
  if (raw_down_rad_s != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AngularVelocityFrd::_class_data_ = {
    AngularVelocityFrd::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AngularVelocityFrd::GetClassData() const {
  return &_class_data_;
}

void AngularVelocityFrd::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AngularVelocityFrd*>(&to_msg);
  auto& from = static_cast<const AngularVelocityFrd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_forward_rad_s = from._internal_forward_rad_s();
  ::uint32_t raw_forward_rad_s;
  memcpy(&raw_forward_rad_s, &tmp_forward_rad_s, sizeof(tmp_forward_rad_s));
  if (raw_forward_rad_s != 0) {
    _this->_internal_set_forward_rad_s(from._internal_forward_rad_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_rad_s = from._internal_right_rad_s();
  ::uint32_t raw_right_rad_s;
  memcpy(&raw_right_rad_s, &tmp_right_rad_s, sizeof(tmp_right_rad_s));
  if (raw_right_rad_s != 0) {
    _this->_internal_set_right_rad_s(from._internal_right_rad_s());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_rad_s = from._internal_down_rad_s();
  ::uint32_t raw_down_rad_s;
  memcpy(&raw_down_rad_s, &tmp_down_rad_s, sizeof(tmp_down_rad_s));
  if (raw_down_rad_s != 0) {
    _this->_internal_set_down_rad_s(from._internal_down_rad_s());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AngularVelocityFrd::CopyFrom(const AngularVelocityFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AngularVelocityFrd::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AngularVelocityFrd::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AngularVelocityFrd::InternalSwap(AngularVelocityFrd* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.down_rad_s_)
      + sizeof(AngularVelocityFrd::_impl_.down_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.forward_rad_s_)>(
          reinterpret_cast<char*>(&_impl_.forward_rad_s_),
          reinterpret_cast<char*>(&other->_impl_.forward_rad_s_));
}

::google::protobuf::Metadata AngularVelocityFrd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[148]);
}
// ===================================================================

class MagneticFieldFrd::_Internal {
 public:
};

MagneticFieldFrd::MagneticFieldFrd(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.MagneticFieldFrd)
}
MagneticFieldFrd::MagneticFieldFrd(
    ::google::protobuf::Arena* arena, const MagneticFieldFrd& from)
    : MagneticFieldFrd(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MagneticFieldFrd::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MagneticFieldFrd::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, forward_gauss_),
           0,
           offsetof(Impl_, down_gauss_) -
               offsetof(Impl_, forward_gauss_) +
               sizeof(Impl_::down_gauss_));
}
MagneticFieldFrd::~MagneticFieldFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.MagneticFieldFrd)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MagneticFieldFrd::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MagneticFieldFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.forward_gauss_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.down_gauss_) -
      reinterpret_cast<char*>(&_impl_.forward_gauss_)) + sizeof(_impl_.down_gauss_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MagneticFieldFrd::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> MagneticFieldFrd::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MagneticFieldFrd_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.forward_gauss_)}},
    // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.right_gauss_)}},
    // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.down_gauss_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.forward_gauss_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.right_gauss_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.down_gauss_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* MagneticFieldFrd::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_forward_gauss = this->_internal_forward_gauss();
  ::uint32_t raw_forward_gauss;
  memcpy(&raw_forward_gauss, &tmp_forward_gauss, sizeof(tmp_forward_gauss));
  if (raw_forward_gauss != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_forward_gauss(), target);
  }

  // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_gauss = this->_internal_right_gauss();
  ::uint32_t raw_right_gauss;
  memcpy(&raw_right_gauss, &tmp_right_gauss, sizeof(tmp_right_gauss));
  if (raw_right_gauss != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_right_gauss(), target);
  }

  // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_gauss = this->_internal_down_gauss();
  ::uint32_t raw_down_gauss;
  memcpy(&raw_down_gauss, &tmp_down_gauss, sizeof(tmp_down_gauss));
  if (raw_down_gauss != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_down_gauss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.MagneticFieldFrd)
  return target;
}

::size_t MagneticFieldFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_forward_gauss = this->_internal_forward_gauss();
  ::uint32_t raw_forward_gauss;
  memcpy(&raw_forward_gauss, &tmp_forward_gauss, sizeof(tmp_forward_gauss));
  if (raw_forward_gauss != 0) {
    total_size += 5;
  }

  // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_gauss = this->_internal_right_gauss();
  ::uint32_t raw_right_gauss;
  memcpy(&raw_right_gauss, &tmp_right_gauss, sizeof(tmp_right_gauss));
  if (raw_right_gauss != 0) {
    total_size += 5;
  }

  // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_gauss = this->_internal_down_gauss();
  ::uint32_t raw_down_gauss;
  memcpy(&raw_down_gauss, &tmp_down_gauss, sizeof(tmp_down_gauss));
  if (raw_down_gauss != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MagneticFieldFrd::_class_data_ = {
    MagneticFieldFrd::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MagneticFieldFrd::GetClassData() const {
  return &_class_data_;
}

void MagneticFieldFrd::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MagneticFieldFrd*>(&to_msg);
  auto& from = static_cast<const MagneticFieldFrd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_forward_gauss = from._internal_forward_gauss();
  ::uint32_t raw_forward_gauss;
  memcpy(&raw_forward_gauss, &tmp_forward_gauss, sizeof(tmp_forward_gauss));
  if (raw_forward_gauss != 0) {
    _this->_internal_set_forward_gauss(from._internal_forward_gauss());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_right_gauss = from._internal_right_gauss();
  ::uint32_t raw_right_gauss;
  memcpy(&raw_right_gauss, &tmp_right_gauss, sizeof(tmp_right_gauss));
  if (raw_right_gauss != 0) {
    _this->_internal_set_right_gauss(from._internal_right_gauss());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_down_gauss = from._internal_down_gauss();
  ::uint32_t raw_down_gauss;
  memcpy(&raw_down_gauss, &tmp_down_gauss, sizeof(tmp_down_gauss));
  if (raw_down_gauss != 0) {
    _this->_internal_set_down_gauss(from._internal_down_gauss());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MagneticFieldFrd::CopyFrom(const MagneticFieldFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MagneticFieldFrd::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MagneticFieldFrd::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MagneticFieldFrd::InternalSwap(MagneticFieldFrd* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.down_gauss_)
      + sizeof(MagneticFieldFrd::_impl_.down_gauss_)
      - PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.forward_gauss_)>(
          reinterpret_cast<char*>(&_impl_.forward_gauss_),
          reinterpret_cast<char*>(&other->_impl_.forward_gauss_));
}

::google::protobuf::Metadata MagneticFieldFrd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[149]);
}
// ===================================================================

class Imu::_Internal {
 public:
  using HasBits = decltype(std::declval<Imu>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Imu, _impl_._has_bits_);
  static const ::mavsdk::rpc::telemetry::AccelerationFrd& acceleration_frd(const Imu* msg);
  static void set_has_acceleration_frd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mavsdk::rpc::telemetry::AngularVelocityFrd& angular_velocity_frd(const Imu* msg);
  static void set_has_angular_velocity_frd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mavsdk::rpc::telemetry::MagneticFieldFrd& magnetic_field_frd(const Imu* msg);
  static void set_has_magnetic_field_frd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mavsdk::rpc::telemetry::AccelerationFrd& Imu::_Internal::acceleration_frd(const Imu* msg) {
  return *msg->_impl_.acceleration_frd_;
}
const ::mavsdk::rpc::telemetry::AngularVelocityFrd& Imu::_Internal::angular_velocity_frd(const Imu* msg) {
  return *msg->_impl_.angular_velocity_frd_;
}
const ::mavsdk::rpc::telemetry::MagneticFieldFrd& Imu::_Internal::magnetic_field_frd(const Imu* msg) {
  return *msg->_impl_.magnetic_field_frd_;
}
Imu::Imu(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Imu)
}
inline PROTOBUF_NDEBUG_INLINE Imu::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Imu::Imu(
    ::google::protobuf::Arena* arena,
    const Imu& from)
    : ::google::protobuf::Message(arena) {
  Imu* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.acceleration_frd_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::AccelerationFrd>(arena, *from._impl_.acceleration_frd_)
                : nullptr;
  _impl_.angular_velocity_frd_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::AngularVelocityFrd>(arena, *from._impl_.angular_velocity_frd_)
                : nullptr;
  _impl_.magnetic_field_frd_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::mavsdk::rpc::telemetry::MagneticFieldFrd>(arena, *from._impl_.magnetic_field_frd_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_us_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_us_),
           offsetof(Impl_, temperature_degc_) -
               offsetof(Impl_, timestamp_us_) +
               sizeof(Impl_::temperature_degc_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Imu)
}
inline PROTOBUF_NDEBUG_INLINE Imu::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Imu::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, acceleration_frd_),
           0,
           offsetof(Impl_, temperature_degc_) -
               offsetof(Impl_, acceleration_frd_) +
               sizeof(Impl_::temperature_degc_));
}
Imu::~Imu() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Imu)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Imu::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.acceleration_frd_;
  delete _impl_.angular_velocity_frd_;
  delete _impl_.magnetic_field_frd_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Imu)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.acceleration_frd_ != nullptr);
      _impl_.acceleration_frd_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.angular_velocity_frd_ != nullptr);
      _impl_.angular_velocity_frd_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.magnetic_field_frd_ != nullptr);
      _impl_.magnetic_field_frd_->Clear();
    }
  }
  ::memset(&_impl_.timestamp_us_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.temperature_degc_) -
      reinterpret_cast<char*>(&_impl_.timestamp_us_)) + sizeof(_impl_.temperature_degc_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Imu::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> Imu::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Imu, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Imu_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.acceleration_frd_)}},
    // .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Imu, _impl_.angular_velocity_frd_)}},
    // .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Imu, _impl_.magnetic_field_frd_)}},
    // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.temperature_degc_)}},
    // uint64 timestamp_us = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Imu, _impl_.timestamp_us_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.timestamp_us_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.acceleration_frd_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.angular_velocity_frd_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.magnetic_field_frd_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.temperature_degc_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint64 timestamp_us = 5;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.timestamp_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::AccelerationFrd>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::AngularVelocityFrd>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry::MagneticFieldFrd>()},
  }}, {{
  }},
};

::uint8_t* Imu::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Imu)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::acceleration_frd(this),
        _Internal::acceleration_frd(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::angular_velocity_frd(this),
        _Internal::angular_velocity_frd(this).GetCachedSize(), target, stream);
  }

  // .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::magnetic_field_frd(this),
        _Internal::magnetic_field_frd(this).GetCachedSize(), target, stream);
  }

  // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature_degc = this->_internal_temperature_degc();
  ::uint32_t raw_temperature_degc;
  memcpy(&raw_temperature_degc, &tmp_temperature_degc, sizeof(tmp_temperature_degc));
  if (raw_temperature_degc != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_temperature_degc(), target);
  }

  // uint64 timestamp_us = 5;
  if (this->_internal_timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Imu)
  return target;
}

::size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Imu)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.acceleration_frd_);
    }

    // .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.angular_velocity_frd_);
    }

    // .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.magnetic_field_frd_);
    }

  }
  // uint64 timestamp_us = 5;
  if (this->_internal_timestamp_us() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp_us());
  }

  // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature_degc = this->_internal_temperature_degc();
  ::uint32_t raw_temperature_degc;
  memcpy(&raw_temperature_degc, &tmp_temperature_degc, sizeof(tmp_temperature_degc));
  if (raw_temperature_degc != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Imu::_class_data_ = {
    Imu::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Imu::GetClassData() const {
  return &_class_data_;
}

void Imu::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Imu*>(&to_msg);
  auto& from = static_cast<const Imu&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Imu)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_acceleration_frd()->::mavsdk::rpc::telemetry::AccelerationFrd::MergeFrom(
          from._internal_acceleration_frd());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_angular_velocity_frd()->::mavsdk::rpc::telemetry::AngularVelocityFrd::MergeFrom(
          from._internal_angular_velocity_frd());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_magnetic_field_frd()->::mavsdk::rpc::telemetry::MagneticFieldFrd::MergeFrom(
          from._internal_magnetic_field_frd());
    }
  }
  if (from._internal_timestamp_us() != 0) {
    _this->_internal_set_timestamp_us(from._internal_timestamp_us());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature_degc = from._internal_temperature_degc();
  ::uint32_t raw_temperature_degc;
  memcpy(&raw_temperature_degc, &tmp_temperature_degc, sizeof(tmp_temperature_degc));
  if (raw_temperature_degc != 0) {
    _this->_internal_set_temperature_degc(from._internal_temperature_degc());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Imu::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Imu::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Imu::InternalSwap(Imu* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Imu, _impl_.temperature_degc_)
      + sizeof(Imu::_impl_.temperature_degc_)
      - PROTOBUF_FIELD_OFFSET(Imu, _impl_.acceleration_frd_)>(
          reinterpret_cast<char*>(&_impl_.acceleration_frd_),
          reinterpret_cast<char*>(&other->_impl_.acceleration_frd_));
}

::google::protobuf::Metadata Imu::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[150]);
}
// ===================================================================

class GpsGlobalOrigin::_Internal {
 public:
};

GpsGlobalOrigin::GpsGlobalOrigin(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GpsGlobalOrigin)
}
GpsGlobalOrigin::GpsGlobalOrigin(
    ::google::protobuf::Arena* arena, const GpsGlobalOrigin& from)
    : GpsGlobalOrigin(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GpsGlobalOrigin::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GpsGlobalOrigin::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_deg_),
           0,
           offsetof(Impl_, altitude_m_) -
               offsetof(Impl_, latitude_deg_) +
               sizeof(Impl_::altitude_m_));
}
GpsGlobalOrigin::~GpsGlobalOrigin() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GpsGlobalOrigin::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GpsGlobalOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.altitude_m_) -
      reinterpret_cast<char*>(&_impl_.latitude_deg_)) + sizeof(_impl_.altitude_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GpsGlobalOrigin::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> GpsGlobalOrigin::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GpsGlobalOrigin_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(GpsGlobalOrigin, _impl_.latitude_deg_)}},
    // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(GpsGlobalOrigin, _impl_.longitude_deg_)}},
    // float altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(GpsGlobalOrigin, _impl_.altitude_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(GpsGlobalOrigin, _impl_.latitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(GpsGlobalOrigin, _impl_.longitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(GpsGlobalOrigin, _impl_.altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GpsGlobalOrigin::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_longitude_deg(), target);
  }

  // float altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_m = this->_internal_altitude_m();
  ::uint32_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  return target;
}

::size_t GpsGlobalOrigin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    total_size += 9;
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    total_size += 9;
  }

  // float altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_m = this->_internal_altitude_m();
  ::uint32_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GpsGlobalOrigin::_class_data_ = {
    GpsGlobalOrigin::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GpsGlobalOrigin::GetClassData() const {
  return &_class_data_;
}

void GpsGlobalOrigin::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GpsGlobalOrigin*>(&to_msg);
  auto& from = static_cast<const GpsGlobalOrigin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude_deg = from._internal_latitude_deg();
  ::uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    _this->_internal_set_latitude_deg(from._internal_latitude_deg());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude_deg = from._internal_longitude_deg();
  ::uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    _this->_internal_set_longitude_deg(from._internal_longitude_deg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_m = from._internal_altitude_m();
  ::uint32_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    _this->_internal_set_altitude_m(from._internal_altitude_m());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GpsGlobalOrigin::CopyFrom(const GpsGlobalOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GpsGlobalOrigin::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GpsGlobalOrigin::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GpsGlobalOrigin::InternalSwap(GpsGlobalOrigin* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpsGlobalOrigin, _impl_.altitude_m_)
      + sizeof(GpsGlobalOrigin::_impl_.altitude_m_)
      - PROTOBUF_FIELD_OFFSET(GpsGlobalOrigin, _impl_.latitude_deg_)>(
          reinterpret_cast<char*>(&_impl_.latitude_deg_),
          reinterpret_cast<char*>(&other->_impl_.latitude_deg_));
}

::google::protobuf::Metadata GpsGlobalOrigin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[151]);
}
// ===================================================================

class Altitude::_Internal {
 public:
};

Altitude::Altitude(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Altitude)
}
Altitude::Altitude(
    ::google::protobuf::Arena* arena, const Altitude& from)
    : Altitude(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Altitude::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Altitude::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, altitude_monotonic_m_),
           0,
           offsetof(Impl_, bottom_clearance_m_) -
               offsetof(Impl_, altitude_monotonic_m_) +
               sizeof(Impl_::bottom_clearance_m_));
}
Altitude::~Altitude() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Altitude)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Altitude::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Altitude::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Altitude)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.altitude_monotonic_m_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bottom_clearance_m_) -
      reinterpret_cast<char*>(&_impl_.altitude_monotonic_m_)) + sizeof(_impl_.bottom_clearance_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Altitude::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> Altitude::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Altitude_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float altitude_monotonic_m = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Altitude, _impl_.altitude_monotonic_m_)}},
    // float altitude_amsl_m = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Altitude, _impl_.altitude_amsl_m_)}},
    // float altitude_local_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Altitude, _impl_.altitude_local_m_)}},
    // float altitude_relative_m = 4 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Altitude, _impl_.altitude_relative_m_)}},
    // float altitude_terrain_m = 5 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Altitude, _impl_.altitude_terrain_m_)}},
    // float bottom_clearance_m = 6 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Altitude, _impl_.bottom_clearance_m_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float altitude_monotonic_m = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Altitude, _impl_.altitude_monotonic_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float altitude_amsl_m = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Altitude, _impl_.altitude_amsl_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float altitude_local_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Altitude, _impl_.altitude_local_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float altitude_relative_m = 4 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Altitude, _impl_.altitude_relative_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float altitude_terrain_m = 5 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Altitude, _impl_.altitude_terrain_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float bottom_clearance_m = 6 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Altitude, _impl_.bottom_clearance_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Altitude::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Altitude)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float altitude_monotonic_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_monotonic_m = this->_internal_altitude_monotonic_m();
  ::uint32_t raw_altitude_monotonic_m;
  memcpy(&raw_altitude_monotonic_m, &tmp_altitude_monotonic_m, sizeof(tmp_altitude_monotonic_m));
  if (raw_altitude_monotonic_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_altitude_monotonic_m(), target);
  }

  // float altitude_amsl_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_amsl_m = this->_internal_altitude_amsl_m();
  ::uint32_t raw_altitude_amsl_m;
  memcpy(&raw_altitude_amsl_m, &tmp_altitude_amsl_m, sizeof(tmp_altitude_amsl_m));
  if (raw_altitude_amsl_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_altitude_amsl_m(), target);
  }

  // float altitude_local_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_local_m = this->_internal_altitude_local_m();
  ::uint32_t raw_altitude_local_m;
  memcpy(&raw_altitude_local_m, &tmp_altitude_local_m, sizeof(tmp_altitude_local_m));
  if (raw_altitude_local_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_altitude_local_m(), target);
  }

  // float altitude_relative_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_relative_m = this->_internal_altitude_relative_m();
  ::uint32_t raw_altitude_relative_m;
  memcpy(&raw_altitude_relative_m, &tmp_altitude_relative_m, sizeof(tmp_altitude_relative_m));
  if (raw_altitude_relative_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_altitude_relative_m(), target);
  }

  // float altitude_terrain_m = 5 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_terrain_m = this->_internal_altitude_terrain_m();
  ::uint32_t raw_altitude_terrain_m;
  memcpy(&raw_altitude_terrain_m, &tmp_altitude_terrain_m, sizeof(tmp_altitude_terrain_m));
  if (raw_altitude_terrain_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_altitude_terrain_m(), target);
  }

  // float bottom_clearance_m = 6 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_bottom_clearance_m = this->_internal_bottom_clearance_m();
  ::uint32_t raw_bottom_clearance_m;
  memcpy(&raw_bottom_clearance_m, &tmp_bottom_clearance_m, sizeof(tmp_bottom_clearance_m));
  if (raw_bottom_clearance_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_bottom_clearance_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Altitude)
  return target;
}

::size_t Altitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Altitude)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float altitude_monotonic_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_monotonic_m = this->_internal_altitude_monotonic_m();
  ::uint32_t raw_altitude_monotonic_m;
  memcpy(&raw_altitude_monotonic_m, &tmp_altitude_monotonic_m, sizeof(tmp_altitude_monotonic_m));
  if (raw_altitude_monotonic_m != 0) {
    total_size += 5;
  }

  // float altitude_amsl_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_amsl_m = this->_internal_altitude_amsl_m();
  ::uint32_t raw_altitude_amsl_m;
  memcpy(&raw_altitude_amsl_m, &tmp_altitude_amsl_m, sizeof(tmp_altitude_amsl_m));
  if (raw_altitude_amsl_m != 0) {
    total_size += 5;
  }

  // float altitude_local_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_local_m = this->_internal_altitude_local_m();
  ::uint32_t raw_altitude_local_m;
  memcpy(&raw_altitude_local_m, &tmp_altitude_local_m, sizeof(tmp_altitude_local_m));
  if (raw_altitude_local_m != 0) {
    total_size += 5;
  }

  // float altitude_relative_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_relative_m = this->_internal_altitude_relative_m();
  ::uint32_t raw_altitude_relative_m;
  memcpy(&raw_altitude_relative_m, &tmp_altitude_relative_m, sizeof(tmp_altitude_relative_m));
  if (raw_altitude_relative_m != 0) {
    total_size += 5;
  }

  // float altitude_terrain_m = 5 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_terrain_m = this->_internal_altitude_terrain_m();
  ::uint32_t raw_altitude_terrain_m;
  memcpy(&raw_altitude_terrain_m, &tmp_altitude_terrain_m, sizeof(tmp_altitude_terrain_m));
  if (raw_altitude_terrain_m != 0) {
    total_size += 5;
  }

  // float bottom_clearance_m = 6 [(.mavsdk.options.default_value) = "NaN"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_bottom_clearance_m = this->_internal_bottom_clearance_m();
  ::uint32_t raw_bottom_clearance_m;
  memcpy(&raw_bottom_clearance_m, &tmp_bottom_clearance_m, sizeof(tmp_bottom_clearance_m));
  if (raw_bottom_clearance_m != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Altitude::_class_data_ = {
    Altitude::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Altitude::GetClassData() const {
  return &_class_data_;
}

void Altitude::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Altitude*>(&to_msg);
  auto& from = static_cast<const Altitude&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Altitude)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_monotonic_m = from._internal_altitude_monotonic_m();
  ::uint32_t raw_altitude_monotonic_m;
  memcpy(&raw_altitude_monotonic_m, &tmp_altitude_monotonic_m, sizeof(tmp_altitude_monotonic_m));
  if (raw_altitude_monotonic_m != 0) {
    _this->_internal_set_altitude_monotonic_m(from._internal_altitude_monotonic_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_amsl_m = from._internal_altitude_amsl_m();
  ::uint32_t raw_altitude_amsl_m;
  memcpy(&raw_altitude_amsl_m, &tmp_altitude_amsl_m, sizeof(tmp_altitude_amsl_m));
  if (raw_altitude_amsl_m != 0) {
    _this->_internal_set_altitude_amsl_m(from._internal_altitude_amsl_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_local_m = from._internal_altitude_local_m();
  ::uint32_t raw_altitude_local_m;
  memcpy(&raw_altitude_local_m, &tmp_altitude_local_m, sizeof(tmp_altitude_local_m));
  if (raw_altitude_local_m != 0) {
    _this->_internal_set_altitude_local_m(from._internal_altitude_local_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_relative_m = from._internal_altitude_relative_m();
  ::uint32_t raw_altitude_relative_m;
  memcpy(&raw_altitude_relative_m, &tmp_altitude_relative_m, sizeof(tmp_altitude_relative_m));
  if (raw_altitude_relative_m != 0) {
    _this->_internal_set_altitude_relative_m(from._internal_altitude_relative_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude_terrain_m = from._internal_altitude_terrain_m();
  ::uint32_t raw_altitude_terrain_m;
  memcpy(&raw_altitude_terrain_m, &tmp_altitude_terrain_m, sizeof(tmp_altitude_terrain_m));
  if (raw_altitude_terrain_m != 0) {
    _this->_internal_set_altitude_terrain_m(from._internal_altitude_terrain_m());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_bottom_clearance_m = from._internal_bottom_clearance_m();
  ::uint32_t raw_bottom_clearance_m;
  memcpy(&raw_bottom_clearance_m, &tmp_bottom_clearance_m, sizeof(tmp_bottom_clearance_m));
  if (raw_bottom_clearance_m != 0) {
    _this->_internal_set_bottom_clearance_m(from._internal_bottom_clearance_m());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Altitude::CopyFrom(const Altitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Altitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Altitude::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Altitude::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Altitude::InternalSwap(Altitude* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Altitude, _impl_.bottom_clearance_m_)
      + sizeof(Altitude::_impl_.bottom_clearance_m_)
      - PROTOBUF_FIELD_OFFSET(Altitude, _impl_.altitude_monotonic_m_)>(
          reinterpret_cast<char*>(&_impl_.altitude_monotonic_m_),
          reinterpret_cast<char*>(&other->_impl_.altitude_monotonic_m_));
}

::google::protobuf::Metadata Altitude::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[152]);
}
// ===================================================================

class TelemetryResult::_Internal {
 public:
};

TelemetryResult::TelemetryResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.TelemetryResult)
}
inline PROTOBUF_NDEBUG_INLINE TelemetryResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : result_str_(arena, from.result_str_),
        _cached_size_{0} {}

TelemetryResult::TelemetryResult(
    ::google::protobuf::Arena* arena,
    const TelemetryResult& from)
    : ::google::protobuf::Message(arena) {
  TelemetryResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.result_ = from._impl_.result_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.TelemetryResult)
}
inline PROTOBUF_NDEBUG_INLINE TelemetryResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : result_str_(arena),
        _cached_size_{0} {}

inline void TelemetryResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
TelemetryResult::~TelemetryResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.TelemetryResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TelemetryResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.result_str_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TelemetryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.TelemetryResult)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TelemetryResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 55, 2> TelemetryResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TelemetryResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string result_str = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TelemetryResult, _impl_.result_str_)}},
    // .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TelemetryResult, _impl_.result_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TelemetryResult, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(TelemetryResult, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string result_str = 2;
    {PROTOBUF_FIELD_OFFSET(TelemetryResult, _impl_.result_str_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\44\0\12\0\0\0\0\0"
    "mavsdk.rpc.telemetry.TelemetryResult"
    "result_str"
  }},
};

::uint8_t* TelemetryResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.TelemetryResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    const std::string& _s = this->_internal_result_str();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.telemetry.TelemetryResult.result_str");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.TelemetryResult)
  return target;
}

::size_t TelemetryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.TelemetryResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_result_str());
  }

  // .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TelemetryResult::_class_data_ = {
    TelemetryResult::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TelemetryResult::GetClassData() const {
  return &_class_data_;
}

void TelemetryResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TelemetryResult*>(&to_msg);
  auto& from = static_cast<const TelemetryResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.TelemetryResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryResult::CopyFrom(const TelemetryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.TelemetryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TelemetryResult::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TelemetryResult::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TelemetryResult::InternalSwap(TelemetryResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_str_, &other->_impl_.result_str_, arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata TelemetryResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2ftelemetry_2eproto_getter, &descriptor_table_telemetry_2ftelemetry_2eproto_once,
      file_level_metadata_telemetry_2ftelemetry_2eproto[153]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
