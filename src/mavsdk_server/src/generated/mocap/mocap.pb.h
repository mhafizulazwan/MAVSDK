// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mocap/mocap.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_mocap_2fmocap_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_mocap_2fmocap_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mocap_2fmocap_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_mocap_2fmocap_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_mocap_2fmocap_2eproto;
namespace mavsdk {
namespace rpc {
namespace mocap {
class AngleBody;
struct AngleBodyDefaultTypeInternal;
extern AngleBodyDefaultTypeInternal _AngleBody_default_instance_;
class AngularVelocityBody;
struct AngularVelocityBodyDefaultTypeInternal;
extern AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
class AttitudePositionMocap;
struct AttitudePositionMocapDefaultTypeInternal;
extern AttitudePositionMocapDefaultTypeInternal _AttitudePositionMocap_default_instance_;
class Covariance;
struct CovarianceDefaultTypeInternal;
extern CovarianceDefaultTypeInternal _Covariance_default_instance_;
class MocapResult;
struct MocapResultDefaultTypeInternal;
extern MocapResultDefaultTypeInternal _MocapResult_default_instance_;
class Odometry;
struct OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class PositionBody;
struct PositionBodyDefaultTypeInternal;
extern PositionBodyDefaultTypeInternal _PositionBody_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class SetAttitudePositionMocapRequest;
struct SetAttitudePositionMocapRequestDefaultTypeInternal;
extern SetAttitudePositionMocapRequestDefaultTypeInternal _SetAttitudePositionMocapRequest_default_instance_;
class SetAttitudePositionMocapResponse;
struct SetAttitudePositionMocapResponseDefaultTypeInternal;
extern SetAttitudePositionMocapResponseDefaultTypeInternal _SetAttitudePositionMocapResponse_default_instance_;
class SetOdometryRequest;
struct SetOdometryRequestDefaultTypeInternal;
extern SetOdometryRequestDefaultTypeInternal _SetOdometryRequest_default_instance_;
class SetOdometryResponse;
struct SetOdometryResponseDefaultTypeInternal;
extern SetOdometryResponseDefaultTypeInternal _SetOdometryResponse_default_instance_;
class SetVisionPositionEstimateRequest;
struct SetVisionPositionEstimateRequestDefaultTypeInternal;
extern SetVisionPositionEstimateRequestDefaultTypeInternal _SetVisionPositionEstimateRequest_default_instance_;
class SetVisionPositionEstimateResponse;
struct SetVisionPositionEstimateResponseDefaultTypeInternal;
extern SetVisionPositionEstimateResponseDefaultTypeInternal _SetVisionPositionEstimateResponse_default_instance_;
class SpeedBody;
struct SpeedBodyDefaultTypeInternal;
extern SpeedBodyDefaultTypeInternal _SpeedBody_default_instance_;
class VisionPositionEstimate;
struct VisionPositionEstimateDefaultTypeInternal;
extern VisionPositionEstimateDefaultTypeInternal _VisionPositionEstimate_default_instance_;
}  // namespace mocap
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mavsdk {
namespace rpc {
namespace mocap {
enum Odometry_MavFrame : int {
  Odometry_MavFrame_MAV_FRAME_MOCAP_NED = 0,
  Odometry_MavFrame_MAV_FRAME_LOCAL_FRD = 1,
  Odometry_MavFrame_Odometry_MavFrame_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Odometry_MavFrame_Odometry_MavFrame_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Odometry_MavFrame_IsValid(int value);
extern const uint32_t Odometry_MavFrame_internal_data_[];
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MIN = static_cast<Odometry_MavFrame>(0);
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MAX = static_cast<Odometry_MavFrame>(1);
constexpr int Odometry_MavFrame_MavFrame_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Odometry_MavFrame_descriptor();
template <typename T>
const std::string& Odometry_MavFrame_Name(T value) {
  static_assert(std::is_same<T, Odometry_MavFrame>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MavFrame_Name().");
  return Odometry_MavFrame_Name(static_cast<Odometry_MavFrame>(value));
}
template <>
inline const std::string& Odometry_MavFrame_Name(Odometry_MavFrame value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Odometry_MavFrame_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Odometry_MavFrame_Parse(absl::string_view name, Odometry_MavFrame* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Odometry_MavFrame>(
      Odometry_MavFrame_descriptor(), name, value);
}
enum MocapResult_Result : int {
  MocapResult_Result_RESULT_UNKNOWN = 0,
  MocapResult_Result_RESULT_SUCCESS = 1,
  MocapResult_Result_RESULT_NO_SYSTEM = 2,
  MocapResult_Result_RESULT_CONNECTION_ERROR = 3,
  MocapResult_Result_RESULT_INVALID_REQUEST_DATA = 4,
  MocapResult_Result_RESULT_UNSUPPORTED = 5,
  MocapResult_Result_MocapResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MocapResult_Result_MocapResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MocapResult_Result_IsValid(int value);
extern const uint32_t MocapResult_Result_internal_data_[];
constexpr MocapResult_Result MocapResult_Result_Result_MIN = static_cast<MocapResult_Result>(0);
constexpr MocapResult_Result MocapResult_Result_Result_MAX = static_cast<MocapResult_Result>(5);
constexpr int MocapResult_Result_Result_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
MocapResult_Result_descriptor();
template <typename T>
const std::string& MocapResult_Result_Name(T value) {
  static_assert(std::is_same<T, MocapResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return MocapResult_Result_Name(static_cast<MocapResult_Result>(value));
}
template <>
inline const std::string& MocapResult_Result_Name(MocapResult_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MocapResult_Result_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool MocapResult_Result_Parse(absl::string_view name, MocapResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MocapResult_Result>(
      MocapResult_Result_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SpeedBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SpeedBody) */ {
 public:
  inline SpeedBody() : SpeedBody(nullptr) {}
  ~SpeedBody() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SpeedBody(::google::protobuf::internal::ConstantInitialized);

  inline SpeedBody(const SpeedBody& from)
      : SpeedBody(nullptr, from) {}
  SpeedBody(SpeedBody&& from) noexcept
    : SpeedBody() {
    *this = ::std::move(from);
  }

  inline SpeedBody& operator=(const SpeedBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedBody& operator=(SpeedBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeedBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeedBody* internal_default_instance() {
    return reinterpret_cast<const SpeedBody*>(
               &_SpeedBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SpeedBody& a, SpeedBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeedBody* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeedBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpeedBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SpeedBody& from) {
    SpeedBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SpeedBody* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.SpeedBody";
  }
  protected:
  explicit SpeedBody(::google::protobuf::Arena* arena);
  SpeedBody(::google::protobuf::Arena* arena, const SpeedBody& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMSFieldNumber = 1,
    kYMSFieldNumber = 2,
    kZMSFieldNumber = 3,
  };
  // float x_m_s = 1;
  void clear_x_m_s() ;
  float x_m_s() const;
  void set_x_m_s(float value);

  private:
  float _internal_x_m_s() const;
  void _internal_set_x_m_s(float value);

  public:
  // float y_m_s = 2;
  void clear_y_m_s() ;
  float y_m_s() const;
  void set_y_m_s(float value);

  private:
  float _internal_y_m_s() const;
  void _internal_set_y_m_s(float value);

  public:
  // float z_m_s = 3;
  void clear_z_m_s() ;
  float z_m_s() const;
  void set_z_m_s(float value);

  private:
  float _internal_z_m_s() const;
  void _internal_set_z_m_s(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SpeedBody)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float x_m_s_;
    float y_m_s_;
    float z_m_s_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class Quaternion final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Quaternion(::google::protobuf::internal::ConstantInitialized);

  inline Quaternion(const Quaternion& from)
      : Quaternion(nullptr, from) {}
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Quaternion& from) {
    Quaternion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Quaternion* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.Quaternion";
  }
  protected:
  explicit Quaternion(::google::protobuf::Arena* arena);
  Quaternion(::google::protobuf::Arena* arena, const Quaternion& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w() ;
  float w() const;
  void set_w(float value);

  private:
  float _internal_w() const;
  void _internal_set_w(float value);

  public:
  // float x = 2;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 3;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 4;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.Quaternion)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float w_;
    float x_;
    float y_;
    float z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class PositionBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.PositionBody) */ {
 public:
  inline PositionBody() : PositionBody(nullptr) {}
  ~PositionBody() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PositionBody(::google::protobuf::internal::ConstantInitialized);

  inline PositionBody(const PositionBody& from)
      : PositionBody(nullptr, from) {}
  PositionBody(PositionBody&& from) noexcept
    : PositionBody() {
    *this = ::std::move(from);
  }

  inline PositionBody& operator=(const PositionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionBody& operator=(PositionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionBody* internal_default_instance() {
    return reinterpret_cast<const PositionBody*>(
               &_PositionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PositionBody& a, PositionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionBody* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PositionBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PositionBody& from) {
    PositionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PositionBody* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.PositionBody";
  }
  protected:
  explicit PositionBody(::google::protobuf::Arena* arena);
  PositionBody(::google::protobuf::Arena* arena, const PositionBody& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMFieldNumber = 1,
    kYMFieldNumber = 2,
    kZMFieldNumber = 3,
  };
  // float x_m = 1;
  void clear_x_m() ;
  float x_m() const;
  void set_x_m(float value);

  private:
  float _internal_x_m() const;
  void _internal_set_x_m(float value);

  public:
  // float y_m = 2;
  void clear_y_m() ;
  float y_m() const;
  void set_y_m(float value);

  private:
  float _internal_y_m() const;
  void _internal_set_y_m(float value);

  public:
  // float z_m = 3;
  void clear_z_m() ;
  float z_m() const;
  void set_z_m(float value);

  private:
  float _internal_z_m() const;
  void _internal_set_z_m(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.PositionBody)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float x_m_;
    float y_m_;
    float z_m_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class MocapResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.MocapResult) */ {
 public:
  inline MocapResult() : MocapResult(nullptr) {}
  ~MocapResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MocapResult(::google::protobuf::internal::ConstantInitialized);

  inline MocapResult(const MocapResult& from)
      : MocapResult(nullptr, from) {}
  MocapResult(MocapResult&& from) noexcept
    : MocapResult() {
    *this = ::std::move(from);
  }

  inline MocapResult& operator=(const MocapResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MocapResult& operator=(MocapResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MocapResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const MocapResult* internal_default_instance() {
    return reinterpret_cast<const MocapResult*>(
               &_MocapResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MocapResult& a, MocapResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MocapResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MocapResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MocapResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MocapResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MocapResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MocapResult& from) {
    MocapResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MocapResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.MocapResult";
  }
  protected:
  explicit MocapResult(::google::protobuf::Arena* arena);
  MocapResult(::google::protobuf::Arena* arena, const MocapResult& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Result = MocapResult_Result;
  static constexpr Result RESULT_UNKNOWN = MocapResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS = MocapResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM = MocapResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR = MocapResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_INVALID_REQUEST_DATA = MocapResult_Result_RESULT_INVALID_REQUEST_DATA;
  static constexpr Result RESULT_UNSUPPORTED = MocapResult_Result_RESULT_UNSUPPORTED;
  static inline bool Result_IsValid(int value) {
    return MocapResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = MocapResult_Result_Result_MIN;
  static constexpr Result Result_MAX = MocapResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = MocapResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return MocapResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return MocapResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return MocapResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str() ;
  const std::string& result_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_str(Arg_&& arg, Args_... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* value);

  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(
      const std::string& value);
  std::string* _internal_mutable_result_str();

  public:
  // .mavsdk.rpc.mocap.MocapResult.Result result = 1;
  void clear_result() ;
  ::mavsdk::rpc::mocap::MocapResult_Result result() const;
  void set_result(::mavsdk::rpc::mocap::MocapResult_Result value);

  private:
  ::mavsdk::rpc::mocap::MocapResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::mocap::MocapResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.MocapResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class Covariance final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.Covariance) */ {
 public:
  inline Covariance() : Covariance(nullptr) {}
  ~Covariance() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Covariance(::google::protobuf::internal::ConstantInitialized);

  inline Covariance(const Covariance& from)
      : Covariance(nullptr, from) {}
  Covariance(Covariance&& from) noexcept
    : Covariance() {
    *this = ::std::move(from);
  }

  inline Covariance& operator=(const Covariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Covariance& operator=(Covariance&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Covariance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Covariance* internal_default_instance() {
    return reinterpret_cast<const Covariance*>(
               &_Covariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Covariance& a, Covariance& b) {
    a.Swap(&b);
  }
  inline void Swap(Covariance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Covariance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Covariance* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Covariance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Covariance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Covariance& from) {
    Covariance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Covariance* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.Covariance";
  }
  protected:
  explicit Covariance(::google::protobuf::Arena* arena);
  Covariance(::google::protobuf::Arena* arena, const Covariance& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceMatrixFieldNumber = 1,
  };
  // repeated float covariance_matrix = 1;
  int covariance_matrix_size() const;
  private:
  int _internal_covariance_matrix_size() const;

  public:
  void clear_covariance_matrix() ;
  float covariance_matrix(int index) const;
  void set_covariance_matrix(int index, float value);
  void add_covariance_matrix(float value);
  const ::google::protobuf::RepeatedField<float>& covariance_matrix() const;
  ::google::protobuf::RepeatedField<float>* mutable_covariance_matrix();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_covariance_matrix() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_covariance_matrix();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.Covariance)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<float> covariance_matrix_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class AngularVelocityBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.AngularVelocityBody) */ {
 public:
  inline AngularVelocityBody() : AngularVelocityBody(nullptr) {}
  ~AngularVelocityBody() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AngularVelocityBody(::google::protobuf::internal::ConstantInitialized);

  inline AngularVelocityBody(const AngularVelocityBody& from)
      : AngularVelocityBody(nullptr, from) {}
  AngularVelocityBody(AngularVelocityBody&& from) noexcept
    : AngularVelocityBody() {
    *this = ::std::move(from);
  }

  inline AngularVelocityBody& operator=(const AngularVelocityBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocityBody& operator=(AngularVelocityBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngularVelocityBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngularVelocityBody* internal_default_instance() {
    return reinterpret_cast<const AngularVelocityBody*>(
               &_AngularVelocityBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AngularVelocityBody& a, AngularVelocityBody& b) {
    a.Swap(&b);
  }
  inline void Swap(AngularVelocityBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularVelocityBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngularVelocityBody* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AngularVelocityBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AngularVelocityBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AngularVelocityBody& from) {
    AngularVelocityBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AngularVelocityBody* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.AngularVelocityBody";
  }
  protected:
  explicit AngularVelocityBody(::google::protobuf::Arena* arena);
  AngularVelocityBody(::google::protobuf::Arena* arena, const AngularVelocityBody& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollRadSFieldNumber = 1,
    kPitchRadSFieldNumber = 2,
    kYawRadSFieldNumber = 3,
  };
  // float roll_rad_s = 1;
  void clear_roll_rad_s() ;
  float roll_rad_s() const;
  void set_roll_rad_s(float value);

  private:
  float _internal_roll_rad_s() const;
  void _internal_set_roll_rad_s(float value);

  public:
  // float pitch_rad_s = 2;
  void clear_pitch_rad_s() ;
  float pitch_rad_s() const;
  void set_pitch_rad_s(float value);

  private:
  float _internal_pitch_rad_s() const;
  void _internal_set_pitch_rad_s(float value);

  public:
  // float yaw_rad_s = 3;
  void clear_yaw_rad_s() ;
  float yaw_rad_s() const;
  void set_yaw_rad_s(float value);

  private:
  float _internal_yaw_rad_s() const;
  void _internal_set_yaw_rad_s(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.AngularVelocityBody)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float roll_rad_s_;
    float pitch_rad_s_;
    float yaw_rad_s_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class AngleBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.AngleBody) */ {
 public:
  inline AngleBody() : AngleBody(nullptr) {}
  ~AngleBody() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AngleBody(::google::protobuf::internal::ConstantInitialized);

  inline AngleBody(const AngleBody& from)
      : AngleBody(nullptr, from) {}
  AngleBody(AngleBody&& from) noexcept
    : AngleBody() {
    *this = ::std::move(from);
  }

  inline AngleBody& operator=(const AngleBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngleBody& operator=(AngleBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngleBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngleBody* internal_default_instance() {
    return reinterpret_cast<const AngleBody*>(
               &_AngleBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AngleBody& a, AngleBody& b) {
    a.Swap(&b);
  }
  inline void Swap(AngleBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngleBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngleBody* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AngleBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AngleBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AngleBody& from) {
    AngleBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AngleBody* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.AngleBody";
  }
  protected:
  explicit AngleBody(::google::protobuf::Arena* arena);
  AngleBody(::google::protobuf::Arena* arena, const AngleBody& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollRadFieldNumber = 1,
    kPitchRadFieldNumber = 2,
    kYawRadFieldNumber = 3,
  };
  // float roll_rad = 1;
  void clear_roll_rad() ;
  float roll_rad() const;
  void set_roll_rad(float value);

  private:
  float _internal_roll_rad() const;
  void _internal_set_roll_rad(float value);

  public:
  // float pitch_rad = 2;
  void clear_pitch_rad() ;
  float pitch_rad() const;
  void set_pitch_rad(float value);

  private:
  float _internal_pitch_rad() const;
  void _internal_set_pitch_rad(float value);

  public:
  // float yaw_rad = 3;
  void clear_yaw_rad() ;
  float yaw_rad() const;
  void set_yaw_rad(float value);

  private:
  float _internal_yaw_rad() const;
  void _internal_set_yaw_rad(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.AngleBody)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float roll_rad_;
    float pitch_rad_;
    float yaw_rad_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class VisionPositionEstimate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.VisionPositionEstimate) */ {
 public:
  inline VisionPositionEstimate() : VisionPositionEstimate(nullptr) {}
  ~VisionPositionEstimate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VisionPositionEstimate(::google::protobuf::internal::ConstantInitialized);

  inline VisionPositionEstimate(const VisionPositionEstimate& from)
      : VisionPositionEstimate(nullptr, from) {}
  VisionPositionEstimate(VisionPositionEstimate&& from) noexcept
    : VisionPositionEstimate() {
    *this = ::std::move(from);
  }

  inline VisionPositionEstimate& operator=(const VisionPositionEstimate& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisionPositionEstimate& operator=(VisionPositionEstimate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisionPositionEstimate& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisionPositionEstimate* internal_default_instance() {
    return reinterpret_cast<const VisionPositionEstimate*>(
               &_VisionPositionEstimate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VisionPositionEstimate& a, VisionPositionEstimate& b) {
    a.Swap(&b);
  }
  inline void Swap(VisionPositionEstimate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisionPositionEstimate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisionPositionEstimate* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisionPositionEstimate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VisionPositionEstimate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VisionPositionEstimate& from) {
    VisionPositionEstimate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VisionPositionEstimate* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.VisionPositionEstimate";
  }
  protected:
  explicit VisionPositionEstimate(::google::protobuf::Arena* arena);
  VisionPositionEstimate(::google::protobuf::Arena* arena, const VisionPositionEstimate& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionBodyFieldNumber = 2,
    kAngleBodyFieldNumber = 3,
    kPoseCovarianceFieldNumber = 4,
    kTimeUsecFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.PositionBody position_body = 2;
  bool has_position_body() const;
  void clear_position_body() ;
  const ::mavsdk::rpc::mocap::PositionBody& position_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::PositionBody* release_position_body();
  ::mavsdk::rpc::mocap::PositionBody* mutable_position_body();
  void set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value);
  void unsafe_arena_set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value);
  ::mavsdk::rpc::mocap::PositionBody* unsafe_arena_release_position_body();

  private:
  const ::mavsdk::rpc::mocap::PositionBody& _internal_position_body() const;
  ::mavsdk::rpc::mocap::PositionBody* _internal_mutable_position_body();

  public:
  // .mavsdk.rpc.mocap.AngleBody angle_body = 3;
  bool has_angle_body() const;
  void clear_angle_body() ;
  const ::mavsdk::rpc::mocap::AngleBody& angle_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::AngleBody* release_angle_body();
  ::mavsdk::rpc::mocap::AngleBody* mutable_angle_body();
  void set_allocated_angle_body(::mavsdk::rpc::mocap::AngleBody* value);
  void unsafe_arena_set_allocated_angle_body(::mavsdk::rpc::mocap::AngleBody* value);
  ::mavsdk::rpc::mocap::AngleBody* unsafe_arena_release_angle_body();

  private:
  const ::mavsdk::rpc::mocap::AngleBody& _internal_angle_body() const;
  ::mavsdk::rpc::mocap::AngleBody* _internal_mutable_angle_body();

  public:
  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  bool has_pose_covariance() const;
  void clear_pose_covariance() ;
  const ::mavsdk::rpc::mocap::Covariance& pose_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Covariance* release_pose_covariance();
  ::mavsdk::rpc::mocap::Covariance* mutable_pose_covariance();
  void set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value);
  void unsafe_arena_set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value);
  ::mavsdk::rpc::mocap::Covariance* unsafe_arena_release_pose_covariance();

  private:
  const ::mavsdk::rpc::mocap::Covariance& _internal_pose_covariance() const;
  ::mavsdk::rpc::mocap::Covariance* _internal_mutable_pose_covariance();

  public:
  // uint64 time_usec = 1;
  void clear_time_usec() ;
  ::uint64_t time_usec() const;
  void set_time_usec(::uint64_t value);

  private:
  ::uint64_t _internal_time_usec() const;
  void _internal_set_time_usec(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.VisionPositionEstimate)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::mocap::PositionBody* position_body_;
    ::mavsdk::rpc::mocap::AngleBody* angle_body_;
    ::mavsdk::rpc::mocap::Covariance* pose_covariance_;
    ::uint64_t time_usec_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class SetVisionPositionEstimateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse) */ {
 public:
  inline SetVisionPositionEstimateResponse() : SetVisionPositionEstimateResponse(nullptr) {}
  ~SetVisionPositionEstimateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetVisionPositionEstimateResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetVisionPositionEstimateResponse(const SetVisionPositionEstimateResponse& from)
      : SetVisionPositionEstimateResponse(nullptr, from) {}
  SetVisionPositionEstimateResponse(SetVisionPositionEstimateResponse&& from) noexcept
    : SetVisionPositionEstimateResponse() {
    *this = ::std::move(from);
  }

  inline SetVisionPositionEstimateResponse& operator=(const SetVisionPositionEstimateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVisionPositionEstimateResponse& operator=(SetVisionPositionEstimateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVisionPositionEstimateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVisionPositionEstimateResponse* internal_default_instance() {
    return reinterpret_cast<const SetVisionPositionEstimateResponse*>(
               &_SetVisionPositionEstimateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetVisionPositionEstimateResponse& a, SetVisionPositionEstimateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVisionPositionEstimateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVisionPositionEstimateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVisionPositionEstimateResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVisionPositionEstimateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetVisionPositionEstimateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetVisionPositionEstimateResponse& from) {
    SetVisionPositionEstimateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetVisionPositionEstimateResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.SetVisionPositionEstimateResponse";
  }
  protected:
  explicit SetVisionPositionEstimateResponse(::google::protobuf::Arena* arena);
  SetVisionPositionEstimateResponse(::google::protobuf::Arena* arena, const SetVisionPositionEstimateResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMocapResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  bool has_mocap_result() const;
  void clear_mocap_result() ;
  const ::mavsdk::rpc::mocap::MocapResult& mocap_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::MocapResult* release_mocap_result();
  ::mavsdk::rpc::mocap::MocapResult* mutable_mocap_result();
  void set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value);
  void unsafe_arena_set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value);
  ::mavsdk::rpc::mocap::MocapResult* unsafe_arena_release_mocap_result();

  private:
  const ::mavsdk::rpc::mocap::MocapResult& _internal_mocap_result() const;
  ::mavsdk::rpc::mocap::MocapResult* _internal_mutable_mocap_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::mocap::MocapResult* mocap_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class SetOdometryResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetOdometryResponse) */ {
 public:
  inline SetOdometryResponse() : SetOdometryResponse(nullptr) {}
  ~SetOdometryResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetOdometryResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetOdometryResponse(const SetOdometryResponse& from)
      : SetOdometryResponse(nullptr, from) {}
  SetOdometryResponse(SetOdometryResponse&& from) noexcept
    : SetOdometryResponse() {
    *this = ::std::move(from);
  }

  inline SetOdometryResponse& operator=(const SetOdometryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetOdometryResponse& operator=(SetOdometryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetOdometryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetOdometryResponse* internal_default_instance() {
    return reinterpret_cast<const SetOdometryResponse*>(
               &_SetOdometryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetOdometryResponse& a, SetOdometryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetOdometryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetOdometryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetOdometryResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetOdometryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetOdometryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetOdometryResponse& from) {
    SetOdometryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetOdometryResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.SetOdometryResponse";
  }
  protected:
  explicit SetOdometryResponse(::google::protobuf::Arena* arena);
  SetOdometryResponse(::google::protobuf::Arena* arena, const SetOdometryResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMocapResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  bool has_mocap_result() const;
  void clear_mocap_result() ;
  const ::mavsdk::rpc::mocap::MocapResult& mocap_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::MocapResult* release_mocap_result();
  ::mavsdk::rpc::mocap::MocapResult* mutable_mocap_result();
  void set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value);
  void unsafe_arena_set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value);
  ::mavsdk::rpc::mocap::MocapResult* unsafe_arena_release_mocap_result();

  private:
  const ::mavsdk::rpc::mocap::MocapResult& _internal_mocap_result() const;
  ::mavsdk::rpc::mocap::MocapResult* _internal_mutable_mocap_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetOdometryResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::mocap::MocapResult* mocap_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class SetAttitudePositionMocapResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse) */ {
 public:
  inline SetAttitudePositionMocapResponse() : SetAttitudePositionMocapResponse(nullptr) {}
  ~SetAttitudePositionMocapResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetAttitudePositionMocapResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetAttitudePositionMocapResponse(const SetAttitudePositionMocapResponse& from)
      : SetAttitudePositionMocapResponse(nullptr, from) {}
  SetAttitudePositionMocapResponse(SetAttitudePositionMocapResponse&& from) noexcept
    : SetAttitudePositionMocapResponse() {
    *this = ::std::move(from);
  }

  inline SetAttitudePositionMocapResponse& operator=(const SetAttitudePositionMocapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudePositionMocapResponse& operator=(SetAttitudePositionMocapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAttitudePositionMocapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAttitudePositionMocapResponse* internal_default_instance() {
    return reinterpret_cast<const SetAttitudePositionMocapResponse*>(
               &_SetAttitudePositionMocapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetAttitudePositionMocapResponse& a, SetAttitudePositionMocapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudePositionMocapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAttitudePositionMocapResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAttitudePositionMocapResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAttitudePositionMocapResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetAttitudePositionMocapResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetAttitudePositionMocapResponse& from) {
    SetAttitudePositionMocapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetAttitudePositionMocapResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.SetAttitudePositionMocapResponse";
  }
  protected:
  explicit SetAttitudePositionMocapResponse(::google::protobuf::Arena* arena);
  SetAttitudePositionMocapResponse(::google::protobuf::Arena* arena, const SetAttitudePositionMocapResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMocapResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
  bool has_mocap_result() const;
  void clear_mocap_result() ;
  const ::mavsdk::rpc::mocap::MocapResult& mocap_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::MocapResult* release_mocap_result();
  ::mavsdk::rpc::mocap::MocapResult* mutable_mocap_result();
  void set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value);
  void unsafe_arena_set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value);
  ::mavsdk::rpc::mocap::MocapResult* unsafe_arena_release_mocap_result();

  private:
  const ::mavsdk::rpc::mocap::MocapResult& _internal_mocap_result() const;
  ::mavsdk::rpc::mocap::MocapResult* _internal_mutable_mocap_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::mocap::MocapResult* mocap_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class Odometry final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {}
  ~Odometry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Odometry(::google::protobuf::internal::ConstantInitialized);

  inline Odometry(const Odometry& from)
      : Odometry(nullptr, from) {}
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Odometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Odometry* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Odometry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Odometry& from) {
    Odometry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Odometry* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.Odometry";
  }
  protected:
  explicit Odometry(::google::protobuf::Arena* arena);
  Odometry(::google::protobuf::Arena* arena, const Odometry& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using MavFrame = Odometry_MavFrame;
  static constexpr MavFrame MAV_FRAME_MOCAP_NED = Odometry_MavFrame_MAV_FRAME_MOCAP_NED;
  static constexpr MavFrame MAV_FRAME_LOCAL_FRD = Odometry_MavFrame_MAV_FRAME_LOCAL_FRD;
  static inline bool MavFrame_IsValid(int value) {
    return Odometry_MavFrame_IsValid(value);
  }
  static constexpr MavFrame MavFrame_MIN = Odometry_MavFrame_MavFrame_MIN;
  static constexpr MavFrame MavFrame_MAX = Odometry_MavFrame_MavFrame_MAX;
  static constexpr int MavFrame_ARRAYSIZE = Odometry_MavFrame_MavFrame_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MavFrame_descriptor() {
    return Odometry_MavFrame_descriptor();
  }
  template <typename T>
  static inline const std::string& MavFrame_Name(T value) {
    return Odometry_MavFrame_Name(value);
  }
  static inline bool MavFrame_Parse(absl::string_view name, MavFrame* value) {
    return Odometry_MavFrame_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionBodyFieldNumber = 3,
    kQFieldNumber = 4,
    kSpeedBodyFieldNumber = 5,
    kAngularVelocityBodyFieldNumber = 6,
    kPoseCovarianceFieldNumber = 7,
    kVelocityCovarianceFieldNumber = 8,
    kTimeUsecFieldNumber = 1,
    kFrameIdFieldNumber = 2,
  };
  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  bool has_position_body() const;
  void clear_position_body() ;
  const ::mavsdk::rpc::mocap::PositionBody& position_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::PositionBody* release_position_body();
  ::mavsdk::rpc::mocap::PositionBody* mutable_position_body();
  void set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value);
  void unsafe_arena_set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value);
  ::mavsdk::rpc::mocap::PositionBody* unsafe_arena_release_position_body();

  private:
  const ::mavsdk::rpc::mocap::PositionBody& _internal_position_body() const;
  ::mavsdk::rpc::mocap::PositionBody* _internal_mutable_position_body();

  public:
  // .mavsdk.rpc.mocap.Quaternion q = 4;
  bool has_q() const;
  void clear_q() ;
  const ::mavsdk::rpc::mocap::Quaternion& q() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Quaternion* release_q();
  ::mavsdk::rpc::mocap::Quaternion* mutable_q();
  void set_allocated_q(::mavsdk::rpc::mocap::Quaternion* value);
  void unsafe_arena_set_allocated_q(::mavsdk::rpc::mocap::Quaternion* value);
  ::mavsdk::rpc::mocap::Quaternion* unsafe_arena_release_q();

  private:
  const ::mavsdk::rpc::mocap::Quaternion& _internal_q() const;
  ::mavsdk::rpc::mocap::Quaternion* _internal_mutable_q();

  public:
  // .mavsdk.rpc.mocap.SpeedBody speed_body = 5;
  bool has_speed_body() const;
  void clear_speed_body() ;
  const ::mavsdk::rpc::mocap::SpeedBody& speed_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::SpeedBody* release_speed_body();
  ::mavsdk::rpc::mocap::SpeedBody* mutable_speed_body();
  void set_allocated_speed_body(::mavsdk::rpc::mocap::SpeedBody* value);
  void unsafe_arena_set_allocated_speed_body(::mavsdk::rpc::mocap::SpeedBody* value);
  ::mavsdk::rpc::mocap::SpeedBody* unsafe_arena_release_speed_body();

  private:
  const ::mavsdk::rpc::mocap::SpeedBody& _internal_speed_body() const;
  ::mavsdk::rpc::mocap::SpeedBody* _internal_mutable_speed_body();

  public:
  // .mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;
  bool has_angular_velocity_body() const;
  void clear_angular_velocity_body() ;
  const ::mavsdk::rpc::mocap::AngularVelocityBody& angular_velocity_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::AngularVelocityBody* release_angular_velocity_body();
  ::mavsdk::rpc::mocap::AngularVelocityBody* mutable_angular_velocity_body();
  void set_allocated_angular_velocity_body(::mavsdk::rpc::mocap::AngularVelocityBody* value);
  void unsafe_arena_set_allocated_angular_velocity_body(::mavsdk::rpc::mocap::AngularVelocityBody* value);
  ::mavsdk::rpc::mocap::AngularVelocityBody* unsafe_arena_release_angular_velocity_body();

  private:
  const ::mavsdk::rpc::mocap::AngularVelocityBody& _internal_angular_velocity_body() const;
  ::mavsdk::rpc::mocap::AngularVelocityBody* _internal_mutable_angular_velocity_body();

  public:
  // .mavsdk.rpc.mocap.Covariance pose_covariance = 7;
  bool has_pose_covariance() const;
  void clear_pose_covariance() ;
  const ::mavsdk::rpc::mocap::Covariance& pose_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Covariance* release_pose_covariance();
  ::mavsdk::rpc::mocap::Covariance* mutable_pose_covariance();
  void set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value);
  void unsafe_arena_set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value);
  ::mavsdk::rpc::mocap::Covariance* unsafe_arena_release_pose_covariance();

  private:
  const ::mavsdk::rpc::mocap::Covariance& _internal_pose_covariance() const;
  ::mavsdk::rpc::mocap::Covariance* _internal_mutable_pose_covariance();

  public:
  // .mavsdk.rpc.mocap.Covariance velocity_covariance = 8;
  bool has_velocity_covariance() const;
  void clear_velocity_covariance() ;
  const ::mavsdk::rpc::mocap::Covariance& velocity_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Covariance* release_velocity_covariance();
  ::mavsdk::rpc::mocap::Covariance* mutable_velocity_covariance();
  void set_allocated_velocity_covariance(::mavsdk::rpc::mocap::Covariance* value);
  void unsafe_arena_set_allocated_velocity_covariance(::mavsdk::rpc::mocap::Covariance* value);
  ::mavsdk::rpc::mocap::Covariance* unsafe_arena_release_velocity_covariance();

  private:
  const ::mavsdk::rpc::mocap::Covariance& _internal_velocity_covariance() const;
  ::mavsdk::rpc::mocap::Covariance* _internal_mutable_velocity_covariance();

  public:
  // uint64 time_usec = 1;
  void clear_time_usec() ;
  ::uint64_t time_usec() const;
  void set_time_usec(::uint64_t value);

  private:
  ::uint64_t _internal_time_usec() const;
  void _internal_set_time_usec(::uint64_t value);

  public:
  // .mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;
  void clear_frame_id() ;
  ::mavsdk::rpc::mocap::Odometry_MavFrame frame_id() const;
  void set_frame_id(::mavsdk::rpc::mocap::Odometry_MavFrame value);

  private:
  ::mavsdk::rpc::mocap::Odometry_MavFrame _internal_frame_id() const;
  void _internal_set_frame_id(::mavsdk::rpc::mocap::Odometry_MavFrame value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.Odometry)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 6,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::mocap::PositionBody* position_body_;
    ::mavsdk::rpc::mocap::Quaternion* q_;
    ::mavsdk::rpc::mocap::SpeedBody* speed_body_;
    ::mavsdk::rpc::mocap::AngularVelocityBody* angular_velocity_body_;
    ::mavsdk::rpc::mocap::Covariance* pose_covariance_;
    ::mavsdk::rpc::mocap::Covariance* velocity_covariance_;
    ::uint64_t time_usec_;
    int frame_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class AttitudePositionMocap final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.AttitudePositionMocap) */ {
 public:
  inline AttitudePositionMocap() : AttitudePositionMocap(nullptr) {}
  ~AttitudePositionMocap() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttitudePositionMocap(::google::protobuf::internal::ConstantInitialized);

  inline AttitudePositionMocap(const AttitudePositionMocap& from)
      : AttitudePositionMocap(nullptr, from) {}
  AttitudePositionMocap(AttitudePositionMocap&& from) noexcept
    : AttitudePositionMocap() {
    *this = ::std::move(from);
  }

  inline AttitudePositionMocap& operator=(const AttitudePositionMocap& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudePositionMocap& operator=(AttitudePositionMocap&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttitudePositionMocap& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttitudePositionMocap* internal_default_instance() {
    return reinterpret_cast<const AttitudePositionMocap*>(
               &_AttitudePositionMocap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AttitudePositionMocap& a, AttitudePositionMocap& b) {
    a.Swap(&b);
  }
  inline void Swap(AttitudePositionMocap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttitudePositionMocap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttitudePositionMocap* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttitudePositionMocap>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttitudePositionMocap& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttitudePositionMocap& from) {
    AttitudePositionMocap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttitudePositionMocap* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.AttitudePositionMocap";
  }
  protected:
  explicit AttitudePositionMocap(::google::protobuf::Arena* arena);
  AttitudePositionMocap(::google::protobuf::Arena* arena, const AttitudePositionMocap& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 2,
    kPositionBodyFieldNumber = 3,
    kPoseCovarianceFieldNumber = 4,
    kTimeUsecFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.Quaternion q = 2;
  bool has_q() const;
  void clear_q() ;
  const ::mavsdk::rpc::mocap::Quaternion& q() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Quaternion* release_q();
  ::mavsdk::rpc::mocap::Quaternion* mutable_q();
  void set_allocated_q(::mavsdk::rpc::mocap::Quaternion* value);
  void unsafe_arena_set_allocated_q(::mavsdk::rpc::mocap::Quaternion* value);
  ::mavsdk::rpc::mocap::Quaternion* unsafe_arena_release_q();

  private:
  const ::mavsdk::rpc::mocap::Quaternion& _internal_q() const;
  ::mavsdk::rpc::mocap::Quaternion* _internal_mutable_q();

  public:
  // .mavsdk.rpc.mocap.PositionBody position_body = 3;
  bool has_position_body() const;
  void clear_position_body() ;
  const ::mavsdk::rpc::mocap::PositionBody& position_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::PositionBody* release_position_body();
  ::mavsdk::rpc::mocap::PositionBody* mutable_position_body();
  void set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value);
  void unsafe_arena_set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value);
  ::mavsdk::rpc::mocap::PositionBody* unsafe_arena_release_position_body();

  private:
  const ::mavsdk::rpc::mocap::PositionBody& _internal_position_body() const;
  ::mavsdk::rpc::mocap::PositionBody* _internal_mutable_position_body();

  public:
  // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
  bool has_pose_covariance() const;
  void clear_pose_covariance() ;
  const ::mavsdk::rpc::mocap::Covariance& pose_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Covariance* release_pose_covariance();
  ::mavsdk::rpc::mocap::Covariance* mutable_pose_covariance();
  void set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value);
  void unsafe_arena_set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value);
  ::mavsdk::rpc::mocap::Covariance* unsafe_arena_release_pose_covariance();

  private:
  const ::mavsdk::rpc::mocap::Covariance& _internal_pose_covariance() const;
  ::mavsdk::rpc::mocap::Covariance* _internal_mutable_pose_covariance();

  public:
  // uint64 time_usec = 1;
  void clear_time_usec() ;
  ::uint64_t time_usec() const;
  void set_time_usec(::uint64_t value);

  private:
  ::uint64_t _internal_time_usec() const;
  void _internal_set_time_usec(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.AttitudePositionMocap)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::mocap::Quaternion* q_;
    ::mavsdk::rpc::mocap::PositionBody* position_body_;
    ::mavsdk::rpc::mocap::Covariance* pose_covariance_;
    ::uint64_t time_usec_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class SetVisionPositionEstimateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest) */ {
 public:
  inline SetVisionPositionEstimateRequest() : SetVisionPositionEstimateRequest(nullptr) {}
  ~SetVisionPositionEstimateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetVisionPositionEstimateRequest(::google::protobuf::internal::ConstantInitialized);

  inline SetVisionPositionEstimateRequest(const SetVisionPositionEstimateRequest& from)
      : SetVisionPositionEstimateRequest(nullptr, from) {}
  SetVisionPositionEstimateRequest(SetVisionPositionEstimateRequest&& from) noexcept
    : SetVisionPositionEstimateRequest() {
    *this = ::std::move(from);
  }

  inline SetVisionPositionEstimateRequest& operator=(const SetVisionPositionEstimateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVisionPositionEstimateRequest& operator=(SetVisionPositionEstimateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVisionPositionEstimateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVisionPositionEstimateRequest* internal_default_instance() {
    return reinterpret_cast<const SetVisionPositionEstimateRequest*>(
               &_SetVisionPositionEstimateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetVisionPositionEstimateRequest& a, SetVisionPositionEstimateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVisionPositionEstimateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVisionPositionEstimateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVisionPositionEstimateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVisionPositionEstimateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetVisionPositionEstimateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetVisionPositionEstimateRequest& from) {
    SetVisionPositionEstimateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetVisionPositionEstimateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.SetVisionPositionEstimateRequest";
  }
  protected:
  explicit SetVisionPositionEstimateRequest(::google::protobuf::Arena* arena);
  SetVisionPositionEstimateRequest(::google::protobuf::Arena* arena, const SetVisionPositionEstimateRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisionPositionEstimateFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.VisionPositionEstimate vision_position_estimate = 1;
  bool has_vision_position_estimate() const;
  void clear_vision_position_estimate() ;
  const ::mavsdk::rpc::mocap::VisionPositionEstimate& vision_position_estimate() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::VisionPositionEstimate* release_vision_position_estimate();
  ::mavsdk::rpc::mocap::VisionPositionEstimate* mutable_vision_position_estimate();
  void set_allocated_vision_position_estimate(::mavsdk::rpc::mocap::VisionPositionEstimate* value);
  void unsafe_arena_set_allocated_vision_position_estimate(::mavsdk::rpc::mocap::VisionPositionEstimate* value);
  ::mavsdk::rpc::mocap::VisionPositionEstimate* unsafe_arena_release_vision_position_estimate();

  private:
  const ::mavsdk::rpc::mocap::VisionPositionEstimate& _internal_vision_position_estimate() const;
  ::mavsdk::rpc::mocap::VisionPositionEstimate* _internal_mutable_vision_position_estimate();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::mocap::VisionPositionEstimate* vision_position_estimate_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class SetOdometryRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetOdometryRequest) */ {
 public:
  inline SetOdometryRequest() : SetOdometryRequest(nullptr) {}
  ~SetOdometryRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetOdometryRequest(::google::protobuf::internal::ConstantInitialized);

  inline SetOdometryRequest(const SetOdometryRequest& from)
      : SetOdometryRequest(nullptr, from) {}
  SetOdometryRequest(SetOdometryRequest&& from) noexcept
    : SetOdometryRequest() {
    *this = ::std::move(from);
  }

  inline SetOdometryRequest& operator=(const SetOdometryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetOdometryRequest& operator=(SetOdometryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetOdometryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetOdometryRequest* internal_default_instance() {
    return reinterpret_cast<const SetOdometryRequest*>(
               &_SetOdometryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetOdometryRequest& a, SetOdometryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetOdometryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetOdometryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetOdometryRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetOdometryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetOdometryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetOdometryRequest& from) {
    SetOdometryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetOdometryRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.SetOdometryRequest";
  }
  protected:
  explicit SetOdometryRequest(::google::protobuf::Arena* arena);
  SetOdometryRequest(::google::protobuf::Arena* arena, const SetOdometryRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOdometryFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.Odometry odometry = 1;
  bool has_odometry() const;
  void clear_odometry() ;
  const ::mavsdk::rpc::mocap::Odometry& odometry() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::Odometry* release_odometry();
  ::mavsdk::rpc::mocap::Odometry* mutable_odometry();
  void set_allocated_odometry(::mavsdk::rpc::mocap::Odometry* value);
  void unsafe_arena_set_allocated_odometry(::mavsdk::rpc::mocap::Odometry* value);
  ::mavsdk::rpc::mocap::Odometry* unsafe_arena_release_odometry();

  private:
  const ::mavsdk::rpc::mocap::Odometry& _internal_odometry() const;
  ::mavsdk::rpc::mocap::Odometry* _internal_mutable_odometry();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetOdometryRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::mocap::Odometry* odometry_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};// -------------------------------------------------------------------

class SetAttitudePositionMocapRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest) */ {
 public:
  inline SetAttitudePositionMocapRequest() : SetAttitudePositionMocapRequest(nullptr) {}
  ~SetAttitudePositionMocapRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetAttitudePositionMocapRequest(::google::protobuf::internal::ConstantInitialized);

  inline SetAttitudePositionMocapRequest(const SetAttitudePositionMocapRequest& from)
      : SetAttitudePositionMocapRequest(nullptr, from) {}
  SetAttitudePositionMocapRequest(SetAttitudePositionMocapRequest&& from) noexcept
    : SetAttitudePositionMocapRequest() {
    *this = ::std::move(from);
  }

  inline SetAttitudePositionMocapRequest& operator=(const SetAttitudePositionMocapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttitudePositionMocapRequest& operator=(SetAttitudePositionMocapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAttitudePositionMocapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAttitudePositionMocapRequest* internal_default_instance() {
    return reinterpret_cast<const SetAttitudePositionMocapRequest*>(
               &_SetAttitudePositionMocapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetAttitudePositionMocapRequest& a, SetAttitudePositionMocapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttitudePositionMocapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAttitudePositionMocapRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAttitudePositionMocapRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAttitudePositionMocapRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetAttitudePositionMocapRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetAttitudePositionMocapRequest& from) {
    SetAttitudePositionMocapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetAttitudePositionMocapRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.mocap.SetAttitudePositionMocapRequest";
  }
  protected:
  explicit SetAttitudePositionMocapRequest(::google::protobuf::Arena* arena);
  SetAttitudePositionMocapRequest(::google::protobuf::Arena* arena, const SetAttitudePositionMocapRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudePositionMocapFieldNumber = 1,
  };
  // .mavsdk.rpc.mocap.AttitudePositionMocap attitude_position_mocap = 1;
  bool has_attitude_position_mocap() const;
  void clear_attitude_position_mocap() ;
  const ::mavsdk::rpc::mocap::AttitudePositionMocap& attitude_position_mocap() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::mocap::AttitudePositionMocap* release_attitude_position_mocap();
  ::mavsdk::rpc::mocap::AttitudePositionMocap* mutable_attitude_position_mocap();
  void set_allocated_attitude_position_mocap(::mavsdk::rpc::mocap::AttitudePositionMocap* value);
  void unsafe_arena_set_allocated_attitude_position_mocap(::mavsdk::rpc::mocap::AttitudePositionMocap* value);
  ::mavsdk::rpc::mocap::AttitudePositionMocap* unsafe_arena_release_attitude_position_mocap();

  private:
  const ::mavsdk::rpc::mocap::AttitudePositionMocap& _internal_attitude_position_mocap() const;
  ::mavsdk::rpc::mocap::AttitudePositionMocap* _internal_mutable_attitude_position_mocap();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::mocap::AttitudePositionMocap* attitude_position_mocap_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mocap_2fmocap_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SetVisionPositionEstimateRequest

// .mavsdk.rpc.mocap.VisionPositionEstimate vision_position_estimate = 1;
inline bool SetVisionPositionEstimateRequest::has_vision_position_estimate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vision_position_estimate_ != nullptr);
  return value;
}
inline void SetVisionPositionEstimateRequest::clear_vision_position_estimate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vision_position_estimate_ != nullptr) _impl_.vision_position_estimate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::mocap::VisionPositionEstimate& SetVisionPositionEstimateRequest::_internal_vision_position_estimate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::VisionPositionEstimate* p = _impl_.vision_position_estimate_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::VisionPositionEstimate&>(::mavsdk::rpc::mocap::_VisionPositionEstimate_default_instance_);
}
inline const ::mavsdk::rpc::mocap::VisionPositionEstimate& SetVisionPositionEstimateRequest::vision_position_estimate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.vision_position_estimate)
  return _internal_vision_position_estimate();
}
inline void SetVisionPositionEstimateRequest::unsafe_arena_set_allocated_vision_position_estimate(::mavsdk::rpc::mocap::VisionPositionEstimate* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vision_position_estimate_);
  }
  _impl_.vision_position_estimate_ = reinterpret_cast<::mavsdk::rpc::mocap::VisionPositionEstimate*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.vision_position_estimate)
}
inline ::mavsdk::rpc::mocap::VisionPositionEstimate* SetVisionPositionEstimateRequest::release_vision_position_estimate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::VisionPositionEstimate* released = _impl_.vision_position_estimate_;
  _impl_.vision_position_estimate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::VisionPositionEstimate* SetVisionPositionEstimateRequest::unsafe_arena_release_vision_position_estimate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.vision_position_estimate)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::VisionPositionEstimate* temp = _impl_.vision_position_estimate_;
  _impl_.vision_position_estimate_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::VisionPositionEstimate* SetVisionPositionEstimateRequest::_internal_mutable_vision_position_estimate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.vision_position_estimate_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::VisionPositionEstimate>(GetArena());
    _impl_.vision_position_estimate_ = reinterpret_cast<::mavsdk::rpc::mocap::VisionPositionEstimate*>(p);
  }
  return _impl_.vision_position_estimate_;
}
inline ::mavsdk::rpc::mocap::VisionPositionEstimate* SetVisionPositionEstimateRequest::mutable_vision_position_estimate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::VisionPositionEstimate* _msg = _internal_mutable_vision_position_estimate();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.vision_position_estimate)
  return _msg;
}
inline void SetVisionPositionEstimateRequest::set_allocated_vision_position_estimate(::mavsdk::rpc::mocap::VisionPositionEstimate* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::VisionPositionEstimate*>(_impl_.vision_position_estimate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::VisionPositionEstimate*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.vision_position_estimate_ = reinterpret_cast<::mavsdk::rpc::mocap::VisionPositionEstimate*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.vision_position_estimate)
}

// -------------------------------------------------------------------

// SetVisionPositionEstimateResponse

// .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
inline bool SetVisionPositionEstimateResponse::has_mocap_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mocap_result_ != nullptr);
  return value;
}
inline void SetVisionPositionEstimateResponse::clear_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.mocap_result_ != nullptr) _impl_.mocap_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetVisionPositionEstimateResponse::_internal_mocap_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::MocapResult* p = _impl_.mocap_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::MocapResult&>(::mavsdk::rpc::mocap::_MocapResult_default_instance_);
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetVisionPositionEstimateResponse::mocap_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.mocap_result)
  return _internal_mocap_result();
}
inline void SetVisionPositionEstimateResponse::unsafe_arena_set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mocap_result_);
  }
  _impl_.mocap_result_ = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.mocap_result)
}
inline ::mavsdk::rpc::mocap::MocapResult* SetVisionPositionEstimateResponse::release_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::MocapResult* released = _impl_.mocap_result_;
  _impl_.mocap_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetVisionPositionEstimateResponse::unsafe_arena_release_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.mocap_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::MocapResult* temp = _impl_.mocap_result_;
  _impl_.mocap_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetVisionPositionEstimateResponse::_internal_mutable_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mocap_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::MocapResult>(GetArena());
    _impl_.mocap_result_ = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(p);
  }
  return _impl_.mocap_result_;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetVisionPositionEstimateResponse::mutable_mocap_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::MocapResult* _msg = _internal_mutable_mocap_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.mocap_result)
  return _msg;
}
inline void SetVisionPositionEstimateResponse::set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(_impl_.mocap_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.mocap_result_ = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.mocap_result)
}

// -------------------------------------------------------------------

// SetAttitudePositionMocapRequest

// .mavsdk.rpc.mocap.AttitudePositionMocap attitude_position_mocap = 1;
inline bool SetAttitudePositionMocapRequest::has_attitude_position_mocap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attitude_position_mocap_ != nullptr);
  return value;
}
inline void SetAttitudePositionMocapRequest::clear_attitude_position_mocap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.attitude_position_mocap_ != nullptr) _impl_.attitude_position_mocap_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::mocap::AttitudePositionMocap& SetAttitudePositionMocapRequest::_internal_attitude_position_mocap() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::AttitudePositionMocap* p = _impl_.attitude_position_mocap_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::AttitudePositionMocap&>(::mavsdk::rpc::mocap::_AttitudePositionMocap_default_instance_);
}
inline const ::mavsdk::rpc::mocap::AttitudePositionMocap& SetAttitudePositionMocapRequest::attitude_position_mocap() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.attitude_position_mocap)
  return _internal_attitude_position_mocap();
}
inline void SetAttitudePositionMocapRequest::unsafe_arena_set_allocated_attitude_position_mocap(::mavsdk::rpc::mocap::AttitudePositionMocap* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attitude_position_mocap_);
  }
  _impl_.attitude_position_mocap_ = reinterpret_cast<::mavsdk::rpc::mocap::AttitudePositionMocap*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.attitude_position_mocap)
}
inline ::mavsdk::rpc::mocap::AttitudePositionMocap* SetAttitudePositionMocapRequest::release_attitude_position_mocap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::AttitudePositionMocap* released = _impl_.attitude_position_mocap_;
  _impl_.attitude_position_mocap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::AttitudePositionMocap* SetAttitudePositionMocapRequest::unsafe_arena_release_attitude_position_mocap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.attitude_position_mocap)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::AttitudePositionMocap* temp = _impl_.attitude_position_mocap_;
  _impl_.attitude_position_mocap_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::AttitudePositionMocap* SetAttitudePositionMocapRequest::_internal_mutable_attitude_position_mocap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.attitude_position_mocap_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::AttitudePositionMocap>(GetArena());
    _impl_.attitude_position_mocap_ = reinterpret_cast<::mavsdk::rpc::mocap::AttitudePositionMocap*>(p);
  }
  return _impl_.attitude_position_mocap_;
}
inline ::mavsdk::rpc::mocap::AttitudePositionMocap* SetAttitudePositionMocapRequest::mutable_attitude_position_mocap() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::AttitudePositionMocap* _msg = _internal_mutable_attitude_position_mocap();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.attitude_position_mocap)
  return _msg;
}
inline void SetAttitudePositionMocapRequest::set_allocated_attitude_position_mocap(::mavsdk::rpc::mocap::AttitudePositionMocap* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::AttitudePositionMocap*>(_impl_.attitude_position_mocap_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::AttitudePositionMocap*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.attitude_position_mocap_ = reinterpret_cast<::mavsdk::rpc::mocap::AttitudePositionMocap*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.attitude_position_mocap)
}

// -------------------------------------------------------------------

// SetAttitudePositionMocapResponse

// .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
inline bool SetAttitudePositionMocapResponse::has_mocap_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mocap_result_ != nullptr);
  return value;
}
inline void SetAttitudePositionMocapResponse::clear_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.mocap_result_ != nullptr) _impl_.mocap_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetAttitudePositionMocapResponse::_internal_mocap_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::MocapResult* p = _impl_.mocap_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::MocapResult&>(::mavsdk::rpc::mocap::_MocapResult_default_instance_);
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetAttitudePositionMocapResponse::mocap_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.mocap_result)
  return _internal_mocap_result();
}
inline void SetAttitudePositionMocapResponse::unsafe_arena_set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mocap_result_);
  }
  _impl_.mocap_result_ = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.mocap_result)
}
inline ::mavsdk::rpc::mocap::MocapResult* SetAttitudePositionMocapResponse::release_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::MocapResult* released = _impl_.mocap_result_;
  _impl_.mocap_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetAttitudePositionMocapResponse::unsafe_arena_release_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.mocap_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::MocapResult* temp = _impl_.mocap_result_;
  _impl_.mocap_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetAttitudePositionMocapResponse::_internal_mutable_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mocap_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::MocapResult>(GetArena());
    _impl_.mocap_result_ = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(p);
  }
  return _impl_.mocap_result_;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetAttitudePositionMocapResponse::mutable_mocap_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::MocapResult* _msg = _internal_mutable_mocap_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.mocap_result)
  return _msg;
}
inline void SetAttitudePositionMocapResponse::set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(_impl_.mocap_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.mocap_result_ = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.mocap_result)
}

// -------------------------------------------------------------------

// SetOdometryRequest

// .mavsdk.rpc.mocap.Odometry odometry = 1;
inline bool SetOdometryRequest::has_odometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.odometry_ != nullptr);
  return value;
}
inline void SetOdometryRequest::clear_odometry() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.odometry_ != nullptr) _impl_.odometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::mocap::Odometry& SetOdometryRequest::_internal_odometry() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::Odometry* p = _impl_.odometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Odometry&>(::mavsdk::rpc::mocap::_Odometry_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Odometry& SetOdometryRequest::odometry() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetOdometryRequest.odometry)
  return _internal_odometry();
}
inline void SetOdometryRequest::unsafe_arena_set_allocated_odometry(::mavsdk::rpc::mocap::Odometry* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.odometry_);
  }
  _impl_.odometry_ = reinterpret_cast<::mavsdk::rpc::mocap::Odometry*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetOdometryRequest.odometry)
}
inline ::mavsdk::rpc::mocap::Odometry* SetOdometryRequest::release_odometry() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::Odometry* released = _impl_.odometry_;
  _impl_.odometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::Odometry* SetOdometryRequest::unsafe_arena_release_odometry() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetOdometryRequest.odometry)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::Odometry* temp = _impl_.odometry_;
  _impl_.odometry_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Odometry* SetOdometryRequest::_internal_mutable_odometry() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.odometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Odometry>(GetArena());
    _impl_.odometry_ = reinterpret_cast<::mavsdk::rpc::mocap::Odometry*>(p);
  }
  return _impl_.odometry_;
}
inline ::mavsdk::rpc::mocap::Odometry* SetOdometryRequest::mutable_odometry() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::Odometry* _msg = _internal_mutable_odometry();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetOdometryRequest.odometry)
  return _msg;
}
inline void SetOdometryRequest::set_allocated_odometry(::mavsdk::rpc::mocap::Odometry* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::Odometry*>(_impl_.odometry_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::Odometry*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.odometry_ = reinterpret_cast<::mavsdk::rpc::mocap::Odometry*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetOdometryRequest.odometry)
}

// -------------------------------------------------------------------

// SetOdometryResponse

// .mavsdk.rpc.mocap.MocapResult mocap_result = 1;
inline bool SetOdometryResponse::has_mocap_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mocap_result_ != nullptr);
  return value;
}
inline void SetOdometryResponse::clear_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.mocap_result_ != nullptr) _impl_.mocap_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetOdometryResponse::_internal_mocap_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::MocapResult* p = _impl_.mocap_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::MocapResult&>(::mavsdk::rpc::mocap::_MocapResult_default_instance_);
}
inline const ::mavsdk::rpc::mocap::MocapResult& SetOdometryResponse::mocap_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SetOdometryResponse.mocap_result)
  return _internal_mocap_result();
}
inline void SetOdometryResponse::unsafe_arena_set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mocap_result_);
  }
  _impl_.mocap_result_ = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.SetOdometryResponse.mocap_result)
}
inline ::mavsdk::rpc::mocap::MocapResult* SetOdometryResponse::release_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::MocapResult* released = _impl_.mocap_result_;
  _impl_.mocap_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetOdometryResponse::unsafe_arena_release_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.SetOdometryResponse.mocap_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::MocapResult* temp = _impl_.mocap_result_;
  _impl_.mocap_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetOdometryResponse::_internal_mutable_mocap_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mocap_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::MocapResult>(GetArena());
    _impl_.mocap_result_ = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(p);
  }
  return _impl_.mocap_result_;
}
inline ::mavsdk::rpc::mocap::MocapResult* SetOdometryResponse::mutable_mocap_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::MocapResult* _msg = _internal_mutable_mocap_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.SetOdometryResponse.mocap_result)
  return _msg;
}
inline void SetOdometryResponse::set_allocated_mocap_result(::mavsdk::rpc::mocap::MocapResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(_impl_.mocap_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.mocap_result_ = reinterpret_cast<::mavsdk::rpc::mocap::MocapResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.SetOdometryResponse.mocap_result)
}

// -------------------------------------------------------------------

// PositionBody

// float x_m = 1;
inline void PositionBody::clear_x_m() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_m_ = 0;
}
inline float PositionBody::x_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.PositionBody.x_m)
  return _internal_x_m();
}
inline void PositionBody::set_x_m(float value) {
  _internal_set_x_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.PositionBody.x_m)
}
inline float PositionBody::_internal_x_m() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_m_;
}
inline void PositionBody::_internal_set_x_m(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_m_ = value;
}

// float y_m = 2;
inline void PositionBody::clear_y_m() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_m_ = 0;
}
inline float PositionBody::y_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.PositionBody.y_m)
  return _internal_y_m();
}
inline void PositionBody::set_y_m(float value) {
  _internal_set_y_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.PositionBody.y_m)
}
inline float PositionBody::_internal_y_m() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_m_;
}
inline void PositionBody::_internal_set_y_m(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_m_ = value;
}

// float z_m = 3;
inline void PositionBody::clear_z_m() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_m_ = 0;
}
inline float PositionBody::z_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.PositionBody.z_m)
  return _internal_z_m();
}
inline void PositionBody::set_z_m(float value) {
  _internal_set_z_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.PositionBody.z_m)
}
inline float PositionBody::_internal_z_m() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_m_;
}
inline void PositionBody::_internal_set_z_m(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_m_ = value;
}

// -------------------------------------------------------------------

// AngleBody

// float roll_rad = 1;
inline void AngleBody::clear_roll_rad() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roll_rad_ = 0;
}
inline float AngleBody::roll_rad() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngleBody.roll_rad)
  return _internal_roll_rad();
}
inline void AngleBody::set_roll_rad(float value) {
  _internal_set_roll_rad(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngleBody.roll_rad)
}
inline float AngleBody::_internal_roll_rad() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roll_rad_;
}
inline void AngleBody::_internal_set_roll_rad(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.roll_rad_ = value;
}

// float pitch_rad = 2;
inline void AngleBody::clear_pitch_rad() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pitch_rad_ = 0;
}
inline float AngleBody::pitch_rad() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngleBody.pitch_rad)
  return _internal_pitch_rad();
}
inline void AngleBody::set_pitch_rad(float value) {
  _internal_set_pitch_rad(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngleBody.pitch_rad)
}
inline float AngleBody::_internal_pitch_rad() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pitch_rad_;
}
inline void AngleBody::_internal_set_pitch_rad(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pitch_rad_ = value;
}

// float yaw_rad = 3;
inline void AngleBody::clear_yaw_rad() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.yaw_rad_ = 0;
}
inline float AngleBody::yaw_rad() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngleBody.yaw_rad)
  return _internal_yaw_rad();
}
inline void AngleBody::set_yaw_rad(float value) {
  _internal_set_yaw_rad(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngleBody.yaw_rad)
}
inline float AngleBody::_internal_yaw_rad() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.yaw_rad_;
}
inline void AngleBody::_internal_set_yaw_rad(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.yaw_rad_ = value;
}

// -------------------------------------------------------------------

// SpeedBody

// float x_m_s = 1;
inline void SpeedBody::clear_x_m_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_m_s_ = 0;
}
inline float SpeedBody::x_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SpeedBody.x_m_s)
  return _internal_x_m_s();
}
inline void SpeedBody::set_x_m_s(float value) {
  _internal_set_x_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.SpeedBody.x_m_s)
}
inline float SpeedBody::_internal_x_m_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_m_s_;
}
inline void SpeedBody::_internal_set_x_m_s(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_m_s_ = value;
}

// float y_m_s = 2;
inline void SpeedBody::clear_y_m_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_m_s_ = 0;
}
inline float SpeedBody::y_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SpeedBody.y_m_s)
  return _internal_y_m_s();
}
inline void SpeedBody::set_y_m_s(float value) {
  _internal_set_y_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.SpeedBody.y_m_s)
}
inline float SpeedBody::_internal_y_m_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_m_s_;
}
inline void SpeedBody::_internal_set_y_m_s(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_m_s_ = value;
}

// float z_m_s = 3;
inline void SpeedBody::clear_z_m_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_m_s_ = 0;
}
inline float SpeedBody::z_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.SpeedBody.z_m_s)
  return _internal_z_m_s();
}
inline void SpeedBody::set_z_m_s(float value) {
  _internal_set_z_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.SpeedBody.z_m_s)
}
inline float SpeedBody::_internal_z_m_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_m_s_;
}
inline void SpeedBody::_internal_set_z_m_s(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_m_s_ = value;
}

// -------------------------------------------------------------------

// AngularVelocityBody

// float roll_rad_s = 1;
inline void AngularVelocityBody::clear_roll_rad_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roll_rad_s_ = 0;
}
inline float AngularVelocityBody::roll_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngularVelocityBody.roll_rad_s)
  return _internal_roll_rad_s();
}
inline void AngularVelocityBody::set_roll_rad_s(float value) {
  _internal_set_roll_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngularVelocityBody.roll_rad_s)
}
inline float AngularVelocityBody::_internal_roll_rad_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roll_rad_s_;
}
inline void AngularVelocityBody::_internal_set_roll_rad_s(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.roll_rad_s_ = value;
}

// float pitch_rad_s = 2;
inline void AngularVelocityBody::clear_pitch_rad_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pitch_rad_s_ = 0;
}
inline float AngularVelocityBody::pitch_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngularVelocityBody.pitch_rad_s)
  return _internal_pitch_rad_s();
}
inline void AngularVelocityBody::set_pitch_rad_s(float value) {
  _internal_set_pitch_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngularVelocityBody.pitch_rad_s)
}
inline float AngularVelocityBody::_internal_pitch_rad_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pitch_rad_s_;
}
inline void AngularVelocityBody::_internal_set_pitch_rad_s(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pitch_rad_s_ = value;
}

// float yaw_rad_s = 3;
inline void AngularVelocityBody::clear_yaw_rad_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.yaw_rad_s_ = 0;
}
inline float AngularVelocityBody::yaw_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AngularVelocityBody.yaw_rad_s)
  return _internal_yaw_rad_s();
}
inline void AngularVelocityBody::set_yaw_rad_s(float value) {
  _internal_set_yaw_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AngularVelocityBody.yaw_rad_s)
}
inline float AngularVelocityBody::_internal_yaw_rad_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.yaw_rad_s_;
}
inline void AngularVelocityBody::_internal_set_yaw_rad_s(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.yaw_rad_s_ = value;
}

// -------------------------------------------------------------------

// Covariance

// repeated float covariance_matrix = 1;
inline int Covariance::_internal_covariance_matrix_size() const {
  return _internal_covariance_matrix().size();
}
inline int Covariance::covariance_matrix_size() const {
  return _internal_covariance_matrix_size();
}
inline void Covariance::clear_covariance_matrix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.covariance_matrix_.Clear();
}
inline float Covariance::covariance_matrix(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Covariance.covariance_matrix)
  return _internal_covariance_matrix().Get(index);
}
inline void Covariance::set_covariance_matrix(int index, float value) {
  _internal_mutable_covariance_matrix()->Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Covariance.covariance_matrix)
}
inline void Covariance::add_covariance_matrix(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_covariance_matrix()->Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.mocap.Covariance.covariance_matrix)
}
inline const ::google::protobuf::RepeatedField<float>& Covariance::covariance_matrix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.mocap.Covariance.covariance_matrix)
  return _internal_covariance_matrix();
}
inline ::google::protobuf::RepeatedField<float>* Covariance::mutable_covariance_matrix()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.mocap.Covariance.covariance_matrix)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_covariance_matrix();
}
inline const ::google::protobuf::RepeatedField<float>& Covariance::_internal_covariance_matrix()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.covariance_matrix_;
}
inline ::google::protobuf::RepeatedField<float>* Covariance::_internal_mutable_covariance_matrix() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.covariance_matrix_;
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1;
inline void Quaternion::clear_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.w_ = 0;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Quaternion.w)
}
inline float Quaternion::_internal_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.w_;
}
inline void Quaternion::_internal_set_w(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.w_ = value;
}

// float x = 2;
inline void Quaternion::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Quaternion.x)
}
inline float Quaternion::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Quaternion::_internal_set_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// float y = 3;
inline void Quaternion::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Quaternion.y)
}
inline float Quaternion::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Quaternion::_internal_set_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// float z = 4;
inline void Quaternion::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Quaternion.z)
}
inline float Quaternion::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void Quaternion::_internal_set_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// VisionPositionEstimate

// uint64 time_usec = 1;
inline void VisionPositionEstimate::clear_time_usec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_usec_ = ::uint64_t{0u};
}
inline ::uint64_t VisionPositionEstimate::time_usec() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.VisionPositionEstimate.time_usec)
  return _internal_time_usec();
}
inline void VisionPositionEstimate::set_time_usec(::uint64_t value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.VisionPositionEstimate.time_usec)
}
inline ::uint64_t VisionPositionEstimate::_internal_time_usec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_usec_;
}
inline void VisionPositionEstimate::_internal_set_time_usec(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_usec_ = value;
}

// .mavsdk.rpc.mocap.PositionBody position_body = 2;
inline bool VisionPositionEstimate::has_position_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_body_ != nullptr);
  return value;
}
inline void VisionPositionEstimate::clear_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_body_ != nullptr) _impl_.position_body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::mocap::PositionBody& VisionPositionEstimate::_internal_position_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::PositionBody* p = _impl_.position_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::PositionBody&>(::mavsdk::rpc::mocap::_PositionBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::PositionBody& VisionPositionEstimate::position_body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.VisionPositionEstimate.position_body)
  return _internal_position_body();
}
inline void VisionPositionEstimate::unsafe_arena_set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_body_);
  }
  _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.position_body)
}
inline ::mavsdk::rpc::mocap::PositionBody* VisionPositionEstimate::release_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::PositionBody* released = _impl_.position_body_;
  _impl_.position_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::PositionBody* VisionPositionEstimate::unsafe_arena_release_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.VisionPositionEstimate.position_body)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::PositionBody* temp = _impl_.position_body_;
  _impl_.position_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::PositionBody* VisionPositionEstimate::_internal_mutable_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::PositionBody>(GetArena());
    _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(p);
  }
  return _impl_.position_body_;
}
inline ::mavsdk::rpc::mocap::PositionBody* VisionPositionEstimate::mutable_position_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::PositionBody* _msg = _internal_mutable_position_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.VisionPositionEstimate.position_body)
  return _msg;
}
inline void VisionPositionEstimate::set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(_impl_.position_body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.position_body)
}

// .mavsdk.rpc.mocap.AngleBody angle_body = 3;
inline bool VisionPositionEstimate::has_angle_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angle_body_ != nullptr);
  return value;
}
inline void VisionPositionEstimate::clear_angle_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.angle_body_ != nullptr) _impl_.angle_body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::mocap::AngleBody& VisionPositionEstimate::_internal_angle_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::AngleBody* p = _impl_.angle_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::AngleBody&>(::mavsdk::rpc::mocap::_AngleBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::AngleBody& VisionPositionEstimate::angle_body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.VisionPositionEstimate.angle_body)
  return _internal_angle_body();
}
inline void VisionPositionEstimate::unsafe_arena_set_allocated_angle_body(::mavsdk::rpc::mocap::AngleBody* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angle_body_);
  }
  _impl_.angle_body_ = reinterpret_cast<::mavsdk::rpc::mocap::AngleBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.angle_body)
}
inline ::mavsdk::rpc::mocap::AngleBody* VisionPositionEstimate::release_angle_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::mocap::AngleBody* released = _impl_.angle_body_;
  _impl_.angle_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::AngleBody* VisionPositionEstimate::unsafe_arena_release_angle_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.VisionPositionEstimate.angle_body)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::mocap::AngleBody* temp = _impl_.angle_body_;
  _impl_.angle_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::AngleBody* VisionPositionEstimate::_internal_mutable_angle_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.angle_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::AngleBody>(GetArena());
    _impl_.angle_body_ = reinterpret_cast<::mavsdk::rpc::mocap::AngleBody*>(p);
  }
  return _impl_.angle_body_;
}
inline ::mavsdk::rpc::mocap::AngleBody* VisionPositionEstimate::mutable_angle_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::AngleBody* _msg = _internal_mutable_angle_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.VisionPositionEstimate.angle_body)
  return _msg;
}
inline void VisionPositionEstimate::set_allocated_angle_body(::mavsdk::rpc::mocap::AngleBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::AngleBody*>(_impl_.angle_body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::AngleBody*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.angle_body_ = reinterpret_cast<::mavsdk::rpc::mocap::AngleBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.angle_body)
}

// .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
inline bool VisionPositionEstimate::has_pose_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_covariance_ != nullptr);
  return value;
}
inline void VisionPositionEstimate::clear_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pose_covariance_ != nullptr) _impl_.pose_covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::mavsdk::rpc::mocap::Covariance& VisionPositionEstimate::_internal_pose_covariance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::Covariance* p = _impl_.pose_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Covariance&>(::mavsdk::rpc::mocap::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Covariance& VisionPositionEstimate::pose_covariance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.VisionPositionEstimate.pose_covariance)
  return _internal_pose_covariance();
}
inline void VisionPositionEstimate::unsafe_arena_set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_covariance_);
  }
  _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.pose_covariance)
}
inline ::mavsdk::rpc::mocap::Covariance* VisionPositionEstimate::release_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::mocap::Covariance* released = _impl_.pose_covariance_;
  _impl_.pose_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::Covariance* VisionPositionEstimate::unsafe_arena_release_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.VisionPositionEstimate.pose_covariance)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::mocap::Covariance* temp = _impl_.pose_covariance_;
  _impl_.pose_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* VisionPositionEstimate::_internal_mutable_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.pose_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Covariance>(GetArena());
    _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(p);
  }
  return _impl_.pose_covariance_;
}
inline ::mavsdk::rpc::mocap::Covariance* VisionPositionEstimate::mutable_pose_covariance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::Covariance* _msg = _internal_mutable_pose_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.VisionPositionEstimate.pose_covariance)
  return _msg;
}
inline void VisionPositionEstimate::set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(_impl_.pose_covariance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.VisionPositionEstimate.pose_covariance)
}

// -------------------------------------------------------------------

// AttitudePositionMocap

// uint64 time_usec = 1;
inline void AttitudePositionMocap::clear_time_usec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_usec_ = ::uint64_t{0u};
}
inline ::uint64_t AttitudePositionMocap::time_usec() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AttitudePositionMocap.time_usec)
  return _internal_time_usec();
}
inline void AttitudePositionMocap::set_time_usec(::uint64_t value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.AttitudePositionMocap.time_usec)
}
inline ::uint64_t AttitudePositionMocap::_internal_time_usec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_usec_;
}
inline void AttitudePositionMocap::_internal_set_time_usec(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_usec_ = value;
}

// .mavsdk.rpc.mocap.Quaternion q = 2;
inline bool AttitudePositionMocap::has_q() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.q_ != nullptr);
  return value;
}
inline void AttitudePositionMocap::clear_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.q_ != nullptr) _impl_.q_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::mocap::Quaternion& AttitudePositionMocap::_internal_q() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::Quaternion* p = _impl_.q_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Quaternion&>(::mavsdk::rpc::mocap::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Quaternion& AttitudePositionMocap::q() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AttitudePositionMocap.q)
  return _internal_q();
}
inline void AttitudePositionMocap::unsafe_arena_set_allocated_q(::mavsdk::rpc::mocap::Quaternion* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.q_);
  }
  _impl_.q_ = reinterpret_cast<::mavsdk::rpc::mocap::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.q)
}
inline ::mavsdk::rpc::mocap::Quaternion* AttitudePositionMocap::release_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::Quaternion* released = _impl_.q_;
  _impl_.q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::Quaternion* AttitudePositionMocap::unsafe_arena_release_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.AttitudePositionMocap.q)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::Quaternion* temp = _impl_.q_;
  _impl_.q_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Quaternion* AttitudePositionMocap::_internal_mutable_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.q_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Quaternion>(GetArena());
    _impl_.q_ = reinterpret_cast<::mavsdk::rpc::mocap::Quaternion*>(p);
  }
  return _impl_.q_;
}
inline ::mavsdk::rpc::mocap::Quaternion* AttitudePositionMocap::mutable_q() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::Quaternion* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.AttitudePositionMocap.q)
  return _msg;
}
inline void AttitudePositionMocap::set_allocated_q(::mavsdk::rpc::mocap::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::Quaternion*>(_impl_.q_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::Quaternion*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.q_ = reinterpret_cast<::mavsdk::rpc::mocap::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.q)
}

// .mavsdk.rpc.mocap.PositionBody position_body = 3;
inline bool AttitudePositionMocap::has_position_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_body_ != nullptr);
  return value;
}
inline void AttitudePositionMocap::clear_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_body_ != nullptr) _impl_.position_body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::mocap::PositionBody& AttitudePositionMocap::_internal_position_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::PositionBody* p = _impl_.position_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::PositionBody&>(::mavsdk::rpc::mocap::_PositionBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::PositionBody& AttitudePositionMocap::position_body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AttitudePositionMocap.position_body)
  return _internal_position_body();
}
inline void AttitudePositionMocap::unsafe_arena_set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_body_);
  }
  _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.position_body)
}
inline ::mavsdk::rpc::mocap::PositionBody* AttitudePositionMocap::release_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::mocap::PositionBody* released = _impl_.position_body_;
  _impl_.position_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::PositionBody* AttitudePositionMocap::unsafe_arena_release_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.AttitudePositionMocap.position_body)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::mocap::PositionBody* temp = _impl_.position_body_;
  _impl_.position_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::PositionBody* AttitudePositionMocap::_internal_mutable_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::PositionBody>(GetArena());
    _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(p);
  }
  return _impl_.position_body_;
}
inline ::mavsdk::rpc::mocap::PositionBody* AttitudePositionMocap::mutable_position_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::PositionBody* _msg = _internal_mutable_position_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.AttitudePositionMocap.position_body)
  return _msg;
}
inline void AttitudePositionMocap::set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(_impl_.position_body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.position_body)
}

// .mavsdk.rpc.mocap.Covariance pose_covariance = 4;
inline bool AttitudePositionMocap::has_pose_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_covariance_ != nullptr);
  return value;
}
inline void AttitudePositionMocap::clear_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pose_covariance_ != nullptr) _impl_.pose_covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::mavsdk::rpc::mocap::Covariance& AttitudePositionMocap::_internal_pose_covariance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::Covariance* p = _impl_.pose_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Covariance&>(::mavsdk::rpc::mocap::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Covariance& AttitudePositionMocap::pose_covariance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.AttitudePositionMocap.pose_covariance)
  return _internal_pose_covariance();
}
inline void AttitudePositionMocap::unsafe_arena_set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_covariance_);
  }
  _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.pose_covariance)
}
inline ::mavsdk::rpc::mocap::Covariance* AttitudePositionMocap::release_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::mocap::Covariance* released = _impl_.pose_covariance_;
  _impl_.pose_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::Covariance* AttitudePositionMocap::unsafe_arena_release_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.AttitudePositionMocap.pose_covariance)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::mocap::Covariance* temp = _impl_.pose_covariance_;
  _impl_.pose_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* AttitudePositionMocap::_internal_mutable_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.pose_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Covariance>(GetArena());
    _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(p);
  }
  return _impl_.pose_covariance_;
}
inline ::mavsdk::rpc::mocap::Covariance* AttitudePositionMocap::mutable_pose_covariance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::Covariance* _msg = _internal_mutable_pose_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.AttitudePositionMocap.pose_covariance)
  return _msg;
}
inline void AttitudePositionMocap::set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(_impl_.pose_covariance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.AttitudePositionMocap.pose_covariance)
}

// -------------------------------------------------------------------

// Odometry

// uint64 time_usec = 1;
inline void Odometry::clear_time_usec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_usec_ = ::uint64_t{0u};
}
inline ::uint64_t Odometry::time_usec() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.time_usec)
  return _internal_time_usec();
}
inline void Odometry::set_time_usec(::uint64_t value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Odometry.time_usec)
}
inline ::uint64_t Odometry::_internal_time_usec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_usec_;
}
inline void Odometry::_internal_set_time_usec(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_usec_ = value;
}

// .mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;
inline void Odometry::clear_frame_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frame_id_ = 0;
}
inline ::mavsdk::rpc::mocap::Odometry_MavFrame Odometry::frame_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.frame_id)
  return _internal_frame_id();
}
inline void Odometry::set_frame_id(::mavsdk::rpc::mocap::Odometry_MavFrame value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.Odometry.frame_id)
}
inline ::mavsdk::rpc::mocap::Odometry_MavFrame Odometry::_internal_frame_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mavsdk::rpc::mocap::Odometry_MavFrame>(_impl_.frame_id_);
}
inline void Odometry::_internal_set_frame_id(::mavsdk::rpc::mocap::Odometry_MavFrame value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frame_id_ = value;
}

// .mavsdk.rpc.mocap.PositionBody position_body = 3;
inline bool Odometry::has_position_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_body_ != nullptr);
  return value;
}
inline void Odometry::clear_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_body_ != nullptr) _impl_.position_body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::mocap::PositionBody& Odometry::_internal_position_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::PositionBody* p = _impl_.position_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::PositionBody&>(::mavsdk::rpc::mocap::_PositionBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::PositionBody& Odometry::position_body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.position_body)
  return _internal_position_body();
}
inline void Odometry::unsafe_arena_set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_body_);
  }
  _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.position_body)
}
inline ::mavsdk::rpc::mocap::PositionBody* Odometry::release_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::PositionBody* released = _impl_.position_body_;
  _impl_.position_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::PositionBody* Odometry::unsafe_arena_release_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.position_body)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::mocap::PositionBody* temp = _impl_.position_body_;
  _impl_.position_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::PositionBody* Odometry::_internal_mutable_position_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::PositionBody>(GetArena());
    _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(p);
  }
  return _impl_.position_body_;
}
inline ::mavsdk::rpc::mocap::PositionBody* Odometry::mutable_position_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::PositionBody* _msg = _internal_mutable_position_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.position_body)
  return _msg;
}
inline void Odometry::set_allocated_position_body(::mavsdk::rpc::mocap::PositionBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(_impl_.position_body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::mocap::PositionBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.position_body)
}

// .mavsdk.rpc.mocap.Quaternion q = 4;
inline bool Odometry::has_q() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.q_ != nullptr);
  return value;
}
inline void Odometry::clear_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.q_ != nullptr) _impl_.q_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::mocap::Quaternion& Odometry::_internal_q() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::Quaternion* p = _impl_.q_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Quaternion&>(::mavsdk::rpc::mocap::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Quaternion& Odometry::q() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.q)
  return _internal_q();
}
inline void Odometry::unsafe_arena_set_allocated_q(::mavsdk::rpc::mocap::Quaternion* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.q_);
  }
  _impl_.q_ = reinterpret_cast<::mavsdk::rpc::mocap::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.q)
}
inline ::mavsdk::rpc::mocap::Quaternion* Odometry::release_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::mocap::Quaternion* released = _impl_.q_;
  _impl_.q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::Quaternion* Odometry::unsafe_arena_release_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.q)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::mocap::Quaternion* temp = _impl_.q_;
  _impl_.q_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Quaternion* Odometry::_internal_mutable_q() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.q_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Quaternion>(GetArena());
    _impl_.q_ = reinterpret_cast<::mavsdk::rpc::mocap::Quaternion*>(p);
  }
  return _impl_.q_;
}
inline ::mavsdk::rpc::mocap::Quaternion* Odometry::mutable_q() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::Quaternion* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.q)
  return _msg;
}
inline void Odometry::set_allocated_q(::mavsdk::rpc::mocap::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::Quaternion*>(_impl_.q_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::Quaternion*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.q_ = reinterpret_cast<::mavsdk::rpc::mocap::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.q)
}

// .mavsdk.rpc.mocap.SpeedBody speed_body = 5;
inline bool Odometry::has_speed_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_body_ != nullptr);
  return value;
}
inline void Odometry::clear_speed_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.speed_body_ != nullptr) _impl_.speed_body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::mavsdk::rpc::mocap::SpeedBody& Odometry::_internal_speed_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::SpeedBody* p = _impl_.speed_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::SpeedBody&>(::mavsdk::rpc::mocap::_SpeedBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::SpeedBody& Odometry::speed_body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.speed_body)
  return _internal_speed_body();
}
inline void Odometry::unsafe_arena_set_allocated_speed_body(::mavsdk::rpc::mocap::SpeedBody* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speed_body_);
  }
  _impl_.speed_body_ = reinterpret_cast<::mavsdk::rpc::mocap::SpeedBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.speed_body)
}
inline ::mavsdk::rpc::mocap::SpeedBody* Odometry::release_speed_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::mocap::SpeedBody* released = _impl_.speed_body_;
  _impl_.speed_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::SpeedBody* Odometry::unsafe_arena_release_speed_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.speed_body)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::mocap::SpeedBody* temp = _impl_.speed_body_;
  _impl_.speed_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::SpeedBody* Odometry::_internal_mutable_speed_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.speed_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::SpeedBody>(GetArena());
    _impl_.speed_body_ = reinterpret_cast<::mavsdk::rpc::mocap::SpeedBody*>(p);
  }
  return _impl_.speed_body_;
}
inline ::mavsdk::rpc::mocap::SpeedBody* Odometry::mutable_speed_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::SpeedBody* _msg = _internal_mutable_speed_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.speed_body)
  return _msg;
}
inline void Odometry::set_allocated_speed_body(::mavsdk::rpc::mocap::SpeedBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::SpeedBody*>(_impl_.speed_body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::SpeedBody*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.speed_body_ = reinterpret_cast<::mavsdk::rpc::mocap::SpeedBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.speed_body)
}

// .mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;
inline bool Odometry::has_angular_velocity_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_body_ != nullptr);
  return value;
}
inline void Odometry::clear_angular_velocity_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.angular_velocity_body_ != nullptr) _impl_.angular_velocity_body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::mavsdk::rpc::mocap::AngularVelocityBody& Odometry::_internal_angular_velocity_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::AngularVelocityBody* p = _impl_.angular_velocity_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::AngularVelocityBody&>(::mavsdk::rpc::mocap::_AngularVelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::mocap::AngularVelocityBody& Odometry::angular_velocity_body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.angular_velocity_body)
  return _internal_angular_velocity_body();
}
inline void Odometry::unsafe_arena_set_allocated_angular_velocity_body(::mavsdk::rpc::mocap::AngularVelocityBody* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_body_);
  }
  _impl_.angular_velocity_body_ = reinterpret_cast<::mavsdk::rpc::mocap::AngularVelocityBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.angular_velocity_body)
}
inline ::mavsdk::rpc::mocap::AngularVelocityBody* Odometry::release_angular_velocity_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::mavsdk::rpc::mocap::AngularVelocityBody* released = _impl_.angular_velocity_body_;
  _impl_.angular_velocity_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::AngularVelocityBody* Odometry::unsafe_arena_release_angular_velocity_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.angular_velocity_body)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::mavsdk::rpc::mocap::AngularVelocityBody* temp = _impl_.angular_velocity_body_;
  _impl_.angular_velocity_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::AngularVelocityBody* Odometry::_internal_mutable_angular_velocity_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.angular_velocity_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::AngularVelocityBody>(GetArena());
    _impl_.angular_velocity_body_ = reinterpret_cast<::mavsdk::rpc::mocap::AngularVelocityBody*>(p);
  }
  return _impl_.angular_velocity_body_;
}
inline ::mavsdk::rpc::mocap::AngularVelocityBody* Odometry::mutable_angular_velocity_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::AngularVelocityBody* _msg = _internal_mutable_angular_velocity_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.angular_velocity_body)
  return _msg;
}
inline void Odometry::set_allocated_angular_velocity_body(::mavsdk::rpc::mocap::AngularVelocityBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::AngularVelocityBody*>(_impl_.angular_velocity_body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::AngularVelocityBody*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.angular_velocity_body_ = reinterpret_cast<::mavsdk::rpc::mocap::AngularVelocityBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.angular_velocity_body)
}

// .mavsdk.rpc.mocap.Covariance pose_covariance = 7;
inline bool Odometry::has_pose_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_covariance_ != nullptr);
  return value;
}
inline void Odometry::clear_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pose_covariance_ != nullptr) _impl_.pose_covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::mavsdk::rpc::mocap::Covariance& Odometry::_internal_pose_covariance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::Covariance* p = _impl_.pose_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Covariance&>(::mavsdk::rpc::mocap::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Covariance& Odometry::pose_covariance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.pose_covariance)
  return _internal_pose_covariance();
}
inline void Odometry::unsafe_arena_set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_covariance_);
  }
  _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.pose_covariance)
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::release_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::mavsdk::rpc::mocap::Covariance* released = _impl_.pose_covariance_;
  _impl_.pose_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::unsafe_arena_release_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.pose_covariance)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::mavsdk::rpc::mocap::Covariance* temp = _impl_.pose_covariance_;
  _impl_.pose_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::_internal_mutable_pose_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.pose_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Covariance>(GetArena());
    _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(p);
  }
  return _impl_.pose_covariance_;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::mutable_pose_covariance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::Covariance* _msg = _internal_mutable_pose_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.pose_covariance)
  return _msg;
}
inline void Odometry::set_allocated_pose_covariance(::mavsdk::rpc::mocap::Covariance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(_impl_.pose_covariance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.pose_covariance)
}

// .mavsdk.rpc.mocap.Covariance velocity_covariance = 8;
inline bool Odometry::has_velocity_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_covariance_ != nullptr);
  return value;
}
inline void Odometry::clear_velocity_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.velocity_covariance_ != nullptr) _impl_.velocity_covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::mavsdk::rpc::mocap::Covariance& Odometry::_internal_velocity_covariance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::mocap::Covariance* p = _impl_.velocity_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mocap::Covariance&>(::mavsdk::rpc::mocap::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::mocap::Covariance& Odometry::velocity_covariance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.Odometry.velocity_covariance)
  return _internal_velocity_covariance();
}
inline void Odometry::unsafe_arena_set_allocated_velocity_covariance(::mavsdk::rpc::mocap::Covariance* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.velocity_covariance_);
  }
  _impl_.velocity_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mocap.Odometry.velocity_covariance)
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::release_velocity_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::mavsdk::rpc::mocap::Covariance* released = _impl_.velocity_covariance_;
  _impl_.velocity_covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::unsafe_arena_release_velocity_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.Odometry.velocity_covariance)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::mavsdk::rpc::mocap::Covariance* temp = _impl_.velocity_covariance_;
  _impl_.velocity_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::_internal_mutable_velocity_covariance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.velocity_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mocap::Covariance>(GetArena());
    _impl_.velocity_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(p);
  }
  return _impl_.velocity_covariance_;
}
inline ::mavsdk::rpc::mocap::Covariance* Odometry::mutable_velocity_covariance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::mocap::Covariance* _msg = _internal_mutable_velocity_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.Odometry.velocity_covariance)
  return _msg;
}
inline void Odometry::set_allocated_velocity_covariance(::mavsdk::rpc::mocap::Covariance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(_impl_.velocity_covariance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.velocity_covariance_ = reinterpret_cast<::mavsdk::rpc::mocap::Covariance*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.Odometry.velocity_covariance)
}

// -------------------------------------------------------------------

// MocapResult

// .mavsdk.rpc.mocap.MocapResult.Result result = 1;
inline void MocapResult::clear_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::mocap::MocapResult_Result MocapResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.MocapResult.result)
  return _internal_result();
}
inline void MocapResult::set_result(::mavsdk::rpc::mocap::MocapResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.MocapResult.result)
}
inline ::mavsdk::rpc::mocap::MocapResult_Result MocapResult::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mavsdk::rpc::mocap::MocapResult_Result>(_impl_.result_);
}
inline void MocapResult::_internal_set_result(::mavsdk::rpc::mocap::MocapResult_Result value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_ = value;
}

// string result_str = 2;
inline void MocapResult::clear_result_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& MocapResult::result_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mocap.MocapResult.result_str)
  return _internal_result_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MocapResult::set_result_str(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mocap.MocapResult.result_str)
}
inline std::string* MocapResult::mutable_result_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mocap.MocapResult.result_str)
  return _s;
}
inline const std::string& MocapResult::_internal_result_str() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.result_str_.Get();
}
inline void MocapResult::_internal_set_result_str(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_str_.Set(value, GetArena());
}
inline std::string* MocapResult::_internal_mutable_result_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.result_str_.Mutable( GetArena());
}
inline std::string* MocapResult::release_result_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mocap.MocapResult.result_str)
  return _impl_.result_str_.Release();
}
inline void MocapResult::set_allocated_result_str(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_str_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.result_str_.IsDefault()) {
          _impl_.result_str_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mocap.MocapResult.result_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mocap
}  // namespace rpc
}  // namespace mavsdk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mavsdk::rpc::mocap::Odometry_MavFrame> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::mocap::Odometry_MavFrame>() {
  return ::mavsdk::rpc::mocap::Odometry_MavFrame_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::mocap::MocapResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::mocap::MocapResult_Result>() {
  return ::mavsdk::rpc::mocap::MocapResult_Result_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_mocap_2fmocap_2eproto_2epb_2eh
